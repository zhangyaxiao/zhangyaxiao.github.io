[{"title":"Elasticsearch 6.2.2的Restful API 常用操作","url":"https://zhangyaxiao.github.io/2022/05/10/Elasticsearch6.2.2的RestfulAPI常用操作/","content":"<p>文档 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>\n<h1 id=\"1-基本操作\"><a href=\"#1-基本操作\" class=\"headerlink\" title=\"1. 基本操作\"></a>1. 基本操作</h1><h2 id=\"1-1-索引\"><a href=\"#1-1-索引\" class=\"headerlink\" title=\"1.1 索引\"></a>1.1 索引</h2><h3 id=\"1-1-1-查看索引相关信息\"><a href=\"#1-1-1-查看索引相关信息\" class=\"headerlink\" title=\"1.1.1 查看索引相关信息\"></a>1.1.1 查看索引相关信息</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询 索引的 mapping和setting信息  </span><br><span class=\"line\">GET /&#123;index&#125;</span><br><span class=\"line\">// 查询索引order的信息</span><br><span class=\"line\">GET /order</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-2-创建索引\"><a href=\"#1-1-2-创建索引\" class=\"headerlink\" title=\"1.1.2 创建索引\"></a>1.1.2 创建索引</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建索引 </span><br><span class=\"line\">PUT /&#123;index&#125;</span><br><span class=\"line\">// 创建索引order</span><br><span class=\"line\">PUT /order</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;</span><br><span class=\"line\">       .......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-3-删除索引\"><a href=\"#1-1-3-删除索引\" class=\"headerlink\" title=\"1.1.3 删除索引\"></a>1.1.3 删除索引</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除索引 </span><br><span class=\"line\">DELETE /&#123;index&#125;</span><br><span class=\"line\">// 删除索引order</span><br><span class=\"line\">DELETE /order</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-4-修改Mapping\"><a href=\"#1-1-4-修改Mapping\" class=\"headerlink\" title=\"1.1.4 修改Mapping\"></a>1.1.4 修改Mapping</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改mapping</span><br><span class=\"line\">PUT /&#123;index&#125;/&#123;type&#125;/_mapping</span><br><span class=\"line\">// order索引新增字段age</span><br><span class=\"line\">PUT /order/table/_mapping</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;properties&quot;: &#123;</span><br><span class=\"line\">    &quot;age&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-5-设置别名\"><a href=\"#1-1-5-设置别名\" class=\"headerlink\" title=\"1.1.5 设置别名\"></a>1.1.5 设置别名</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 索引order_v4设置别名 order</span><br><span class=\"line\">PUT _aliases</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;actions&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;add&quot;: &#123;</span><br><span class=\"line\">        &quot;index&quot;: &quot;order_v4&quot;,</span><br><span class=\"line\">        &quot;alias&quot;: &quot;order&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-6-查询别名\"><a href=\"#1-1-6-查询别名\" class=\"headerlink\" title=\"1.1.6 查询别名\"></a>1.1.6 查询别名</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询所有索引的别名</span><br><span class=\"line\">GET _alias</span><br><span class=\"line\">// 根据索引名或别名是order的别名信息</span><br><span class=\"line\">GET order/_alias</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-文档\"><a href=\"#1-2-文档\" class=\"headerlink\" title=\"1.2 文档\"></a>1.2 文档</h2><h3 id=\"1-2-1-新增文档\"><a href=\"#1-2-1-新增文档\" class=\"headerlink\" title=\"1.2.1 新增文档\"></a>1.2.1 新增文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 新增</span><br><span class=\"line\">POST /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;:1,</span><br><span class=\"line\">  &quot;name&quot;:&quot;test&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-修改文档\"><a href=\"#1-2-2-修改文档\" class=\"headerlink\" title=\"1.2.2 修改文档\"></a>1.2.2 修改文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改</span><br><span class=\"line\">POST /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;:1,</span><br><span class=\"line\">  &quot;name&quot;:&quot;test2&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-3-局部修改文档\"><a href=\"#1-2-3-局部修改文档\" class=\"headerlink\" title=\"1.2.3 局部修改文档\"></a>1.2.3 局部修改文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将ID为1的文档的name字段改成test2</span><br><span class=\"line\">POST /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;doc&quot;: &#123; &quot;name&quot;:&quot;test2&quot; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-4-删除文档\"><a href=\"#1-2-4-删除文档\" class=\"headerlink\" title=\"1.2.4 删除文档\"></a>1.2.4 删除文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 根据id删除</span><br><span class=\"line\">DELETE /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 删除订单1681323982163296643</span><br><span class=\"line\">DELETE order/table/1681323982163296643</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-5-根据id查找文档\"><a href=\"#1-2-5-根据id查找文档\" class=\"headerlink\" title=\"1.2.5 根据id查找文档\"></a>1.2.5 根据id查找文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 根据id查找</span><br><span class=\"line\">GET /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 查询订单1681323982163296643</span><br><span class=\"line\">GET order/table/1681323982163296643</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-6-查找返回文档一部分\"><a href=\"#1-2-6-查找返回文档一部分\" class=\"headerlink\" title=\"1.2.6 查找返回文档一部分\"></a>1.2.6 查找返回文档一部分</h3> <figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  只返回order的 id和name</span><br><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_source&quot;: [&quot;id&quot;,&quot;name&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 只返回order的 id和name</span><br><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_source&quot;: &#123;</span><br><span class=\"line\">     &quot;includes&quot;: [ &quot;id&quot;, &quot;name&quot; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 不返回order的 name</span><br><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_source&quot;: &#123;</span><br><span class=\"line\">     &quot;excludes&quot;: [&quot;name&quot;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-结构化查询-Query-DSL\"><a href=\"#2-结构化查询-Query-DSL\" class=\"headerlink\" title=\"2. 结构化查询 Query DSL\"></a>2. 结构化查询 Query DSL</h1><h2 id=\"2-1-查询\"><a href=\"#2-1-查询\" class=\"headerlink\" title=\"2.1 查询\"></a>2.1 查询</h2><h3 id=\"2-1-1-term-精确查询\"><a href=\"#2-1-1-term-精确查询\" class=\"headerlink\" title=\"2.1.1 term 精确查询\"></a>2.1.1 term 精确查询</h3><ul>\n<li>term：精确查询， 主要用于精确匹配，比如数字，日期，布尔值或 not_analyzed 的字符串</li>\n<li>trems : 跟 term 有点类似，但 terms 允许指定多个匹配条件</li>\n</ul>\n<figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 根据手机号精确查询</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;term&quot;: &#123;</span><br><span class=\"line\">      &quot;userMobile&quot;: &quot;13126820209&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 查询多个手机号</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;terms&quot;: &#123;</span><br><span class=\"line\">      &quot;userMobile&quot;: [</span><br><span class=\"line\">        &quot;13126820209&quot;,</span><br><span class=\"line\">        &quot;15232181101&quot;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-2-match-模糊查询\"><a href=\"#2-1-2-match-模糊查询\" class=\"headerlink\" title=\"2.1.2 match 模糊查询\"></a>2.1.2 match 模糊查询</h3><ul>\n<li>match 和 term的区别<ul>\n<li>keyword: 在写入时，将整个值插入到倒排索引中，不进行分词。<ul>\n<li>term不会分词。而keyword字段也不分词。需要完全匹配才可。</li>\n<li>match会被分词，而keyword不会被分词，match的需要跟keyword的完全匹配可以。</li>\n</ul>\n</li>\n<li>text: 在写入时，对写入的值进行分词，然后一一插入到倒排索引。<ul>\n<li>因为text字段会分词，而term不分词，所以term查询的条件必须是text字段分词后的某一个。</li>\n<li>match分词，text也分词，只要match的分词结果和text的分词结果有相同的就匹配 </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>multi_match  允许同时搜索多个字段</p>\n<figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 根据手机号查询</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;match&quot;: &#123;</span><br><span class=\"line\">      &quot;userMobile&quot;: &quot;13126820209&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 查询cityName 或 ipCityName 是武汉的订单</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;multi_match&quot;: &#123;</span><br><span class=\"line\">      &quot;query&quot;: &quot;武汉&quot;,</span><br><span class=\"line\">      &quot;fields&quot;: [&quot;cityName&quot;,&quot;ipCityName&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>match_phrase 称为短语搜索，要求所有的分词必须同时出现在文档中，同时位置必须紧邻一致。</p>\n<h3 id=\"2-1-3-range-范围查询\"><a href=\"#2-1-3-range-范围查询\" class=\"headerlink\" title=\"2.1.3 range 范围查询\"></a>2.1.3 range 范围查询</h3></li>\n<li>range允许我们按照指定范围查找一批数据<ul>\n<li>gt :: 大于</li>\n<li>gte :: 大于等于</li>\n<li>lt :: 小于</li>\n<li>lte :: 小于等于</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询 createTime 大于等于 1523111285000  ，小于等于 1523111286000 的订单</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;range&quot;: &#123;</span><br><span class=\"line\">      &quot;createTime&quot;: &#123;</span><br><span class=\"line\">        &quot;gte&quot;: 1523111285000,</span><br><span class=\"line\">        &quot;lte&quot;: 1523111286000</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-4-exists-空值查询\"><a href=\"#2-1-4-exists-空值查询\" class=\"headerlink\" title=\"2.1.4 exists 空值查询\"></a>2.1.4 exists 空值查询</h3><p>exists 用于查找文档中是否包含指定字段 对应sql中的 not null<br><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vendorId1701cityId有值的订单</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;exists&quot;:&#123;</span><br><span class=\"line\">      &quot;field&quot;:&quot;vendorId1701cityId&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// vendorId1701cityId 没有值的订单</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;must_not&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;exists&quot;: &#123;</span><br><span class=\"line\">            &quot;field&quot;:&quot;vendorId1701cityId&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-5-nested-集合查询\"><a href=\"#2-1-5-nested-集合查询\" class=\"headerlink\" title=\"2.1.5 nested 集合查询\"></a>2.1.5 nested 集合查询</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查找 members.vendorName是张云天的订单</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;nested&quot;: &#123;</span><br><span class=\"line\">      &quot;path&quot;: &quot;members&quot;,</span><br><span class=\"line\">      &quot;query&quot;: &#123;</span><br><span class=\"line\">        &quot;match&quot;: &#123;</span><br><span class=\"line\">          &quot;members.vendorName&quot; : &quot;张云天&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 查找 members.vendorName 是张云天 并且 members.createVendorTime 是1651381826000 的订单</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;nested&quot;: &#123;</span><br><span class=\"line\">      &quot;path&quot;: &quot;members&quot;,</span><br><span class=\"line\">      &quot;query&quot;: &#123;</span><br><span class=\"line\">        &quot;bool&quot;: &#123;</span><br><span class=\"line\">          &quot;must&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              &quot;match&quot;: &#123;</span><br><span class=\"line\">                &quot;members.vendorName&quot;: &quot;张云天&quot;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              &quot;match&quot;: &#123;</span><br><span class=\"line\">                &quot;members.createVendorTime&quot;: 1651381826000</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-5-bool-多条件查询\"><a href=\"#2-1-5-bool-多条件查询\" class=\"headerlink\" title=\"2.1.5 bool 多条件查询\"></a>2.1.5 bool 多条件查询</h3><ul>\n<li>must 多个查询条件的完全匹配,相当于 and 。</li>\n<li>must_not 多个查询条件的相反匹配，相当于 not 。</li>\n<li>should 至少有一个查询条件匹配, 相当于 or 。</li>\n<li>filter 过滤 必须匹配，不贡献算分<h2 id=\"2-2-排序\"><a href=\"#2-2-排序\" class=\"headerlink\" title=\"2.2 排序\"></a>2.2 排序</h2><h3 id=\"2-2-1-sort-排序\"><a href=\"#2-2-1-sort-排序\" class=\"headerlink\" title=\"2.2.1 sort 排序\"></a>2.2.1 sort 排序</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 结果集会先用第一排序字段来排序，当用用作第一字段排序的值相同的时候， 然后再用第二字段对第一排序值相同的文档进行排序</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;term&quot;: &#123;</span><br><span class=\"line\">      &quot;cityName&quot;: &quot;北京&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;sort&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;createTime&quot;: &#123;</span><br><span class=\"line\">        &quot;order&quot;: &quot;desc&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;updateTime&quot;: &#123;</span><br><span class=\"line\">        &quot;order&quot;: &quot;desc&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-2-from-size-分页\"><a href=\"#2-2-2-from-size-分页\" class=\"headerlink\" title=\"2.2.2 from size 分页\"></a>2.2.2 from size 分页</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;term&quot;: &#123;</span><br><span class=\"line\">      &quot;cityName&quot;: &quot;北京&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;from&quot;: 0,</span><br><span class=\"line\">  &quot;size&quot;: 20</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-2-3-count-数量\"><a href=\"#2-2-3-count-数量\" class=\"headerlink\" title=\"2.2.3 count 数量\"></a>2.2.3 count 数量</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询数量</span><br><span class=\"line\">GET order/_count</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-聚合-aggs-类似sql的group-by\"><a href=\"#2-3-聚合-aggs-类似sql的group-by\" class=\"headerlink\" title=\"2.3 聚合 aggs 类似sql的group by\"></a>2.3 聚合 aggs 类似sql的group by</h2><h3 id=\"2-3-1-主要概念\"><a href=\"#2-3-1-主要概念\" class=\"headerlink\" title=\"2.3.1 主要概念\"></a>2.3.1 主要概念</h3><ul>\n<li><p>桶（Buckets）：满足特定条件的文档的集合，类似于SQL中的group by。</p>\n<ul>\n<li>Bucket Aggregations常用的有terms、range、filter、地理距离、geo、ip范围、嵌套nested等</li>\n</ul>\n</li>\n<li><p>指标（Metrics）：对桶内的文档进行统计计算，类似于SQL中的count()、sum()、max()等聚合函数。</p>\n<ul>\n<li>Metric Aggregations常用的有min、max、avg、sum、cardinality等</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-2-语法结构\"><a href=\"#2-3-2-语法结构\" class=\"headerlink\" title=\"2.3.2 语法结构\"></a>2.3.2 语法结构</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;aggregations&quot; : &#123;</span><br><span class=\"line\">    &quot;&lt;aggregation_name&gt;&quot; : &#123;</span><br><span class=\"line\">        &quot;&lt;aggregation_type&gt;&quot; : &#123;</span><br><span class=\"line\">            &lt;aggregation_body&gt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [,&quot;aggregations&quot; : &#123; [&lt;sub_aggregation&gt;]+ &#125; ]? // 嵌套聚合查询，支持多层嵌套</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [,&quot;&lt;aggregation_name_2&gt;&quot; : &#123; ... &#125; ]* // 多个聚合查询，每个聚合查询取不同的名字</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>aggregations - 代表聚合查询语句，可以简写为aggs</li>\n<li>&lt;aggregation_name&gt; - 代表一个聚合计算的名字，可以随意命名，因为ES支持一次进行多次统计分析查询，后面需要通过这个名字在查询结果中找到我们想要的计算结果。</li>\n<li>&lt;aggregation_type&gt; - 聚合类型，代表我们想要怎么统计数据，主要有两大类聚合类型，桶聚合和指标聚合，这两类聚合又包括多种聚合类型，例如：指标聚合：sum、avg， 桶聚合：terms、Date histogram等等。</li>\n<li>&lt;aggregation_body&gt; - 聚合类型的参数，选择不同的聚合类型，有不同的参数。</li>\n<li>aggregation_name_2 - 代表其他聚合计算的名字，意思就是可以一次进行多种类型的统计。</li>\n</ul>\n<h3 id=\"2-3-3-例子\"><a href=\"#2-3-3-例子\" class=\"headerlink\" title=\"2.3.3 例子\"></a>2.3.3 例子</h3><h4 id=\"2-3-3-1-terms-按字段聚合\"><a href=\"#2-3-3-1-terms-按字段聚合\" class=\"headerlink\" title=\"2.3.3.1 terms 按字段聚合\"></a>2.3.3.1 terms 按字段聚合</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应sql  select cityName,count(cityName) from table group by cityName</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;aggs&quot;: &#123;</span><br><span class=\"line\">        &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">            &quot;terms&quot;: &#123;                   // 按cityName聚合</span><br><span class=\"line\">                &quot;field&quot;: &quot;cityName&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">// 查询结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">。。。。</span><br><span class=\"line\">  &quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">      &quot;doc_count_error_upper_bound&quot;: 1029,</span><br><span class=\"line\">      &quot;sum_other_doc_count&quot;: 118083,</span><br><span class=\"line\">      &quot;buckets&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;北京&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 320859</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;上海&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 132995</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">       。。。</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-3-2-filter-自定义分组聚合\"><a href=\"#2-3-3-2-filter-自定义分组聚合\" class=\"headerlink\" title=\"2.3.3.2 filter 自定义分组聚合\"></a>2.3.3.2 filter 自定义分组聚合</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 按filter聚合</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;aggs&quot;: &#123;</span><br><span class=\"line\">    &quot;testAggs&quot;: &#123;</span><br><span class=\"line\">      &quot;filters&quot;: &#123;</span><br><span class=\"line\">        &quot;filters&quot;: &#123;</span><br><span class=\"line\">          &quot;北京统计&quot;: &#123;&quot;match&quot;:&#123;&quot;cityName&quot;:&quot;北京&quot;&#125;&#125;,</span><br><span class=\"line\">          &quot;上海统计&quot;: &#123;&quot;match&quot;:&#123;&quot;cityName&quot;:&quot;上海&quot;&#125;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">//查询结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">。。。。</span><br><span class=\"line\">  &quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;testAggs&quot;: &#123;</span><br><span class=\"line\">      &quot;buckets&quot;: &#123;</span><br><span class=\"line\">        &quot;上海&quot;: &#123;</span><br><span class=\"line\">          &quot;doc_count&quot;: 132995</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;北京&quot;: &#123;</span><br><span class=\"line\">          &quot;doc_count&quot;: 320862</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-3-3-range-按范围聚合\"><a href=\"#2-3-3-3-range-按范围聚合\" class=\"headerlink\" title=\"2.3.3.3 range 按范围聚合\"></a>2.3.3.3 range 按范围聚合</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 按范围聚合</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;aggs&quot;: &#123;</span><br><span class=\"line\">    &quot;testRange&quot;:&#123;</span><br><span class=\"line\">      &quot;range&quot;: &#123;</span><br><span class=\"line\">        &quot;field&quot;: &quot;mlPrice&quot;,</span><br><span class=\"line\">        &quot;ranges&quot;: [</span><br><span class=\"line\">          &#123; &quot;to&quot; : 50 &#125;,</span><br><span class=\"line\">          &#123; &quot;from&quot; : 50, &quot;to&quot; : 100 &#125;,</span><br><span class=\"line\">          &#123; &quot;from&quot; : 100 &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">//查询结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">。。。。</span><br><span class=\"line\">  &quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;testRange&quot;: &#123;</span><br><span class=\"line\">      &quot;buckets&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;*-50.0&quot;,</span><br><span class=\"line\">          &quot;to&quot;: 50,</span><br><span class=\"line\">          &quot;doc_count&quot;: 873767</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;50.0-100.0&quot;,</span><br><span class=\"line\">          &quot;from&quot;: 50,</span><br><span class=\"line\">          &quot;to&quot;: 100,</span><br><span class=\"line\">          &quot;doc_count&quot;: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;100.0-*&quot;,</span><br><span class=\"line\">          &quot;from&quot;: 100,</span><br><span class=\"line\">          &quot;doc_count&quot;: 15820</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-3-4-子聚合-求平均值\"><a href=\"#2-3-3-4-子聚合-求平均值\" class=\"headerlink\" title=\"2.3.3.4 子聚合 求平均值\"></a>2.3.3.4 子聚合 求平均值</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应sql  select cityName,count(cityName),avg(mlPrice) from table group by cityName</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;aggs&quot;: &#123;</span><br><span class=\"line\">        &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">            &quot;terms&quot;: &#123;                   // 按cityName聚合</span><br><span class=\"line\">                &quot;field&quot;: &quot;cityName&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;aggs&quot;: &#123;                   // 嵌套聚合</span><br><span class=\"line\">                &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">                    &quot;avg&quot;: &#123;            // 求平均数</span><br><span class=\"line\">                        &quot;field&quot;: &quot;mlPrice&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//查询结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">。。。。</span><br><span class=\"line\">  &quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">      &quot;doc_count_error_upper_bound&quot;: 1029,</span><br><span class=\"line\">      &quot;sum_other_doc_count&quot;: 118086,</span><br><span class=\"line\">      &quot;buckets&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;北京&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 320861,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: 54198.74264556926</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;上海&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 132995,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: 53444.499958645065</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        。。。。</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-3-5-多个filed聚合\"><a href=\"#2-3-3-5-多个filed聚合\" class=\"headerlink\" title=\"2.3.3.5 多个filed聚合\"></a>2.3.3.5 多个filed聚合</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应sql  select cityName,community,count(1),avg(mlPrice) from table group by cityName,community</span><br><span class=\"line\">POST /order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;aggs&quot;: &#123;</span><br><span class=\"line\">        &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">            &quot;terms&quot;: &#123;                 </span><br><span class=\"line\">                &quot;script&quot;: &quot;doc[&#x27;cityName&#x27;].values+&#x27;-&#x27;+doc[&#x27;community&#x27;].values&quot;,</span><br><span class=\"line\">                &quot;size&quot;: 20        //返回条数</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;aggs&quot;: &#123;                  </span><br><span class=\"line\">                &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">                    &quot;avg&quot;: &#123;           </span><br><span class=\"line\">                        &quot;field&quot;: &quot;mlPrice&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">//查询结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">。。。。</span><br><span class=\"line\">  &quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">      &quot;doc_count_error_upper_bound&quot;: 1479,</span><br><span class=\"line\">      &quot;sum_other_doc_count&quot;: 445778,</span><br><span class=\"line\">      &quot;buckets&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[]-[]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 730484,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: -2503.5909282827674</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[北京]-[]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 161802,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: -39.28776529338327</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[北京]-[朝阳区]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 7962,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: -2849.4228836975635</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[上海]-[浦东新区]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 4646,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: 42442.208136031</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        。。。。</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-子索引\"><a href=\"#3-子索引\" class=\"headerlink\" title=\"3. 子索引\"></a>3. 子索引</h1><h2 id=\"3-1-子索引和nested的区别\"><a href=\"#3-1-子索引和nested的区别\" class=\"headerlink\" title=\"3.1 子索引和nested的区别\"></a>3.1 子索引和nested的区别</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>nested</th>\n<th>parent/child</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入、更新</td>\n<td>更新时需要更新整个文档</td>\n<td>父子文档可以独立更新</td>\n</tr>\n<tr>\n<td>查询</td>\n<td>文档存储在一起，读取性能高</td>\n<td>父子文档单独存储，互不影响。但是为了维护join的关系，需要占用额外的内容，读取性能略差。</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>子文档偶尔更新、查询为主</td>\n<td>适用于更新频繁的情况，且子文档的数量远远超过父文档的数量</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-2-父子索引的创建\"><a href=\"#3-2-父子索引的创建\" class=\"headerlink\" title=\"3.2 父子索引的创建\"></a>3.2 父子索引的创建</h2><h3 id=\"3-2-1-创建Mapping\"><a href=\"#3-2-1-创建Mapping\" class=\"headerlink\" title=\"3.2.1 创建Mapping\"></a>3.2.1 创建Mapping</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改mapping，定义父文档 order_v1  定义三个子文档分别是 order_log  order_dg_info  order_zy_info</span><br><span class=\"line\">PUT /&#123;index&#125;/&#123;type&#125;/_mapping</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;properties&quot;: &#123;</span><br><span class=\"line\">     &quot;order_join_relation&quot;: &#123;   // 定义一个字段名称</span><br><span class=\"line\">        &quot;type&quot;: &quot;join&quot;,        // 类型为join</span><br><span class=\"line\">        &quot;relations&quot;: &#123;</span><br><span class=\"line\">          &quot;order_v1&quot;: [        // 父文档值</span><br><span class=\"line\">            &quot;order_log&quot;,        // 子文档值</span><br><span class=\"line\">            &quot;order_dg_info&quot;,</span><br><span class=\"line\">            &quot;order_zy_info&quot;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-插入父文档\"><a href=\"#3-2-2-插入父文档\" class=\"headerlink\" title=\"3.2.2 插入父文档\"></a>3.2.2 插入父文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 两种写法都可以</span><br><span class=\"line\">  </span><br><span class=\"line\">POST /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;:1,</span><br><span class=\"line\">  &quot;name&quot;:&quot;test2&quot;,</span><br><span class=\"line\">  &quot;order_join_relation&quot;:&#123;</span><br><span class=\"line\">    &quot;name&quot; : &quot;order_v1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">POST /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;:1,</span><br><span class=\"line\">  &quot;name&quot;:&quot;test2&quot;,</span><br><span class=\"line\">  &quot;order_join_relation&quot;: &quot;order_v1&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-3-插入子文档\"><a href=\"#3-2-3-插入子文档\" class=\"headerlink\" title=\"3.2.3 插入子文档\"></a>3.2.3 插入子文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /&#123;index&#125;/&#123;type&#125;/&#123;_id&#125;?routing=&#123;parentID&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;:1,</span><br><span class=\"line\">  &quot;name&quot;:&quot;test2&quot;,</span><br><span class=\"line\">  &quot;order_join_relation&quot;:&#123;</span><br><span class=\"line\">    &quot;name&quot; : &quot;order_log&quot;,</span><br><span class=\"line\">    &quot;parent&quot;:&#123;parentID&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-查询\"><a href=\"#3-3-查询\" class=\"headerlink\" title=\"3.3 查询\"></a>3.3 查询</h2><h3 id=\"3-3-1-parent-id-基于父文档ID查询所有子文档\"><a href=\"#3-3-1-parent-id-基于父文档ID查询所有子文档\" class=\"headerlink\" title=\"3.3.1 parent_id 基于父文档ID查询所有子文档\"></a>3.3.1 parent_id 基于父文档ID查询所有子文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;:&#123;</span><br><span class=\"line\">    &quot;parent_id&quot;: &#123;             // 关键字</span><br><span class=\"line\">      &quot;type&quot;:&quot;order_log&quot;,      // 要查询的子文档类型</span><br><span class=\"line\">      &quot;id&quot;:&quot;5&quot;                 // 父文档id</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-has-parent-查询符合条件的父文档的所有子文档\"><a href=\"#3-3-2-has-parent-查询符合条件的父文档的所有子文档\" class=\"headerlink\" title=\"3.3.2 has_parent 查询符合条件的父文档的所有子文档\"></a>3.3.2 has_parent 查询符合条件的父文档的所有子文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;has_parent&quot;: &#123;                 // 关键字</span><br><span class=\"line\">      &quot;parent_type&quot;: &quot;order_v1&quot;,    // 父文档类型</span><br><span class=\"line\">      &quot;query&quot;: &#123;                    // 父文档查询条件</span><br><span class=\"line\">        &quot;match&quot;: &#123;</span><br><span class=\"line\">          &quot;name&quot;: &quot;test2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3-has-child-查询符合条件的子文档的所有父文档\"><a href=\"#3-3-3-has-child-查询符合条件的子文档的所有父文档\" class=\"headerlink\" title=\"3.3.3 has_child 查询符合条件的子文档的所有父文档\"></a>3.3.3 has_child 查询符合条件的子文档的所有父文档</h3><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;has_child&quot;: &#123;      // 关键字</span><br><span class=\"line\">      &quot;type&quot;: &quot;order_log&quot;,      // 子文档类型</span><br><span class=\"line\">      &quot;min_children&quot;: 1,       // 符合条件的子文档必须要1个以上，才返回父文档</span><br><span class=\"line\">      &quot;query&quot;: &#123;               // 子文档查询条件</span><br><span class=\"line\">        &quot;match&quot;: &#123;</span><br><span class=\"line\">          &quot;name&quot;: &quot;test2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-Painless-Scripting\"><a href=\"#4-Painless-Scripting\" class=\"headerlink\" title=\"4. Painless Scripting\"></a>4. Painless Scripting</h1><h2 id=\"4-1-语法\"><a href=\"#4-1-语法\" class=\"headerlink\" title=\"4.1 语法\"></a>4.1 语法</h2><p>官方文档  <a href=\"https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-guide.html\">https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-guide.html</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;script&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lang&quot;</span><span class=\"punctuation\">:</span>   <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;source&quot;</span> | <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;params&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> ... <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>lang: 定义脚本使用的语言, 默认painless</li>\n<li>source, id: 脚本的主体, source后面跟着内联的脚本代码, id后面跟着脚本的id, 具体代码存在于脚本id对应的代码中</li>\n<li>params: 定义一些变量的值, 使用params可以减少脚本的编译次数. 因为如果变量的值硬编码到代码中, 每次进行变量值得更改都会对脚本进行重新编译. 使用params则不会重新编译脚本.</li>\n</ul>\n<h3 id=\"4-1-1-访问某个field\"><a href=\"#4-1-1-访问某个field\" class=\"headerlink\" title=\"4.1.1 访问某个field\"></a>4.1.1 访问某个field</h3><ul>\n<li>update / update_by_query / reindex 场景，使用：ctx._source.XXX；</li>\n<li>search和聚合场景，使用：doc[‘value’]。</li>\n<li>ingest 场景，使用：ctx.XXX；</li>\n<li>其他场景  <a href=\"https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-contexts.html\">https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-contexts.html</a><h2 id=\"4-2-例子\"><a href=\"#4-2-例子\" class=\"headerlink\" title=\"4.2 例子\"></a>4.2 例子</h2><h3 id=\"4-2-1-插入、更新文档\"><a href=\"#4-2-1-插入、更新文档\" class=\"headerlink\" title=\"4.2.1 插入、更新文档\"></a>4.2.1 插入、更新文档</h3><h4 id=\"4-2-1-1-修改文档\"><a href=\"#4-2-1-1-修改文档\" class=\"headerlink\" title=\"4.2.1.1 修改文档\"></a>4.2.1.1 修改文档</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 对应sql   update order set name = concat(name,age) where id = 1</span><br><span class=\"line\">POST order/table/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;script&quot;:&#123;</span><br><span class=\"line\">  &quot;source&quot;:&quot;ctx._source.name+= ctx._source.age&quot;,</span><br><span class=\"line\">  &quot;lang&quot;:&quot;painless&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4-2-1-2-修改文档时自定义参数\"><a href=\"#4-2-1-2-修改文档时自定义参数\" class=\"headerlink\" title=\"4.2.1.2 修改文档时自定义参数\"></a>4.2.1.2 修改文档时自定义参数</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应sql   update order set age = concat(age,&quot;4&quot;) where id = 1</span><br><span class=\"line\">POST order/table/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;script&quot;:&#123;</span><br><span class=\"line\">  &quot;source&quot;:&quot;ctx._source.age+= params.count&quot;,</span><br><span class=\"line\">  &quot;lang&quot;:&quot;painless&quot;,</span><br><span class=\"line\">  &quot;params&quot;:&#123;&quot;count&quot;:4&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-1-3-增加query条件、脚本判断-修改文档\"><a href=\"#4-2-1-3-增加query条件、脚本判断-修改文档\" class=\"headerlink\" title=\"4.2.1.3 增加query条件、脚本判断 修改文档\"></a>4.2.1.3 增加query条件、脚本判断 修改文档</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应sql   update order set age = &#x27;123&#x27; where age = &#x27;34&#x27;</span><br><span class=\"line\">POST order/table/_update_by_query</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;script&quot;:&#123;</span><br><span class=\"line\">        &quot;lang&quot;:&quot;painless&quot;,</span><br><span class=\"line\">        &quot;source&quot;:&quot;ctx._source.age=123&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;query&quot;:&#123;</span><br><span class=\"line\">        &quot;term&quot;:&#123;</span><br><span class=\"line\">            &quot;age&quot;:&quot;34&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 对应sql   update order set age = &#x27;456&#x27; where age = &#x27;123&#x27;</span><br><span class=\"line\">POST order/table/_update_by_query</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;script&quot;:&#123;</span><br><span class=\"line\">        &quot;lang&quot;:&quot;painless&quot;,</span><br><span class=\"line\">        &quot;source&quot;:&quot;if (ctx._source.age == &#x27;123&#x27;) &#123;ctx._source.age = &#x27;456&#x27;&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-1-4-集合增加、删除元素\"><a href=\"#4-2-1-4-集合增加、删除元素\" class=\"headerlink\" title=\"4.2.1.4 集合增加、删除元素\"></a>4.2.1.4 集合增加、删除元素</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 增加tags的元素</span><br><span class=\"line\">// 注意：tags元素需要已经存在，并且类型是array。否则会异常</span><br><span class=\"line\">POST order/table/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;script&quot;: &#123;</span><br><span class=\"line\">    &quot;source&quot;: &quot;ctx._source.tags.add(params.tag)&quot;,</span><br><span class=\"line\">    &quot;lang&quot;: &quot;painless&quot;,</span><br><span class=\"line\">    &quot;params&quot;: &#123;</span><br><span class=\"line\">      &quot;tag&quot;: &quot;blue&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">// 删除tags的元素</span><br><span class=\"line\">POST order/table/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;script&quot;: &#123;</span><br><span class=\"line\">    &quot;source&quot;: &quot;if (ctx._source.tags.contains(params.tag)) &#123; ctx._source.tags.remove(ctx._source.tags.indexOf(params.tag)) &#125;&quot;,</span><br><span class=\"line\">    &quot;lang&quot;: &quot;painless&quot;,</span><br><span class=\"line\">    &quot;params&quot;: &#123;</span><br><span class=\"line\">      &quot;tag&quot;: &quot;blue&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-1-5-nested-增加、删除、修改\"><a href=\"#4-2-1-5-nested-增加、删除、修改\" class=\"headerlink\" title=\"4.2.1.5 nested 增加、删除、修改\"></a>4.2.1.5 nested 增加、删除、修改</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 样例数据</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;detail&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;美团&quot;,</span><br><span class=\"line\">            &quot;nid&quot;: 1200</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;id&quot;: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 增加</span><br><span class=\"line\">POST /order/table/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;script&quot;: &#123;</span><br><span class=\"line\">        &quot;lang&quot;: &quot;painless&quot;,</span><br><span class=\"line\">        &quot;source&quot;: &quot;ctx._source.detail.add(params.data);&quot;,</span><br><span class=\"line\">        &quot;params&quot;: &#123;</span><br><span class=\"line\">            &quot;data&quot;: &#123;</span><br><span class=\"line\">                &quot;name&quot;: &quot;百度&quot;,</span><br><span class=\"line\">                &quot;nid&quot;: 1300</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">// 修改</span><br><span class=\"line\">POST /order/table/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;script&quot;: &#123;</span><br><span class=\"line\">        &quot;lang&quot;: &quot;painless&quot;,</span><br><span class=\"line\">        &quot;source&quot;: &quot;for(e in ctx._source.detail)&#123;if (e.name == params.name) &#123;e.nid = params.nid;&#125;&#125;&quot;,</span><br><span class=\"line\">        &quot;params&quot;: &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;百度&quot;,</span><br><span class=\"line\">            &quot;nid&quot;: 1500</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 删除</span><br><span class=\"line\">POST /order/table/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;script&quot;: &#123;</span><br><span class=\"line\">        &quot;lang&quot;: &quot;painless&quot;,</span><br><span class=\"line\">        &quot;source&quot;: &quot;ctx._source.detail.removeIf(it -&gt; it.nid ==params.nid);if(ctx._source.detail.length == 0)&#123;ctx.op=&#x27;delete&#x27;&#125;&quot;,</span><br><span class=\"line\">        &quot;params&quot;:&#123;</span><br><span class=\"line\">            &quot;nid&quot;: 1200</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-2查询文档\"><a href=\"#4-2-2查询文档\" class=\"headerlink\" title=\"4.2.2查询文档\"></a>4.2.2查询文档</h3><h4 id=\"4-2-2-1-使用脚本增加筛选条件\"><a href=\"#4-2-2-1-使用脚本增加筛选条件\" class=\"headerlink\" title=\"4.2.2.1 使用脚本增加筛选条件\"></a>4.2.2.1 使用脚本增加筛选条件</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询userMobile是135开头的订单</span><br><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;filter&quot;: &#123;</span><br><span class=\"line\">        &quot;script&quot;: &#123;</span><br><span class=\"line\">          &quot;script&quot;: &#123;</span><br><span class=\"line\">            &quot;source&quot;:&quot;doc[&#x27;userMobile&#x27;] != null &amp;&amp; doc[&#x27;userMobile&#x27;].value!= null &amp;&amp; doc[&#x27;userMobile&#x27;].value.startsWith(&#x27;135&#x27;)&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-2-2-使用脚本自定义返回字段\"><a href=\"#4-2-2-2-使用脚本自定义返回字段\" class=\"headerlink\" title=\"4.2.2.2 使用脚本自定义返回字段\"></a>4.2.2.2 使用脚本自定义返回字段</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义字段</span><br><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;script_fields&quot;: &#123;</span><br><span class=\"line\">    &quot;shortOrderId-test&quot;: &#123;</span><br><span class=\"line\">      &quot;script&quot;: &#123;</span><br><span class=\"line\">        &quot;lang&quot;:&quot;painless&quot;,</span><br><span class=\"line\">        &quot;source&quot;:&quot;doc[&#x27;shortOrderId&#x27;].value * params.num&quot;,</span><br><span class=\"line\">        &quot;params&quot;: &#123;</span><br><span class=\"line\">          &quot;num&quot;:100</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-2-3-使用脚本排序\"><a href=\"#4-2-2-3-使用脚本排序\" class=\"headerlink\" title=\"4.2.2.3 使用脚本排序\"></a>4.2.2.3 使用脚本排序</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询userMobile是135开头的订单</span><br><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;sort&quot;: &#123;</span><br><span class=\"line\">    &quot;_script&quot;:&#123;</span><br><span class=\"line\">      &quot;type&quot;:&quot;number&quot;,</span><br><span class=\"line\">      &quot;order&quot;:&quot;desc&quot;,</span><br><span class=\"line\">      &quot;script&quot;:&#123;</span><br><span class=\"line\">        &quot;lang&quot;:&quot;painless&quot;,</span><br><span class=\"line\">        &quot;source&quot;:&quot;doc[&#x27;sgSrAllPrice&#x27;].value + doc[&#x27;onlyDgFormMlPrice&#x27;].value&quot;</span><br><span class=\"line\">      &#125;         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-2-4-使用脚本聚合\"><a href=\"#4-2-2-4-使用脚本聚合\" class=\"headerlink\" title=\"4.2.2.4 使用脚本聚合\"></a>4.2.2.4 使用脚本聚合</h4><figure class=\"highlight http\"><figcaption><span>request</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应sql  select cityName,community,count(1),avg(mlPrice) from table group by cityName,community</span><br><span class=\"line\"> </span><br><span class=\"line\">POST order/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;aggs&quot;: &#123;</span><br><span class=\"line\">        &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">            &quot;terms&quot;: &#123;                </span><br><span class=\"line\">                &quot;script&quot;: &quot;doc[&#x27;cityName&#x27;].values+&#x27;-&#x27;+doc[&#x27;community&#x27;].values&quot;,</span><br><span class=\"line\">                &quot;size&quot;: 20        //返回条数</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;aggs&quot;: &#123;                 </span><br><span class=\"line\">                &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">                    &quot;avg&quot;: &#123;          </span><br><span class=\"line\">                        &quot;field&quot;: &quot;mlPrice&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">//查询结果</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">。。。。</span><br><span class=\"line\">  &quot;aggregations&quot;: &#123;</span><br><span class=\"line\">    &quot;cityGroup&quot;: &#123;</span><br><span class=\"line\">      &quot;doc_count_error_upper_bound&quot;: 1479,</span><br><span class=\"line\">      &quot;sum_other_doc_count&quot;: 445778,</span><br><span class=\"line\">      &quot;buckets&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[]-[]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 730484,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: -2503.5909282827674</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[北京]-[]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 161802,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: -39.28776529338327</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[北京]-[朝阳区]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 7962,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: -2849.4228836975635</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;key&quot;: &quot;[上海]-[浦东新区]&quot;,</span><br><span class=\"line\">          &quot;doc_count&quot;: 4646,</span><br><span class=\"line\">          &quot;avg_score&quot;: &#123;</span><br><span class=\"line\">            &quot;value&quot;: 42442.208136031</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        。。。。</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-Ingest-pipelines\"><a href=\"#5-Ingest-pipelines\" class=\"headerlink\" title=\"5. Ingest pipelines\"></a>5. Ingest pipelines</h1><p>文档 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html\">https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html</a></p>\n","categories":[],"tags":[]},{"title":"理解Fork-Join","url":"https://zhangyaxiao.github.io/2019/07/18/理解Fork-Join/","content":"","categories":[],"tags":[]},{"title":"Java 8 中的 Streams API 详解","url":"https://zhangyaxiao.github.io/2019/07/16/Java 8 中的 Streams API 详解/","content":"<p>原文 <a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html\">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html</a></p>\n<h1 id=\"1-为什么需要-Stream\"><a href=\"#1-为什么需要-Stream\" class=\"headerlink\" title=\"1. 为什么需要 Stream\"></a>1. 为什么需要 Stream</h1><p>Stream 作为 Java 8 的一大亮点，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。它也不同于 StAX 对 XML 解析的 Stream，也不是 Amazon Kinesis 对大数据实时处理的 Stream。Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。</p>\n<h1 id=\"2-什么是聚合操作\"><a href=\"#2-什么是聚合操作\" class=\"headerlink\" title=\"2. 什么是聚合操作\"></a>2. 什么是聚合操作</h1><p>在传统的 J2EE 应用中，Java 代码经常不得不依赖于关系型数据库的聚合操作来完成诸如：</p>\n<ul>\n<li>客户每月平均消费金额</li>\n<li>最昂贵的在售商品</li>\n<li>本周完成的有效订单（排除了无效的）</li>\n<li>取十个数据样本作为首页推荐  </li>\n</ul>\n<p>这类的操作。  </p>\n<p>但在当今这个数据大爆炸的时代，在数据来源多样化、数据海量化的今天，很多时候不得不脱离 RDBMS，或者以底层返回的数据为基础进行更上层的数据统计。而 Java 的集合 API 中，仅仅有极少量的辅助型方法，更多的时候是程序员需要用 Iterator 来遍历集合，完成相关的聚合应用逻辑。这是一种远不够高效、笨拙的方法。在 Java 7 中，如果要发现 type 为 grocery 的所有交易，然后返回以交易值降序排序好的交易 ID 集合，我们需要这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 1. Java 7 的排序、取值实现</span></span><br><span class=\"line\">List&lt;Transaction&gt; groceryTransactions = <span class=\"keyword\">new</span> <span class=\"title class_\">Arraylist</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Transaction t: transactions)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t.getType() == Transaction.GROCERY)&#123;</span><br><span class=\"line\">    groceryTransactions.add(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Collections.sort(groceryTransactions, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Transaction t1, Transaction t2)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t2.getValue().compareTo(t1.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">List&lt;Integer&gt; transactionIds = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Transaction t: groceryTransactions)&#123;</span><br><span class=\"line\">    transactionsIds.add(t.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在 Java 8 使用 Stream，代码更加简洁易读；而且使用并发模式，程序执行速度更快。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 2. Java 8 的排序、取值实现</span></span><br><span class=\"line\">List&lt;Integer&gt; transactionsIds = transactions.parallelStream().</span><br><span class=\"line\">    filter(t -&gt; t.getType() == Transaction.GROCERY).</span><br><span class=\"line\">    sorted(comparing(Transaction::getValue).reversed()).</span><br><span class=\"line\">    map(Transaction::getId).</span><br><span class=\"line\">    collect(toList());</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-Stream-总览\"><a href=\"#3-Stream-总览\" class=\"headerlink\" title=\"3. Stream 总览\"></a>3. Stream 总览</h1><h2 id=\"3-1-什么是流\"><a href=\"#3-1-什么是流\" class=\"headerlink\" title=\"3.1 什么是流\"></a>3.1 什么是流</h2><p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p>\n<p>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p>\n<p>而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：</p>\n<ul>\n<li>1.0-1.4 中的 java.lang.Thread</li>\n<li>5.0 中的 java.util.concurrent</li>\n<li>6.0 中的 Phasers 等</li>\n<li>7.0 中的 Fork/Join 框架</li>\n<li>8.0 中的 Lambda</li>\n</ul>\n<p>Stream 的另外一大特点是，数据源本身可以是无限的。</p>\n<h2 id=\"3-2-流的构成\"><a href=\"#3-2-流的构成\" class=\"headerlink\" title=\"3.2 流的构成\"></a>3.2 流的构成</h2><p>当我们使用一个流的时候，通常包括三个基本步骤：<br>获取一个数据源（source）→ 数据转换→执行操作获取想要的结果，每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道，如下图所示。</p>\n<p><img src=\"/2019/07/16/Java%208%20%E4%B8%AD%E7%9A%84%20Streams%20API%20%E8%AF%A6%E8%A7%A3/streams1.png\" alt=\"streams1\"></p>\n<p>有多种方式生成 Stream Source：</p>\n<ul>\n<li>从 Collection 和数组<ul>\n<li>Collection.stream()</li>\n<li>Collection.parallelStream()</li>\n<li>Arrays.stream(T array) or Stream.of()</li>\n</ul>\n</li>\n<li>从 BufferedReader<ul>\n<li>java.io.BufferedReader.lines()</li>\n</ul>\n</li>\n<li>静态工厂<ul>\n<li>java.util.stream.IntStream.range()</li>\n<li>java.nio.file.Files.walk()</li>\n</ul>\n</li>\n<li>自己构建<ul>\n<li>java.util.Spliterator</li>\n</ul>\n</li>\n<li>其它<ul>\n<li>Random.ints()</li>\n<li>BitSet.stream()</li>\n<li>Pattern.splitAsStream(java.lang.CharSequence)</li>\n<li>JarFile.stream()</li>\n</ul>\n</li>\n</ul>\n<p>流的操作类型分为两种：</p>\n<p><strong>Intermediate：</strong>一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</p>\n<p><strong>Terminal：</strong>一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</p>\n<p>在对于一个 Stream 进行多次转换操作 (Intermediate 操作)，每次都对 Stream 的每个元素进行转换，而且是执行多次，这样时间复杂度就是 N（转换次数）个 for 循环里把所有操作都做掉的总和吗？其实不是这样的，转换操作都是 lazy 的，多个转换操作只会在 Terminal 操作的时候融合起来，一次循环完成。我们可以这样简单的理解，Stream 里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，在 Terminal 操作的时候循环 Stream 对应的集合，然后对每个元素执行所有的函数。</p>\n<p>还有一种操作被称为 <strong>short-circuiting</strong>。用以指：</p>\n<ul>\n<li>对于一个 intermediate 操作，如果它接受的是一个无限大（infinite/unbounded）的 Stream，但返回一个有限的新 Stream。</li>\n<li>对于一个 terminal 操作，如果它接受的是一个无限大的 Stream，但能在有限的时间计算出结果。</li>\n</ul>\n<p>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 3. 一个流操作的示例</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> widgets.stream()</span><br><span class=\"line\">    .filter(w -&gt; w.getColor() == RED)</span><br><span class=\"line\">    .mapToInt(w -&gt; w.getWeight())</span><br><span class=\"line\">    .sum();</span><br></pre></td></tr></table></figure>\n<p>stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 sum() 为 terminal 操作，对符合条件的全部小物件作重量求和。</p>\n<h1 id=\"4-流的使用详解\"><a href=\"#4-流的使用详解\" class=\"headerlink\" title=\"4. 流的使用详解\"></a>4. 流的使用详解</h1><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。</p>\n<h2 id=\"4-1-流的构造与转换\"><a href=\"#4-1-流的构造与转换\" class=\"headerlink\" title=\"4.1 流的构造与转换\"></a>4.1 流的构造与转换</h2><p>下面提供最常见的几种构造 Stream 的样例。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 4. 构造流的几种常见方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. Individual values</span></span><br><span class=\"line\"><span class=\"type\">Stream</span> <span class=\"variable\">stream</span> <span class=\"operator\">=</span> Stream.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. Arrays</span></span><br><span class=\"line\">String [] strArray = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123;<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>&#125;;</span><br><span class=\"line\">stream = Stream.of(strArray);</span><br><span class=\"line\">stream = Arrays.stream(strArray);</span><br><span class=\"line\"><span class=\"comment\">// 3. Collections</span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class=\"line\">stream = list.stream();</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，对于基本数值型，目前有三种对应的包装类型 Stream：</p>\n<p>IntStream、LongStream、DoubleStream。当然我们也可以用 Stream<Integer>、Stream<Long> &gt;、Stream<Double>，但是 boxing 和 unboxing 会很耗时，所以特别为这三种基本数值型提供了对应的 Stream。</Double></Long></Integer></p>\n<p>Java 8 中还没有提供其它数值型 Stream，因为这将导致扩增的内容较多。而常规的数值型聚合运算可以通过上面三种 Stream 进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 5. 数值流的构造</span></span><br><span class=\"line\">IntStream.of(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;).forEach(System.out::println);</span><br><span class=\"line\">IntStream.range(<span class=\"number\">1</span>, <span class=\"number\">3</span>).forEach(System.out::println);</span><br><span class=\"line\">IntStream.rangeClosed(<span class=\"number\">1</span>, <span class=\"number\">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 6. 流转换为其它数据结构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. Array</span></span><br><span class=\"line\">String[] strArray1 = stream.toArray(String[]::<span class=\"keyword\">new</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2. Collection</span></span><br><span class=\"line\">List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class=\"line\">List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::<span class=\"keyword\">new</span>));</span><br><span class=\"line\"><span class=\"type\">Set</span> <span class=\"variable\">set1</span> <span class=\"operator\">=</span> stream.collect(Collectors.toSet());</span><br><span class=\"line\"><span class=\"type\">Stack</span> <span class=\"variable\">stack1</span> <span class=\"operator\">=</span> stream.collect(Collectors.toCollection(Stack::<span class=\"keyword\">new</span>));</span><br><span class=\"line\"><span class=\"comment\">// 3. String</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></table></figure>\n<p>一个 Stream 只可以使用一次，上面的代码为了简洁而重复使用了数次。</p>\n<p>流可以顺序执行，也可以在parallel中执行。 此执行模式是流的属性。 流被创建为具有顺序或并行执行的初始选择。 （例如， Collection.stream()创建一个顺序流，并且Collection.parallelStream()创建一个并行的）。执行模式的选择可以由BaseStream.sequential()或BaseStream.parallel()方法修改，并且可以使用BaseStream.isParallel()方法进行查询。</p>\n<p><strong>使用parallelStream时需要注意是否适合并发处理</strong></p>\n<ol>\n<li>使用parallelStream可以简洁高效的写出并发代码。  </li>\n<li><strong>parallelStream并行执行是无序的。</strong>  </li>\n<li><strong>parallelStream提供了更简单的并发执行的实现，但并不意味着更高的性能，它是使用要根据具体的应用场景。如果cpu资源紧张parallelStream不会带来性能提升；如果存在频繁的线程切换反而会降低性能。</strong>  </li>\n<li><strong>任务之间最好是状态无关的，因为parallelStream默认是非线程安全的，可能带来结果的不确定性。</strong>   </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*****因为并发导致元素丢失********************************/</span></span><br><span class=\"line\">Integer[] intArray = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">List&lt;Integer&gt; listOfIntegers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(intArray));</span><br><span class=\"line\">List&lt;Integer&gt; parallelStorage = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">listOfIntegers</span><br><span class=\"line\">        .parallelStream()</span><br><span class=\"line\">        .map(e -&gt; &#123;</span><br><span class=\"line\">            parallelStorage.add(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .forEachOrdered(e -&gt; System.out.print(e + <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\">parallelStorage</span><br><span class=\"line\">        .stream()</span><br><span class=\"line\">        .forEachOrdered(e -&gt; System.out.print(e + <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">7</span> <span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">2</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*****加锁后元素不再丢失********************************/</span></span><br><span class=\"line\">Integer[] intArray = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">List&lt;Integer&gt; listOfIntegers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(intArray));</span><br><span class=\"line\">List&lt;Integer&gt; parallelStorage = Collections.synchronizedList(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\">listOfIntegers</span><br><span class=\"line\">        .parallelStream()</span><br><span class=\"line\">        .map(e -&gt; &#123;</span><br><span class=\"line\">            parallelStorage.add(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .forEachOrdered(e -&gt; System.out.print(e + <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\">parallelStorage</span><br><span class=\"line\">        .stream()</span><br><span class=\"line\">        .forEachOrdered(e -&gt; System.out.print(e + <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span> <span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">4</span> <span class=\"number\">3</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-流的操作和API\"><a href=\"#4-2-流的操作和API\" class=\"headerlink\" title=\"4.2 流的操作和API\"></a>4.2 流的操作和API</h2><p>接下来，当把一个数据结构包装成 Stream 后，就要开始对里面的元素进行各类操作了。常见的操作可以归类如下。</p>\n<ul>\n<li>Intermediate：<ul>\n<li>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</li>\n</ul>\n</li>\n<li>Terminal：<ul>\n<li>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</li>\n</ul>\n</li>\n<li>Short-circuiting：<ul>\n<li>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>返回</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>allMatch(Predicate&lt;? super T&gt; predicate)</td>\n<td>返回此流的所有元素是否与提供的谓词匹配。</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>anyMatch(Predicate&lt;? super T&gt; predicate)</td>\n<td>返回此流的任何元素是否与提供的谓词匹配。</td>\n</tr>\n<tr>\n<td>static <T> Stream.Builder<T></T></T></td>\n<td>builder()</td>\n<td>返回一个 Stream的构建器。</td>\n</tr>\n<tr>\n<td>&lt;R,A&gt; R</td>\n<td>collect(Collector&lt;? super T,A,R&gt; collector)</td>\n<td>使用 Collector对此流的元素执行 mutable reduction Collector 。</td>\n</tr>\n<tr>\n<td><R> R</R></td>\n<td>collect(Supplier<R> supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</R></td>\n<td>对此流的元素执行 mutable reduction操作。</td>\n</tr>\n<tr>\n<td>static <T> Stream<T></T></T></td>\n<td>concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</td>\n<td>创建一个懒惰连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素。</td>\n</tr>\n<tr>\n<td>long</td>\n<td>count()</td>\n<td>返回此流中的元素数。</td>\n</tr>\n<tr>\n<td>Stream<T></T></td>\n<td>distinct()</td>\n<td>返回由该流的不同元素（根据 Object.equals(Object) ）组成的流。</td>\n</tr>\n<tr>\n<td>static <T> Stream<T></T></T></td>\n<td>empty()</td>\n<td>返回一个空的顺序 Stream 。</td>\n</tr>\n<tr>\n<td>Stream<T></T></td>\n<td>filter(Predicate&lt;? super T&gt; predicate)</td>\n<td>返回由与此给定谓词匹配的此流的元素组成的流。</td>\n</tr>\n<tr>\n<td>Optional<T></T></td>\n<td>findAny()</td>\n<td>返回描述流的一些元素的Optional如果流为空，则返回一个空的Optional 。</td>\n</tr>\n<tr>\n<td>Optional<T></T></td>\n<td>findFirst()</td>\n<td>返回描述此流的第一个元素的Optional如果流为空，则返回一个空的Optional 。</td>\n</tr>\n<tr>\n<td><R> Stream<R></R></R></td>\n<td>flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td>\n<td>返回由通过将提供的映射函数应用于每个元素而产生的映射流的内容来替换该流的每个元素的结果的流。</td>\n</tr>\n<tr>\n<td>DoubleStream</td>\n<td>flatMapToDouble(Function&lt;? super T,? extends DoubleStream&gt; mapper)</td>\n<td>返回一个 DoubleStream ，其中包含将该流的每个元素替换为通过将提供的映射函数应用于每个元素而产生的映射流的内容的结果。</td>\n</tr>\n<tr>\n<td>IntStream</td>\n<td>flatMapToInt(Function&lt;? super T,? extends IntStream&gt; mapper)</td>\n<td>返回一个 IntStream ，其中包含将该流的每个元素替换为通过将提供的映射函数应用于每个元素而产生的映射流的内容的结果。</td>\n</tr>\n<tr>\n<td>LongStream</td>\n<td>flatMapToLong(Function&lt;? super T,? extends LongStream&gt; mapper)</td>\n<td>返回一个 LongStream ，其中包含将该流的每个元素替换为通过将提供的映射函数应用于每个元素而产生的映射流的内容的结果。</td>\n</tr>\n<tr>\n<td>void</td>\n<td>forEach(Consumer&lt;? super T&gt; action)</td>\n<td>对此流的每个元素执行操作。</td>\n</tr>\n<tr>\n<td>void</td>\n<td>forEachOrdered(Consumer&lt;? super T&gt; action)</td>\n<td>如果流具有定义的遇到顺序，则以流的遇到顺序对该流的每个元素执行操作。</td>\n</tr>\n<tr>\n<td>static <T> Stream<T></T></T></td>\n<td>generate(Supplier<T> s)</T></td>\n<td>返回无限顺序无序流，其中每个元素由提供的 Supplier 。</td>\n</tr>\n<tr>\n<td>static <T> Stream<T></T></T></td>\n<td>iterate(T seed, UnaryOperator<T> f)</T></td>\n<td>返回有序无限连续Stream由函数的迭代应用产生f至初始元素seed ，产生Stream包括seed ， f(seed) ， f(f(seed)) ，等第一元件（位置0在） Stream将是提供seed 。 对于n &gt; 0 ，位置n的元素将是将函数f应用于位置n - 1的元素的n - 1 。</td>\n</tr>\n<tr>\n<td>Stream<T></T></td>\n<td>limit(long maxSize)</td>\n<td>返回由此流的元素组成的流，截短长度不能超过 maxSize 。</td>\n</tr>\n<tr>\n<td><R> Stream<R></R></R></td>\n<td>map(Function&lt;? super T,? extends R&gt; mapper)</td>\n<td>返回由给定函数应用于此流的元素的结果组成的流。</td>\n</tr>\n<tr>\n<td>DoubleStream</td>\n<td>mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</td>\n<td>返回一个 DoubleStream ，其中包含将给定函数应用于此流的元素的结果。</td>\n</tr>\n<tr>\n<td>IntStream</td>\n<td>mapToInt(ToIntFunction&lt;? super T&gt; mapper)</td>\n<td>返回一个 IntStream ，其中包含将给定函数应用于此流的元素的结果。</td>\n</tr>\n<tr>\n<td>LongStream</td>\n<td>mapToLong(ToLongFunction&lt;? super T&gt; mapper)</td>\n<td>返回一个 LongStream ，其中包含将给定函数应用于此流的元素的结果。</td>\n</tr>\n<tr>\n<td>Optional<T></T></td>\n<td>max(Comparator&lt;? super T&gt; comparator)</td>\n<td>根据提供的 Comparator返回此流的最大元素。</td>\n</tr>\n<tr>\n<td>Optional<T></T></td>\n<td>min(Comparator&lt;? super T&gt; comparator)</td>\n<td>根据提供的 Comparator返回此流的最小元素。</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>noneMatch(Predicate&lt;? super T&gt; predicate)</td>\n<td>返回此流的元素是否与提供的谓词匹配。</td>\n</tr>\n<tr>\n<td>static <T> Stream<T></T></T></td>\n<td>of(T… values)</td>\n<td>返回其元素是指定值的顺序排序流。</td>\n</tr>\n<tr>\n<td>static <T> Stream<T></T></T></td>\n<td>of(T t)</td>\n<td>返回包含单个元素的顺序 Stream 。</td>\n</tr>\n<tr>\n<td>Stream<T></T></td>\n<td>peek(Consumer&lt;? super T&gt; action)</td>\n<td>返回由该流的元素组成的流，另外在从生成的流中消耗元素时对每个元素执行提供的操作。</td>\n</tr>\n<tr>\n<td>Optional<T></T></td>\n<td>reduce(BinaryOperator<T> accumulator)</T></td>\n<td>使用 associative累积函数对此流的元素执行 reduction ，并返回描述减小值的 Optional （如果有）。</td>\n</tr>\n<tr>\n<td>T</td>\n<td>reduce(T identity, BinaryOperator<T> accumulator)</T></td>\n<td>使用提供的身份值和 associative累积功能对此流的元素执行 reduction ，并返回减小的值。</td>\n</tr>\n<tr>\n<td><U> U</U></td>\n<td>reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator<U> combiner)</U></td>\n<td>执行 reduction在此流中的元素，使用所提供的身份，积累和组合功能。</td>\n</tr>\n<tr>\n<td>Stream<T></T></td>\n<td>skip(long n)</td>\n<td>在丢弃流的第一个 n元素后，返回由该流的 n元素组成的流。</td>\n</tr>\n<tr>\n<td>Stream<T></T></td>\n<td>sorted()</td>\n<td>返回由此流的元素组成的流，根据自然顺序排序。</td>\n</tr>\n<tr>\n<td>Stream<T></T></td>\n<td>sorted(Comparator&lt;? super T&gt; comparator)</td>\n<td>返回由该流的元素组成的流，根据提供的 Comparator进行排序。</td>\n</tr>\n<tr>\n<td>Object[]</td>\n<td>toArray()</td>\n<td>返回一个包含此流的元素的数组。</td>\n</tr>\n<tr>\n<td><A> A[]</A></td>\n<td>toArray(IntFunction&lt;A[]&gt; generator)</td>\n<td>使用提供的 generator函数返回一个包含此流的元素的数组，以分配返回的数组，以及分区执行或调整大小可能需要的任何其他数组。</td>\n</tr>\n</tbody>\n</table>\n<p>实现BaseStream的方法</p>\n<table>\n<thead>\n<tr>\n<th>返回</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void</td>\n<td>close()</td>\n<td>关闭此流，导致此流管道的所有关闭处理程序被调用。</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>isParallel()</td>\n<td>返回此流是否要执行终端操作，将并行执行。</td>\n</tr>\n<tr>\n<td>Iterator<T></T></td>\n<td>iterator()</td>\n<td>返回此流的元素的迭代器。</td>\n</tr>\n<tr>\n<td>S</td>\n<td>onClose(Runnable closeHandler)</td>\n<td>返回带有附加关闭处理程序的等效流。</td>\n</tr>\n<tr>\n<td>S</td>\n<td>parallel()</td>\n<td>返回平行的等效流。</td>\n</tr>\n<tr>\n<td>S</td>\n<td>sequential()</td>\n<td>返回顺序的等效流。</td>\n</tr>\n<tr>\n<td>Spliterator<T></T></td>\n<td>spliterator()</td>\n<td>返回此流的元素的拼接器。</td>\n</tr>\n<tr>\n<td>S</td>\n<td>unordered()</td>\n<td>返回等效的流，即 unordered 。</td>\n</tr>\n</tbody>\n</table>\n<p>我们下面看一下 Stream 的比较典型用法。</p>\n<h3 id=\"4-2-1-map-flatMap\"><a href=\"#4-2-1-map-flatMap\" class=\"headerlink\" title=\"4.2.1 map/flatMap\"></a><strong>4.2.1 map/flatMap</strong></h3><p>我们先来看 map。如果你熟悉 scala 这类函数式语言，对这个方法应该很了解，它的作用就是把 input Stream 的每一个元素，映射成 output Stream 的另外一个元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这清单 7. 转换大写</span></span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; output = wordList.stream().</span><br><span class=\"line\">    map(String::toUpperCase).</span><br><span class=\"line\">    collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 8. 平方数  这段代码生成一个整数 list 的平方数 &#123;1, 4, 9, 16&#125;。</span></span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;Integer&gt; nums = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">List&lt;Integer&gt; squareNums = nums.stream().</span><br><span class=\"line\">    map(n -&gt; n * n).</span><br><span class=\"line\">    collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>从上面例子可以看出，map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。还有一些场景，是一对多映射关系的，这时需要 flatMap。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 9. 一对多</span></span><br><span class=\"line\"></span><br><span class=\"line\">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class=\"line\">    Arrays.asList(<span class=\"number\">1</span>),</span><br><span class=\"line\">    Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">    Arrays.asList(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">Stream&lt;Integer&gt; outputStream = inputStream.</span><br><span class=\"line\">    flatMap((childList) -&gt; childList.stream());</span><br></pre></td></tr></table></figure>\n<p>flatMap 把 input Stream 中的层级结构扁平化，就是将最底层元素抽出来放到一起，最终 output 的新 Stream 里面已经没有 List 了，都是直接的数字。</p>\n<h3 id=\"4-2-2-filter\"><a href=\"#4-2-2-filter\" class=\"headerlink\" title=\"4.2.2 filter\"></a><strong>4.2.2 filter</strong></h3><p>filter 对原始 Stream 进行某项测试，通过测试的元素被留下来生成一个新 Stream。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 10. 留下偶数</span></span><br><span class=\"line\"><span class=\"comment\">// 经过条件“被 2 整除”的 filter，剩下的数字为 &#123;2, 4, 6&#125;。</span></span><br><span class=\"line\">Integer[] sixNums = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">Integer[] evens = Stream.of(sixNums).filter(n -&gt; n%<span class=\"number\">2</span> == <span class=\"number\">0</span>).toArray(Integer[]::<span class=\"keyword\">new</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 11. 把单词挑出来</span></span><br><span class=\"line\"><span class=\"comment\">//这段代码首先把每行的单词用 flatMap 整理到新的 Stream，然后保留长度不为 0 的，就是整篇文章中的全部单词了。</span></span><br><span class=\"line\">List&lt;String&gt; output = reader.lines().</span><br><span class=\"line\">    flatMap(line -&gt; Stream.of(line.split(REGEXP))).</span><br><span class=\"line\">    filter(word -&gt; word.length() &gt; <span class=\"number\">0</span>).</span><br><span class=\"line\">    collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-3-forEach\"><a href=\"#4-2-3-forEach\" class=\"headerlink\" title=\"4.2.3 forEach\"></a><strong>4.2.3 forEach</strong></h3><p>forEach 方法接收一个 Lambda 表达式，然后在 Stream 的每一个元素上执行该表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 12. 打印姓名（forEach 和 pre-java8 的对比）</span></span><br><span class=\"line\"><span class=\"comment\">// Java 8</span></span><br><span class=\"line\">roster.stream()</span><br><span class=\"line\">        .filter(p -&gt; p.getGender() == Person.Sex.MALE)</span><br><span class=\"line\">        .forEach(p -&gt; System.out.println(p.getName()));</span><br><span class=\"line\"><span class=\"comment\">// Pre-Java 8</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Person p : roster) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.getGender() == Person.Sex.MALE) &#123;</span><br><span class=\"line\">        System.out.println(p.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对一个人员集合遍历，找出男性并打印姓名。可以看出来，forEach 是为 Lambda 而设计的，保持了最紧凑的风格。而且 Lambda 表达式本身是可以重用的，非常方便。当需要为多核系统优化时，可以 parallelStream().forEach()，只是此时原有元素的次序没法保证，并行的情况下将改变串行时操作的行为，此时 forEach 本身的实现不需要调整，而 Java8 以前的 for 循环 code 可能需要加入额外的多线程逻辑。</p>\n<p>但一般认为，forEach 和常规 for 循环的差异不涉及到性能，它们仅仅是函数式风格与传统 Java 风格的差别。</p>\n<p>另外一点需要注意，forEach 是 terminal 操作，因此它执行后，Stream 的元素就被“消费”掉了，你无法对一个 Stream 进行两次 terminal 运算。下面的代码是错误的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream.forEach(element -&gt; doOneThing(element));</span><br><span class=\"line\">stream.forEach(element -&gt; doAnotherThing(element));</span><br></pre></td></tr></table></figure>\n<p>相反，具有相似功能的 intermediate 操作 peek 可以达到上述目的。如下是出现在该 api javadoc 上的一个示例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 13. peek 对每个元素执行操作并返回一个新的 Stream</span></span><br><span class=\"line\">Stream.of(<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>, <span class=\"string\">&quot;four&quot;</span>)</span><br><span class=\"line\">    .filter(e -&gt; e.length() &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\">    .peek(e -&gt; System.out.println(<span class=\"string\">&quot;Filtered value: &quot;</span> + e))</span><br><span class=\"line\">    .map(String::toUpperCase)</span><br><span class=\"line\">    .peek(e -&gt; System.out.println(<span class=\"string\">&quot;Mapped value: &quot;</span> + e))</span><br><span class=\"line\">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n<p>forEach 不能修改自己包含的本地变量值，也不能用 break/return 之类的关键字提前结束循环。</p>\n<h3 id=\"4-2-4-findFirst\"><a href=\"#4-2-4-findFirst\" class=\"headerlink\" title=\"4.2.4 findFirst\"></a><strong>4.2.4 findFirst</strong></h3><p>这是一个 termimal 兼 short-circuiting 操作，它总是返回 Stream 的第一个元素，或者空。</p>\n<p>这里比较重点的是它的返回值类型：Optional。这也是一个模仿 Scala 语言中的概念，作为一个容器，它可能含有某值，或者不包含。使用它的目的是尽可能避免 NullPointerException。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 14. Optional 的两个用例</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">strA</span> <span class=\"operator\">=</span> <span class=\"string\">&quot; abcd &quot;</span>, strB = <span class=\"literal\">null</span>;</span><br><span class=\"line\">print(strA);</span><br><span class=\"line\">print(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">print(strB);</span><br><span class=\"line\">getLength(strA);</span><br><span class=\"line\">getLength(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">getLength(strB);</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Java 8</span></span><br><span class=\"line\">    Optional.ofNullable(text).ifPresent(System.out::println);</span><br><span class=\"line\">    <span class=\"comment\">// Pre-Java 8</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (text != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(text);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getLength</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Java 8</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Optional.ofNullable(text).map(String::length).orElse(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Pre-Java 8</span></span><br><span class=\"line\"><span class=\"comment\">// return if (text != null) ? text.length() : -1;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>在更复杂的 if (xx != null) 的情况中，使用 Optional 代码的可读性更好，而且它提供的是编译时检查，能极大的降低 NPE 这种 Runtime Exception 对程序的影响，或者迫使程序员更早的在编码阶段处理空值问题，而不是留到运行时再发现和调试。</p>\n<p>Stream 中的 findAny、max/min、reduce 等方法等返回 Optional 值。还有例如 IntStream.average() 返回 OptionalDouble 等等。</p>\n<h3 id=\"4-2-5-reduce\"><a href=\"#4-2-5-reduce\" class=\"headerlink\" title=\"4.2.5 reduce\"></a><strong>4.2.5 reduce</strong></h3><p>这个方法的主要作用是把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce。例如 Stream 的 sum 就相当于</p>\n<p>Integer sum = integers.reduce(0, (a, b) -&gt; a+b); 或</p>\n<p>Integer sum = integers.reduce(0, Integer::sum);</p>\n<p>也有没有起始值的情况，这时会把 Stream 的前面两个元素组合起来，返回的是 Optional。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 15. reduce 的用例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串连接，concat = &quot;ABCD&quot;</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">concat</span> <span class=\"operator\">=</span> Stream.of(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>).reduce(<span class=\"string\">&quot;&quot;</span>, String::concat);</span><br><span class=\"line\"><span class=\"comment\">// 求最小值，minValue = -3.0</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">minValue</span> <span class=\"operator\">=</span> Stream.of(-<span class=\"number\">1.5</span>, <span class=\"number\">1.0</span>, -<span class=\"number\">3.0</span>, -<span class=\"number\">2.0</span>).reduce(Double.MAX_VALUE, Double::min);</span><br><span class=\"line\"><span class=\"comment\">// 求和，sumValue = 10, 有起始值</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sumValue</span> <span class=\"operator\">=</span> Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>).reduce(<span class=\"number\">0</span>, Integer::sum);</span><br><span class=\"line\"><span class=\"comment\">// 求和，sumValue = 10, 无起始值</span></span><br><span class=\"line\">sumValue = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>).reduce(Integer::sum).get();</span><br><span class=\"line\"><span class=\"comment\">// 过滤，字符串连接，concat = &quot;ace&quot;</span></span><br><span class=\"line\">concat = Stream.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"string\">&quot;F&quot;</span>).</span><br><span class=\"line\">        filter(x -&gt; x.compareTo(<span class=\"string\">&quot;Z&quot;</span>) &gt; <span class=\"number\">0</span>).</span><br><span class=\"line\">        reduce(<span class=\"string\">&quot;&quot;</span>, String::concat);</span><br></pre></td></tr></table></figure>\n<p>上面代码例如第一个示例的 reduce()，第一个参数（空白字符）即为起始值，第二个参数（String::concat）为 BinaryOperator。这类有起始值的 reduce() 都返回具体的对象。而对于第四个示例没有起始值的 reduce()，由于可能没有足够的元素，返回的是 Optional，请留意这个区别。</p>\n<h3 id=\"4-2-6-limit-skip\"><a href=\"#4-2-6-limit-skip\" class=\"headerlink\" title=\"4.2.6 limit/skip\"></a><strong>4.2.6 limit/skip</strong></h3><p>limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素（它是由一个叫 subStream 的方法改名而来）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 16. limit 和 skip 对运行次数的影响</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLimitAndSkip</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;Person&gt; persons = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(i, <span class=\"string\">&quot;name&quot;</span> + i);</span><br><span class=\"line\">        persons.add(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;String&gt; personList2 = persons.stream().</span><br><span class=\"line\">            map(Person::getName).limit(<span class=\"number\">10</span>).skip(<span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(personList2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span> <span class=\"params\">(<span class=\"type\">int</span> no, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<blockquote>\n<p>name1<br>name2<br>name3<br>name4<br>name5<br>name6<br>name7<br>name8<br>name9<br>name10<br>[name4, name5, name6, name7, name8, name9, name10]  </p>\n</blockquote>\n<p>这是一个有 10，000 个元素的 Stream，但在 short-circuiting 操作 limit 和 skip 的作用下，管道中 map 操作指定的 getName() 方法的执行次数为 limit 所限定的 10 次，而最终返回结果在跳过前 3 个元素后只有后面 7 个返回。</p>\n<p>有一种情况是 limit/skip 无法达到 short-circuiting 目的的，就是把它们放在 Stream 的排序操作后，原因跟 sorted 这个 intermediate 操作有关：此时系统并不知道 Stream 排序后的次序如何，所以 sorted 中的操作看上去就像完全没有被 limit 或者 skip 一样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 17. limit 和 skip 对 sorted 后的运行次数无影响</span></span><br><span class=\"line\">List&lt;Person&gt; persons = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(i, <span class=\"string\">&quot;name&quot;</span> + i);</span><br><span class=\"line\">    persons.add(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">List&lt;Person&gt; personList2 = persons.stream().sorted((p1, p2) -&gt;</span><br><span class=\"line\">        p1.getName().compareTo(p2.getName())).limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(personList2);</span><br></pre></td></tr></table></figure>\n<p>上面的示例对清单 13 做了微调，首先对 5 个元素的 Stream 排序，然后进行 limit 操作。输出结果为：</p>\n<blockquote>\n<p>name2<br>name1<br>name3<br>name2<br>name4<br>name3<br>name5<br>name4<br>[stream.StreamDW$Person@816f27d, stream.StreamDW$Person@87aac27]  </p>\n</blockquote>\n<p>即虽然最后的返回元素数量是 2，但整个管道中的 sorted 表达式执行次数没有像前面例子相应减少。</p>\n<p>最后有一点需要注意的是，对一个 parallel 的 Steam 管道来说，如果其元素是有序的，那么 limit 操作的成本会比较大，因为它的返回对象必须是前 n 个也有一样次序的元素。取而代之的策略是取消元素间的次序，或者不要用 parallel Stream。</p>\n<h3 id=\"4-2-7-sorted\"><a href=\"#4-2-7-sorted\" class=\"headerlink\" title=\"4.2.7 sorted\"></a><strong>4.2.7 sorted</strong></h3><p>对 Stream 的排序通过 sorted 进行，它比数组的排序更强之处在于你可以首先对 Stream 进行各类 map、filter、limit、skip 甚至 distinct 来减少元素数量后，再排序，这能帮助程序明显缩短执行时间。我们对清单 14 进行优化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 18. 优化：排序前进行 limit 和 skip</span></span><br><span class=\"line\">List&lt;Person&gt; persons = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(i, <span class=\"string\">&quot;name&quot;</span> + i);</span><br><span class=\"line\">    persons.add(person);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">List&lt;Person&gt; personList2 = persons.stream().limit(<span class=\"number\">2</span>).</span><br><span class=\"line\">        sorted((p1, p2) -&gt; p1.getName().compareTo(p2.getName())).</span><br><span class=\"line\">        collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(personList2);</span><br></pre></td></tr></table></figure>\n<p>结果会简单很多：</p>\n<blockquote>\n<p>name2<br>name1<br>[stream.StreamDW$Person@6ce253f1, stream.StreamDW$Person@53d8d10a]  </p>\n</blockquote>\n<p>当然，这种优化是有 business logic 上的局限性的：即不要求排序后再取值。</p>\n<h3 id=\"4-2-8-min-max-distinct\"><a href=\"#4-2-8-min-max-distinct\" class=\"headerlink\" title=\"4.2.8 min/max/distinct\"></a><strong>4.2.8 min/max/distinct</strong></h3><p>min 和 max 的功能也可以通过对 Stream 元素先排序，再 findFirst 来实现，但前者的性能会更好，为 O(n)，而 sorted 的成本是 O(n log n)。同时它们作为特殊的 reduce 方法被独立出来也是因为求最大最小值是很常见的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 19. 找出最长一行的长度</span></span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;c:\\\\SUService.log&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">longest</span> <span class=\"operator\">=</span> br.lines().</span><br><span class=\"line\"> mapToInt(String::length).</span><br><span class=\"line\"> max().</span><br><span class=\"line\"> getAsInt();</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">System.out.println(longest);</span><br></pre></td></tr></table></figure>\n<p>下面的例子则使用 distinct 来找出不重复的单词。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 20. 找出全文的单词，转小写，并排序</span></span><br><span class=\"line\">List&lt;String&gt; words = br.lines().</span><br><span class=\"line\"> flatMap(line -&gt; Stream.of(line.split(<span class=\"string\">&quot; &quot;</span>))).</span><br><span class=\"line\"> filter(word -&gt; word.length() &gt; <span class=\"number\">0</span>).</span><br><span class=\"line\"> map(String::toLowerCase).</span><br><span class=\"line\"> distinct().</span><br><span class=\"line\"> sorted().</span><br><span class=\"line\"> collect(Collectors.toList());</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">System.out.println(words);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-2-9-Match\"><a href=\"#4-2-9-Match\" class=\"headerlink\" title=\"4.2.9 Match\"></a><strong>4.2.9 Match</strong></h3><p>Stream 有三个 match 方法，从语义上说：</p>\n<ul>\n<li>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</li>\n<li>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true</li>\n<li>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</li>\n</ul>\n<p>它们都不是要遍历全部元素才能返回结果。例如 allMatch 只要一个元素不满足条件，就 skip 剩下的所有元素，返回 false。对清单 13 中的 Person 类稍做修改，加入一个 age 属性和 getAge 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 21. 使用 Match</span></span><br><span class=\"line\">List&lt;Person&gt; persons = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">persons.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;name&quot;</span> + <span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">persons.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;name&quot;</span> + <span class=\"number\">2</span>, <span class=\"number\">21</span>));</span><br><span class=\"line\">persons.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;name&quot;</span> + <span class=\"number\">3</span>, <span class=\"number\">34</span>));</span><br><span class=\"line\">persons.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;name&quot;</span> + <span class=\"number\">4</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\">persons.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">5</span>, <span class=\"string\">&quot;name&quot;</span> + <span class=\"number\">5</span>, <span class=\"number\">55</span>));</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isAllAdult</span> <span class=\"operator\">=</span> persons.stream().</span><br><span class=\"line\"> allMatch(p -&gt; p.getAge() &gt; <span class=\"number\">18</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;All are adult? &quot;</span> + isAllAdult);</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isThereAnyChild</span> <span class=\"operator\">=</span> persons.stream().</span><br><span class=\"line\"> anyMatch(p -&gt; p.getAge() &lt; <span class=\"number\">12</span>);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;Any child? &quot;</span> + isThereAnyChild);</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<blockquote>\n<p>All are adult? false<br>Any child? true  </p>\n</blockquote>\n<h2 id=\"4-3-进阶：自己生成流\"><a href=\"#4-3-进阶：自己生成流\" class=\"headerlink\" title=\"4.3 进阶：自己生成流\"></a>4.3 进阶：自己生成流</h2><h3 id=\"4-3-1-Stream-generate\"><a href=\"#4-3-1-Stream-generate\" class=\"headerlink\" title=\"4.3.1 Stream.generate\"></a><strong>4.3.1 Stream.generate</strong></h3><p>通过实现 Supplier 接口，你可以自己来控制流的生成。这种情形通常用于随机数、常量的 Stream，或者需要前后元素间维持着某种状态信息的 Stream。把 Supplier 实例传递给 Stream.generate() 生成的 Stream，默认是串行（相对 parallel 而言）但无序的（相对 ordered 而言）。由于它是无限的，在管道中，必须利用 limit 之类的操作限制 Stream 大小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 22. 生成 10 个随机整数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Random</span> <span class=\"variable\">seed</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">Supplier&lt;Integer&gt; random = seed::nextInt;</span><br><span class=\"line\">Stream.generate(random).limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">//Another way</span></span><br><span class=\"line\">IntStream.generate(() -&gt; (<span class=\"type\">int</span>) (System.nanoTime() % <span class=\"number\">100</span>)).</span><br><span class=\"line\">        limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<p>Stream.generate() 还接受自己实现的 Supplier。例如在构造海量测试数据的时候，用某种自动的规则给每一个变量赋值；或者依据公式计算 Stream 的每个元素值。这些都是维持状态信息的情形。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 23. 自实现 Supplier</span></span><br><span class=\"line\">Stream.generate(<span class=\"keyword\">new</span> <span class=\"title class_\">PersonSupplier</span>()).</span><br><span class=\"line\">    limit(<span class=\"number\">10</span>).</span><br><span class=\"line\">    forEach(p -&gt; System.out.println(p.getName() + <span class=\"string\">&quot;, &quot;</span> + p.getAge()));</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersonSupplier</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Supplier</span>&lt;Person&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Person <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(index++, <span class=\"string\">&quot;StormTestUser&quot;</span> + index, random.nextInt(<span class=\"number\">100</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<blockquote>\n<p>StormTestUser1, 9<br>StormTestUser2, 12<br>StormTestUser3, 88<br>StormTestUser4, 51<br>StormTestUser5, 22<br>StormTestUser6, 28<br>StormTestUser7, 81<br>StormTestUser8, 51<br>StormTestUser9, 4<br>StormTestUser10, 76  </p>\n</blockquote>\n<h3 id=\"4-3-2-Stream-iterate\"><a href=\"#4-3-2-Stream-iterate\" class=\"headerlink\" title=\"4.3.2 Stream.iterate\"></a><strong>4.3.2 Stream.iterate</strong></h3><p>iterate 跟 reduce 操作很像，接受一个种子值，和一个 UnaryOperator（例如 f）。然后种子值成为 Stream 的第一个元素，f(seed) 为第二个，f(f(seed)) 第三个，以此类推。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 24. 生成一个等差数列</span></span><br><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">3</span>).limit(<span class=\"number\">10</span>). forEach(x -&gt; System.out.print(x + <span class=\"string\">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<blockquote>\n<p>0 3 6 9 12 15 18 21 24 27</p>\n</blockquote>\n<p>与 Stream.generate 相仿，在 iterate 时候管道必须有 limit 这样的操作来限制 Stream 大小。</p>\n<h2 id=\"4-4-进阶：用-Collectors-来进行-reduction-操作\"><a href=\"#4-4-进阶：用-Collectors-来进行-reduction-操作\" class=\"headerlink\" title=\"4.4 进阶：用 Collectors 来进行 reduction 操作\"></a>4.4 进阶：用 Collectors 来进行 reduction 操作</h2><p>java.util.stream.Collectors 类的主要作用就是辅助进行各类有用的 reduction 操作，例如转变输出为 Collection，把 Stream 元素进行归组。</p>\n<h3 id=\"4-4-1-groupingBy-partitioningBy\"><a href=\"#4-4-1-groupingBy-partitioningBy\" class=\"headerlink\" title=\"4.4.1 groupingBy/partitioningBy\"></a><strong>4.4.1 groupingBy/partitioningBy</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 25. 按照年龄归组</span></span><br><span class=\"line\">Map&lt;Integer, List&lt;Person&gt;&gt; personGroups = Stream.generate(<span class=\"keyword\">new</span> <span class=\"title class_\">PersonSupplier</span>()).</span><br><span class=\"line\">        limit(<span class=\"number\">100</span>).</span><br><span class=\"line\">        collect(Collectors.groupingBy(Person::getAge));</span><br><span class=\"line\"><span class=\"type\">Iterator</span> <span class=\"variable\">it</span> <span class=\"operator\">=</span> personGroups.entrySet().iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Map.Entry&lt;Integer, List&lt;Person&gt;&gt; persons = (Map.Entry) it.next();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Age &quot;</span> + persons.getKey() + <span class=\"string\">&quot; = &quot;</span> + persons.getValue().size());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 code，首先生成 100 人的信息，然后按照年龄归组，相同年龄的人放到同一个 list 中，可以看到如下的输出：</p>\n<blockquote>\n<p>Age 0 = 2<br>Age 1 = 2<br>Age 5 = 2<br>Age 8 = 1<br>Age 9 = 1<br>Age 11 = 2<br>……  </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清单 26. 按照未成年人和成年人归组</span></span><br><span class=\"line\">Map&lt;Boolean, List&lt;Person&gt;&gt; children = Stream.generate(<span class=\"keyword\">new</span> <span class=\"title class_\">PersonSupplier</span>()).</span><br><span class=\"line\">        limit(<span class=\"number\">100</span>).</span><br><span class=\"line\">        collect(Collectors.partitioningBy(p -&gt; p.getAge() &lt; <span class=\"number\">18</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;Children number: &quot;</span> + children.get(<span class=\"literal\">true</span>).size());</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;Adult number: &quot;</span> + children.get(<span class=\"literal\">false</span>).size());</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<blockquote>\n<p>Children number: 23<br>Adult number: 77</p>\n</blockquote>\n<p>在使用条件“年龄小于 18”进行分组后可以看到，不到 18 岁的未成年人是一组，成年人是另外一组。partitioningBy 其实是一种特殊的 groupingBy，它依照条件测试的是否两种结果来构造返回的数据结构，get(true) 和 get(false) 能即为全部的元素对象。</p>\n<h1 id=\"5-结束语\"><a href=\"#5-结束语\" class=\"headerlink\" title=\"5. 结束语\"></a>5. 结束语</h1><p>总之，Stream 的特性可以归纳为：</p>\n<ul>\n<li>不是数据结构</li>\n<li>它没有内部存储，它只是用操作管道从 source（数据结构、数组、generator function、IO channel）抓取数据。</li>\n<li>它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。</li>\n<li>所有 Stream 的操作必须以 lambda 表达式为参数</li>\n<li>不支持索引访问</li>\n<li>你可以请求第一个元素，但无法请求第二个，第三个，或最后一个。不过请参阅下一项。</li>\n<li>很容易生成数组或者 List</li>\n<li>惰性化</li>\n<li>很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。</li>\n<li>Intermediate 操作永远是惰性化的。</li>\n<li>并行能力</li>\n<li>当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。</li>\n<li>可以是无限的。集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。</li>\n</ul>\n","categories":[],"tags":["java"]},{"title":"Guava之RateLimiter速率限制器","url":"https://zhangyaxiao.github.io/2018/09/12/Guava之RateLimiter速率限制器/","content":"<h1 id=\"Guava之RateLimiter速率限制器\"><a href=\"#Guava之RateLimiter速率限制器\" class=\"headerlink\" title=\"Guava之RateLimiter速率限制器\"></a>Guava之RateLimiter速率限制器</h1><p>在平时开发中，我们有时需要对某些接口的调用进行速率限制，以保护系统的稳定运行。<br>常用的限流算法有漏桶算法和令牌桶算法，guava的RateLimiter使用的是令牌桶算法，也就是以固定的频率向桶中放入令牌，例如一秒钟10枚令牌，实际业务在每次响应请求之前都从桶中获取令牌，只有取到令牌的请求才会被成功响应，获取的方式有两种：阻塞等待令牌或者取不到立即返回失败</p>\n<p><img src=\"/2018/09/12/Guava%E4%B9%8BRateLimiter%E9%80%9F%E7%8E%87%E9%99%90%E5%88%B6%E5%99%A8/令牌桶算法.jpg\" alt=\"令牌桶算法\"></p>\n<h2 id=\"1-RateLimiter方法摘要\"><a href=\"#1-RateLimiter方法摘要\" class=\"headerlink\" title=\"1. RateLimiter方法摘要\"></a>1. RateLimiter方法摘要</h2><table>\n<thead>\n<tr>\n<th>修饰符和类型</th>\n<th>方法和描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>double</td>\n<td>acquire() 从RateLimiter获取一个许可，该方法会被阻塞直到获取到请求</td>\n</tr>\n<tr>\n<td>double</td>\n<td>acquire(int permits)从RateLimiter获取指定许可数，该方法会被阻塞直到获取到请求</td>\n</tr>\n<tr>\n<td>static RateLimiter</td>\n<td>create(double permitsPerSecond)根据指定的稳定吞吐率创建RateLimiter，这里的吞吐率是指每秒多少许可数（通常是指QPS，每秒多少查询）</td>\n</tr>\n<tr>\n<td>static RateLimiter</td>\n<td>create(double permitsPerSecond, long warmupPeriod, TimeUnit unit)根据指定的稳定吞吐率和预热期来创建RateLimiter，这里的吞吐率是指每秒多少许可数（通常是指QPS，每秒多少个请求量），在这段预热时间内，RateLimiter每秒分配的许可数会平稳地增长直到预热期结束时达到其最大速率。（只要存在足够请求数来使其饱和）</td>\n</tr>\n<tr>\n<td>double</td>\n<td>getRate()返回RateLimiter 配置中的稳定速率，该速率单位是每秒多少许可数</td>\n</tr>\n<tr>\n<td>void</td>\n<td>setRate(double permitsPerSecond)更新RateLimite的稳定速率，参数permitsPerSecond 由构造RateLimiter的工厂方法提供。</td>\n</tr>\n<tr>\n<td>String</td>\n<td>toString()返回对象的字符表现形式</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>tryAcquire()从RateLimiter 获取许可，如果该许可可以在无延迟下的情况下立即获取得到的话</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>tryAcquire(int permits)从RateLimiter 获取许可数，如果该许可数可以在无延迟下的情况下立即获取得到的话</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>tryAcquire(int permits, long timeout, TimeUnit unit)从RateLimiter 获取指定许可数如果该许可数可以在不超过timeout的时间内获取得到的话，或者如果无法在timeout 过期之前获取得到许可数的话，那么立即返回false （无需等待）</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>tryAcquire(long timeout, TimeUnit unit)从RateLimiter 获取许可如果该许可可以在不超过timeout的时间内获取得到的话，或者如果无法在timeout 过期之前获取得到许可的话，那么立即返回false（无需等待）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-实例\"><a href=\"#2-实例\" class=\"headerlink\" title=\"2. 实例\"></a>2. 实例</h2><ul>\n<li><p>我们需要处理一个任务列表，但我们不希望每秒的任务提交超过两个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//速率是每秒两个许可</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">RateLimiter</span> <span class=\"variable\">rateLimiter</span> <span class=\"operator\">=</span> RateLimiter.create(<span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">submitTasks</span><span class=\"params\">(List tasks, Executor executor)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Runnable task : tasks) &#123;</span><br><span class=\"line\">        rateLimiter.acquire(); <span class=\"comment\">// 该方法会被阻塞直到获取到请求</span></span><br><span class=\"line\">        executor.execute(task);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>某个Controller请求，限制每秒5个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//每秒只发出5个令牌</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">RateLimiter</span> <span class=\"variable\">rateLimiter</span> <span class=\"operator\">=</span> RateLimiter.create(<span class=\"number\">5.0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AccessLimitService accessLimitService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/access&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">access</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//尝试获取令牌</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rateLimiter.tryAcquire())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//执行业务</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;aceess success [&quot;</span> + sdf.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//请求数超出</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;aceess limit [&quot;</span> + sdf.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一直被调用的接口，每30秒打印一次日志</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">RateLimiter</span> <span class=\"variable\">rateLimiter</span> <span class=\"operator\">=</span> RateLimiter.create(<span class=\"number\">1.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(String param)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行业务</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//打印日志</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (logRateLimiter.tryAcquire(<span class=\"number\">30</span>)) &#123;</span><br><span class=\"line\">         logger.info(String.format(<span class=\"string\">&quot;onMessage调用正常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"java8——Lamdba表达式","url":"https://zhangyaxiao.github.io/2018/07/18/java8-Lamdba表达式/","content":"<h1 id=\"Java-8-Lambda-表达式\"><a href=\"#Java-8-Lambda-表达式\" class=\"headerlink\" title=\"Java 8 Lambda 表达式\"></a>Java 8 Lambda 表达式</h1><p>Lamdba 表达式是java8推出的新特性，它允许把函数作为一个方法的参数（函数作为参数传递进方法中）</p>\n<h2 id=\"1-语法\"><a href=\"#1-语法\" class=\"headerlink\" title=\"1. 语法\"></a>1. 语法</h2><ul>\n<li><strong>可选类型声明：</strong> 不需要声明参数类型，编译器可以统一识别参数组</li>\n<li><strong>可选的参数圆括号：</strong> 一个参数无需定义圆括号，但多个参数需要定义圆括号</li>\n<li><strong>可选的大括号：</strong> 如果主体包含一个语句，就不需要使用大括号</li>\n<li><strong>可选的返回关键字：</strong> 如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指明表达式返回一个数值</li>\n</ul>\n<h2 id=\"2-Lambda表达式实例\"><a href=\"#2-Lambda表达式实例\" class=\"headerlink\" title=\"2. Lambda表达式实例\"></a>2. Lambda表达式实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 不需要参数,返回值为 5  </span><br><span class=\"line\">() -&gt; 5  </span><br><span class=\"line\">  </span><br><span class=\"line\">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br><span class=\"line\">x -&gt; 2 * x  </span><br><span class=\"line\">  </span><br><span class=\"line\">// 3. 接受2个参数(数字),并返回他们的差值  </span><br><span class=\"line\">(x, y) -&gt; x – y  </span><br><span class=\"line\">  </span><br><span class=\"line\">// 4. 接收2个int型整数,返回他们的和  </span><br><span class=\"line\">(int x, int y) -&gt; x + y  </span><br><span class=\"line\">  </span><br><span class=\"line\">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br><span class=\"line\">(String s) -&gt; System.out.print(s)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 Java8Tester.java 文件输入以下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8Tester</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Java8Tester</span> <span class=\"variable\">tester</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Java8Tester</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 类型声明</span></span><br><span class=\"line\">      <span class=\"type\">MathOperation</span> <span class=\"variable\">addition</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; a + b;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 不用类型声明</span></span><br><span class=\"line\">      <span class=\"type\">MathOperation</span> <span class=\"variable\">subtraction</span> <span class=\"operator\">=</span> (a, b) -&gt; a - b;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 大括号中的返回语句</span></span><br><span class=\"line\">      <span class=\"type\">MathOperation</span> <span class=\"variable\">multiplication</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; &#123; <span class=\"keyword\">return</span> a * b; &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 没有大括号及返回语句</span></span><br><span class=\"line\">      <span class=\"type\">MathOperation</span> <span class=\"variable\">division</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) -&gt; a / b;</span><br><span class=\"line\">        </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;10 + 5 = &quot;</span> + tester.operate(<span class=\"number\">10</span>, <span class=\"number\">5</span>, addition));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;10 - 5 = &quot;</span> + tester.operate(<span class=\"number\">10</span>, <span class=\"number\">5</span>, subtraction));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;10 x 5 = &quot;</span> + tester.operate(<span class=\"number\">10</span>, <span class=\"number\">5</span>, multiplication));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;10 / 5 = &quot;</span> + tester.operate(<span class=\"number\">10</span>, <span class=\"number\">5</span>, division));</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 不用括号</span></span><br><span class=\"line\">      <span class=\"type\">GreetingService</span> <span class=\"variable\">greetService1</span> <span class=\"operator\">=</span> message -&gt;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Hello &quot;</span> + message);</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 用括号</span></span><br><span class=\"line\">      <span class=\"type\">GreetingService</span> <span class=\"variable\">greetService2</span> <span class=\"operator\">=</span> (message) -&gt;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Hello &quot;</span> + message);</span><br><span class=\"line\">        </span><br><span class=\"line\">      greetService1.sayMessage(<span class=\"string\">&quot;Runoob&quot;</span>);</span><br><span class=\"line\">      greetService2.sayMessage(<span class=\"string\">&quot;Google&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">interface</span> <span class=\"title class_\">MathOperation</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"title function_\">operation</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">interface</span> <span class=\"title class_\">GreetingService</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">sayMessage</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">operate</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, MathOperation mathOperation)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mathOperation.operation(a, b);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>执行以上代码，输出结果<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac Java8Tester.java </span><br><span class=\"line\">$ java Java8Tester</span><br><span class=\"line\">10 + 5 = 15</span><br><span class=\"line\">10 - 5 = 5</span><br><span class=\"line\">10 x 5 = 50</span><br><span class=\"line\">10 / 5 = 2</span><br><span class=\"line\">Hello Runoob</span><br><span class=\"line\">Hello Google</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-变量作用域\"><a href=\"#3-变量作用域\" class=\"headerlink\" title=\"3. 变量作用域\"></a>3. 变量作用域</h2><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。<br>在 Java8Tester.java 文件输入以下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8Tester</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">salutation</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello! &quot;</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">GreetingService</span> <span class=\"variable\">greetService1</span> <span class=\"operator\">=</span> message -&gt; </span><br><span class=\"line\">      System.out.println(salutation + message);</span><br><span class=\"line\">      greetService1.sayMessage(<span class=\"string\">&quot;Runoob&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">interface</span> <span class=\"title class_\">GreetingService</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">sayMessage</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行以上脚本，输出结果为：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac Java8Tester.java </span><br><span class=\"line\">$ java Java8Tester</span><br><span class=\"line\">Hello! Runoob</span><br></pre></td></tr></table></figure></p>\n<p>我们也可以直接在 lambda 表达式中访问外层的局部变量：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java8Tester</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));</span><br><span class=\"line\">        s.convert(<span class=\"number\">2</span>);  <span class=\"comment\">// 输出结果为 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Converter</span>&lt;T1, T2&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">convert</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));</span><br><span class=\"line\">s.convert(<span class=\"number\">2</span>);</span><br><span class=\"line\">num = <span class=\"number\">5</span>;  </span><br><span class=\"line\"><span class=\"comment\">//报错信息：Local variable num defined in an enclosing scope must be final or effectively final</span></span><br></pre></td></tr></table></figure>\n<p>在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">first</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;  </span><br><span class=\"line\">Comparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length());  <span class=\"comment\">//编译会出错 </span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-实例\"><a href=\"#4-实例\" class=\"headerlink\" title=\"4. 实例\"></a>4. 实例</h2><h3 id=\"4-1-lambdas-实现-Runnable-接口\"><a href=\"#4-1-lambdas-实现-Runnable-接口\" class=\"headerlink\" title=\"4.1 lambdas 实现 Runnable 接口\"></a>4.1 lambdas 实现 Runnable 接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.1使用匿名内部类  </span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello world !&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;).start();  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 1.2使用 lambda expression  </span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; System.out.println(<span class=\"string\">&quot;Hello world !&quot;</span>)).start();  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2.1使用匿名内部类  </span></span><br><span class=\"line\"><span class=\"type\">Runnable</span> <span class=\"variable\">race1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello world !&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2.2使用 lambda expression  </span></span><br><span class=\"line\"><span class=\"type\">Runnable</span> <span class=\"variable\">race2</span> <span class=\"operator\">=</span> () -&gt; System.out.println(<span class=\"string\">&quot;Hello world !&quot;</span>);  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">// 直接调用 run 方法(没开新线程哦!)  </span></span><br><span class=\"line\">race1.run();  </span><br><span class=\"line\">race2.run();  </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-lambdas-实现-排序集合\"><a href=\"#4-2-lambdas-实现-排序集合\" class=\"headerlink\" title=\"4.2 lambdas 实现 排序集合\"></a>4.2 lambdas 实现 排序集合</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.2 使用 lambda expression 排序 players  </span></span><br><span class=\"line\">Comparator&lt;String&gt; sortByName = (String s1, String s2) -&gt; (s1.compareTo(s2));  </span><br><span class=\"line\">Arrays.sort(players, sortByName);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 1.3 也可以采用如下形式:  </span></span><br><span class=\"line\">Arrays.sort(players, (String s1, String s2) -&gt; (s1.compareTo(s2)));  </span><br><span class=\"line\"></span><br><span class=\"line\">其他的排序如下所示。 和上面的示例一样,代码分别通过匿名内部类和一些lambda表达式来实现Comparator :</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.1 使用匿名内部类根据 surname 排序 players  </span></span><br><span class=\"line\">Arrays.sort(players, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String s1, String s2)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (s1.substring(s1.indexOf(<span class=\"string\">&quot; &quot;</span>)).compareTo(s2.substring(s2.indexOf(<span class=\"string\">&quot; &quot;</span>))));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 1.2 使用 lambda expression 排序,根据 surname  </span></span><br><span class=\"line\">Comparator&lt;String&gt; sortBySurname = (String s1, String s2) -&gt;   </span><br><span class=\"line\">    ( s1.substring(s1.indexOf(<span class=\"string\">&quot; &quot;</span>)).compareTo( s2.substring(s2.indexOf(<span class=\"string\">&quot; &quot;</span>)) ) );  </span><br><span class=\"line\">Arrays.sort(players, sortBySurname);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 1.3 或者这样,怀疑原作者是不是想错了,括号好多...  </span></span><br><span class=\"line\">Arrays.sort(players, (String s1, String s2) -&gt;   </span><br><span class=\"line\">      ( s1.substring(s1.indexOf(<span class=\"string\">&quot; &quot;</span>)).compareTo( s2.substring(s2.indexOf(<span class=\"string\">&quot; &quot;</span>)) ) )   </span><br><span class=\"line\">    );  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2.1 使用匿名内部类根据 name lenght 排序 players  </span></span><br><span class=\"line\">Arrays.sort(players, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String s1, String s2)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (s1.length() - s2.length());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2.2 使用 lambda expression 排序,根据 name lenght  </span></span><br><span class=\"line\">Comparator&lt;String&gt; sortByNameLenght = (String s1, String s2) -&gt; (s1.length() - s2.length());  </span><br><span class=\"line\">Arrays.sort(players, sortByNameLenght);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2.3 or this  </span></span><br><span class=\"line\">Arrays.sort(players, (String s1, String s2) -&gt; (s1.length() - s2.length()));  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 3.1 使用匿名内部类排序 players, 根据最后一个字母  </span></span><br><span class=\"line\">Arrays.sort(players, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String s1, String s2)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (s1.charAt(s1.length() - <span class=\"number\">1</span>) - s2.charAt(s2.length() - <span class=\"number\">1</span>));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 3.2 使用 lambda expression 排序,根据最后一个字母  </span></span><br><span class=\"line\">Comparator&lt;String&gt; sortByLastLetter =   </span><br><span class=\"line\">    (String s1, String s2) -&gt;   </span><br><span class=\"line\">        (s1.charAt(s1.length() - <span class=\"number\">1</span>) - s2.charAt(s2.length() - <span class=\"number\">1</span>));  </span><br><span class=\"line\">Arrays.sort(players, sortByLastLetter);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 3.3 or this  </span></span><br><span class=\"line\">Arrays.sort(players, (String s1, String s2) -&gt; (s1.charAt(s1.length() - <span class=\"number\">1</span>) - s2.charAt(s2.length() - <span class=\"number\">1</span>))); </span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["java"]},{"title":"SpringMVC中验证参数Bean","url":"https://zhangyaxiao.github.io/2018/04/24/SpringMVC中验证参数Bean/","content":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>在项目中添加以下依赖  </p>\n<p>maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.validation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>validation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;validation_version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>spring配置文件中增加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"常用的校验注解示例\"><a href=\"#常用的校验注解示例\" class=\"headerlink\" title=\"常用的校验注解示例\"></a>常用的校验注解示例</h1><p><a href=\"http://beanvalidation.org/2.0/spec/#builtinconstraints\">相关校验注解文档</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//该参数必须为空</span></span><br><span class=\"line\"><span class=\"meta\">@Null(message = &quot;无需ID&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据正则校验手机号是否是由数字组成</span></span><br><span class=\"line\"><span class=\"meta\">@Pattern(regexp = &quot;^\\\\d&#123;11&#125;$&quot;, message = &quot;手机格式不正确,不是11位&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String telephone;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//校验该对象是否为null</span></span><br><span class=\"line\"><span class=\"comment\">//对于String来说，空字符串可通过校验，所以String应该使用@NotBlank进行校验，此处仅做示例而已。</span></span><br><span class=\"line\"><span class=\"meta\">@NotNull(message = &quot;联系人不能为空&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String friendName;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//校验对象是否是空对象，可用于Array,Collection,Map,String</span></span><br><span class=\"line\"><span class=\"meta\">@NotEmpty(message = &quot;家庭成员不能为空&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List families;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//校验长度，可以用于Array,Collection,Map,String</span></span><br><span class=\"line\"><span class=\"meta\">@Size(min = 4, max = 8, message = &quot;用户名长度错误 by size&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//校验长度，只能用于String</span></span><br><span class=\"line\"><span class=\"meta\">@Length(min = 4, max = 8, message = &quot;用户名长度错误 by length&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//javax校验</span></span><br><span class=\"line\"><span class=\"meta\">@Max(value = 200, message = &quot;年龄一般不会超过200 by max&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Min(value = 1, message = &quot;年龄一般不能小于1 by min&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//hibernate校验，效果等同</span></span><br><span class=\"line\"><span class=\"meta\">@Range(min = 0, max = 200, message = &quot;年龄范围在0-200之间 by range&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//校验参数是否是False, 相反的是@AssertTrue</span></span><br><span class=\"line\"><span class=\"meta\">@AssertFalse(message = &quot;用户初始化无需冻结&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Boolean lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//String专用</span></span><br><span class=\"line\"><span class=\"meta\">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Size(min = 6, max = 12, message = &quot;密码长度不对&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用自定义校验注解-&gt;校验时间</span></span><br><span class=\"line\"><span class=\"meta\">@Past(message = &quot;生日只能为以前的时间&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//校验Email</span></span><br><span class=\"line\"><span class=\"meta\">@Email(message = &quot;邮件地址不正确&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String email;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"校验类方法中的自定义对象\"><a href=\"#校验类方法中的自定义对象\" class=\"headerlink\" title=\"校验类方法中的自定义对象\"></a>校验类方法中的自定义对象</h1><ol>\n<li>在参数上加@Valid，(或者加@Validated也是可以的)</li>\n<li>在自定义对象中的属性上加上校验注解<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Valid</span> User user , BindingResult bindingResult)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bindingResult.hasErrors()) &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ObjectError objectError : bindingResult.getAllErrors()) &#123;</span><br><span class=\"line\">            sb.append(((FieldError) objectError).getField() + <span class=\"string\">&quot; : &quot;</span>).append(objectError.getDefaultMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Max(value = 200, message =&quot;不能超过200&quot;)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> id;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"meta\">@NotNull(message = &quot;name不能为空&quot;)</span></span><br><span class=\"line\">        String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//setter  getter ....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h1 id=\"关于-Valid和-Validated的区别联系\"><a href=\"#关于-Valid和-Validated的区别联系\" class=\"headerlink\" title=\"关于@Valid和@Validated的区别联系\"></a>关于@Valid和@Validated的区别联系</h1><p>一直对@Valid和@Validated这两个注解非常疑惑，不知道怎么区分和使用。</p>\n<ol>\n<li>包位置 <ul>\n<li>@Valid: javax.validation， 是javax，也是就是jsr303中定义的规范注解 </li>\n<li>@Validated: org.springframework.validation.annotation， 是spring自己封装的注解。</li>\n</ul>\n</li>\n<li>功能<ul>\n<li>@Valid就不用说了，是jsr303的规范。</li>\n<li>@Validated是@Valid的一个变种，扩展了@Valid的功能，支持group分组校验的写法。 </li>\n</ul>\n</li>\n</ol>\n<p>那么我们对于@Valid和@Validated就可以这么理解： </p>\n<ol>\n<li>能用@Valid的地方通常可以用@Validated替代。 </li>\n<li>需要使用分组校验的时候使用@Validated注解</li>\n</ol>\n<hr>\n<h1 id=\"分组校验\"><a href=\"#分组校验\" class=\"headerlink\" title=\"分组校验\"></a>分组校验</h1><p>我们有一个用户DTO,其中有id,username两个属性。当保存时，id不需要有值，由数据库自动生成，我们使用@Null注解校验。当更新时，id需要有值，根据ID去更新用户名，我们使用@NotNull注解校验。无论是保存用户还是更新用户，都需要校验用户名，我们使用@NotBlank注解校验。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SaveGroup</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UpdateGroup</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Max(value = 200, message =&quot;不能超过200&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Null(groups = &#123;SaveGroup.class&#125;, message = &quot;不需要传入用户name&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(groups = &#123;UpdateGroup.class&#125;, message = &quot;用户name不能为空&quot;)</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义相应类型的公开接口(SaveGroup,UpdateGroup)，给每个校验注解指定groups属性，如果不指定则默认为javax.validation.groups.Default.class。<br>我们让SaveGroup和UpdateGroup继承了Default, 那么三个接口之间的关系类似如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save --&gt; SaveGroup |--&gt;id  @Null</span><br><span class=\"line\">                   |--&gt;Default --&gt; username @NotBlank</span><br><span class=\"line\"></span><br><span class=\"line\">update--&gt; UpdateGroup |--&gt;id @NotNull</span><br><span class=\"line\">                      |--&gt;Default --&gt; username @NotBlank</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Validated(value = UpdateGroup.class)</span> User user , BindingResult bindingResult)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bindingResult.hasErrors()) &#123;</span><br><span class=\"line\">            <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (ObjectError objectError : bindingResult.getAllErrors()) &#123;</span><br><span class=\"line\">                sb.append(((FieldError) objectError).getField() + <span class=\"string\">&quot; : &quot;</span>).append(objectError.getDefaultMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(sb.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在方法参数的对象上加@Validated属性，填写Value为对应的接口的class即可，这时候访问不同的接口就会进行不同的校验了。</p>\n<hr>\n<h1 id=\"自定义校验注解\"><a href=\"#自定义校验注解\" class=\"headerlink\" title=\"自定义校验注解\"></a>自定义校验注解</h1><p>有时候默认提供的校验注解无法满足我们的需要，我们需要自定义。例如现有校验注解不支持java8中的LocalDateTime。那么接下来我们自定义一个校验LocalDateTime的注解。该注解判断传入的时间是否是一个过去的时间。</p>\n<ol>\n<li>创建校验注解</li>\n<li>编写校验规则 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Constraint(validatedBy = PastTimeValidate.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> PastDate &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">message</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] groups() <span class=\"keyword\">default</span> &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Payload</span>&gt;[] payload() <span class=\"keyword\">default</span> &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n校验规则也就是枚举PastDate中指定的validateBy属性<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PastTimeValidate</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConstraintValidator</span>&lt;PastDate, LocalDateTime&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(PastDate constraintAnnotation)</span> &#123;</span><br><span class=\"line\">      log.info(<span class=\"string\">&quot;init enum PastDate&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(LocalDateTime localDateTime, ConstraintValidatorContext context)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> localDateTime.isBefore(LocalDateTime.now()) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>写完这些，我们就可以像@Past对Date校验一样使用@PastDate对LocalDateTime进行校验了。</p>\n<hr>\n","categories":[],"tags":["spring"]},{"title":"用Fiddler在Android上抓包","url":"https://zhangyaxiao.github.io/2018/04/23/用Fiddler在Android上抓包/","content":"<p>转载 <a href=\"https://blog.csdn.net/mackkill/article/details/70746702\">Android 使用Fiddler抓取Https请求</a></p>\n<p>在开发过程中我们一定碰到过需要查看从服务器请求下来的信息是什么样的情况，一般使用log就可以查看，但是有时候当请求下来的信息特别多的时候则不怎么好看了；如果是一般的get请求，只要结合谷歌浏览器的一个数据格式化插件也可以看的很happy，但是万一是post请求呢？特别还是https类型的请求呢？<br>这就是今天要说的一个抓包工具Fiddler了，Fiddler默认是抓取http类型的接口，而想要查看https类型的接口就需要安装Fiddler证书。接下来一步步来看：</p>\n<hr>\n<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>本文是在Windows 7 环境下进行，并且需要电脑和手机处于同一局域网。如果是台式机的朋友可以使用无线网卡；当然使用模拟器也可以。</p>\n<hr>\n<h1 id=\"下载安装Fiddler\"><a href=\"#下载安装Fiddler\" class=\"headerlink\" title=\"下载安装Fiddler\"></a>下载安装Fiddler</h1><ol>\n<li><p>首先安装Fiddler较新的版本，这里不建议安装老的版本，因为可能会出问题，下载传送门：Fiddler:<a href=\"http://www.telerik.com/fiddler\">http://www.telerik.com/fiddler</a></p>\n</li>\n<li><p>安装直接默认就行，安装完后打开Fiddler，点击工具栏的Tools -&gt; Telerik Fiddler Options。选中HTTPS 勾选如图：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/1.png\" alt=\"1\"><br>中途会弹出安全方面的弹窗直接无视就行，毕竟我们本来干的就不是什么正常的事。</p>\n</li>\n<li>接着生成证书，还是HTTPS 里面如上图，点击右边的Actions选择Export Root Certificate to Desktop。意思是导出证书并存至桌面。记住位置一会会用到。如图：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/2.png\" alt=\"2\"></li>\n<li>切换到Connections栏，就在HTTPS旁边，勾选如图：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/3.png\" alt=\"3\"><br>这里端口号8888可以自己指定，这里我们保持默认就行。设置好后会提示重新启动Fiddler，如果没有提示我们也重新启动一下。<br>好了客户端安装完了，接下来配置手机端。</li>\n</ol>\n<hr>\n<h1 id=\"手机配置\"><a href=\"#手机配置\" class=\"headerlink\" title=\"手机配置\"></a>手机配置</h1><ol>\n<li>首先使用ipconfig /all命令获取电脑的ip地址（这里我的是172.20.1.67）：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/4.png\" alt=\"4\"></li>\n<li>然后在手机wifi高级选项里填上你的代理ip及端口8888：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/5.png\" alt=\"5\"><br>最后就是在手机端安装证书了。</li>\n</ol>\n<hr>\n<h1 id=\"安装证书\"><a href=\"#安装证书\" class=\"headerlink\" title=\"安装证书\"></a>安装证书</h1><ol>\n<li>找到先前保存至桌面的证书，然后拷贝到手机sd目录：<br>ps：这里楼主的手机电脑无法访问到sd卡很是蛋疼~~~，于是我是通过qq传送的。。。。<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/6.png\" alt=\"6\"></li>\n<li>点击设置——&gt;安全——&gt;从设备存储空间安装——&gt;从sd卡中找到证书，点击安装即可（直接点击是无法安装的，不信你可以试试）。安装后会让你设置锁屏，然后取个名字就完事了。<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/7.png\" alt=\"7\"><br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/8.png\" alt=\"8\"><br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/9.png\" alt=\"9\"></li>\n</ol>\n<p>好了，至此配置方面就完事了，接着就可以开心的拦截https请求了。<br><strong>ps：如果有拦截还是没有成功的情况请检查下上面的配置选项，因为楼主遇到过选项重置的情况，再就是重新安装一遍证书。</strong></p>\n<hr>\n<h1 id=\"拦截https\"><a href=\"#拦截https\" class=\"headerlink\" title=\"拦截https\"></a>拦截https</h1><p>这时候请求一条https数据，然后在Fiddler中查看信息：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/10.png\" alt=\"10\"><br>如图可以看见有A、B两个区域：<br>A区域主要是显示当前设备请求过来的链接信息：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/11.png\" alt=\"11\"><br>“#”代表的是相应的请求类型，这里在网上找了一张图，可能会有图标的变化，但大致能理解：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/12.png\" alt=\"12\"><br>在A区域选中一条请求对应B区域会显示一些我们能进行的操作，这里主要了解下Inspectors、Filters：</p>\n<h2 id=\"Inspectors\"><a href=\"#Inspectors\" class=\"headerlink\" title=\"Inspectors\"></a>Inspectors</h2><p>分为上下两个显示部分，上半部分显示的是请求头参数部分，下半部分是响应体部分。对于每一部分，提供了多种不同格式查看每个请求和响应的内容。JPG 格式使用 ImageView 就可以看到图片，使用 TextView 可以看到响应的内容。Raw标签可以查看原始的符合HTTP标准的请求和响应头。Auth则可以查看授权Proxy-Authorization 和 Authorization的相关信息。JSON能查看格式化好了的json类型数据。<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/13.png\" alt=\"13\"><br>如果发现Textview显示乱码的话，切换到Transformer 取消Chunked Transfer-Encoding勾选，选择 None即可。</p>\n<p>这里还有一点：如果嫌这个界面显示不好看，Fiddler也为我们提供了简化的独立界面，在A区域中选中一条请求右键选择inspect in New Window… 即可：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/14.png\" alt=\"14\"></p>\n<h2 id=\"Filters\"><a href=\"#Filters\" class=\"headerlink\" title=\"Filters\"></a>Filters</h2><p>跟着一步步做下来的同学肯定会诧异：为啥我的A区域显示特别乱，各种乱七八糟的请求都有，而楼主的是那么的干净丝滑~~~。其实这里就是通过配置Filters的过滤规则如下图示：<br><img src=\"/2018/04/23/%E7%94%A8Fiddler%E5%9C%A8Android%E4%B8%8A%E6%8A%93%E5%8C%85/15.png\" alt=\"15\"><br>首先选中Use Filters，Hosts里面有两个下拉选框，第一个是选择过滤内网和外网；第二个选择过滤条件，这里选择Show only the following Hosts （只显示以下允许的域名）。最后点击右侧的Actions按钮Run Filterset now 即可。</p>\n<hr>\n","categories":[],"tags":["工具"]},{"title":"关于监听器,过滤器,拦截器的使用","url":"https://zhangyaxiao.github.io/2018/04/17/关于监听器-过滤器-拦截器的使用/","content":"<h1 id=\"关于过滤器，拦截器，监听器具体应用上的区别\"><a href=\"#关于过滤器，拦截器，监听器具体应用上的区别\" class=\"headerlink\" title=\"关于过滤器，拦截器，监听器具体应用上的区别\"></a>关于过滤器，拦截器，监听器具体应用上的区别</h1><p>把整个项目的流程比作一条河，那么监听器的作用就是能够听到河流里的所有声音，过滤器就是能够过滤出其中的鱼，而拦截器则是拦截其中的部分鱼，并且作标记。</p>\n<ul>\n<li>当需要监听到项目中的一些信息，并且不需要对流程做更改时，用监听器；</li>\n<li>当需要过滤掉其中的部分信息，只留一部分时，就用过滤器；</li>\n<li>当需要对其流程进行更改，做相关的记录时用拦截器<br><img src=\"/2018/04/17/%E5%85%B3%E4%BA%8E%E7%9B%91%E5%90%AC%E5%99%A8-%E8%BF%87%E6%BB%A4%E5%99%A8-%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/1075916-20180116111547740-393799361.png\" alt=\"123\"></li>\n</ul>\n<hr>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><h3 id=\"1-过滤器放在容器结构的什么位置\"><a href=\"#1-过滤器放在容器结构的什么位置\" class=\"headerlink\" title=\"1.过滤器放在容器结构的什么位置\"></a><strong>1.过滤器放在容器结构的什么位置</strong></h3><p>过滤器放在web资源之前，可以在请求抵达它所应用的web资源(可以是一个Servlet、一个Jsp页面，甚至是一个HTML页面)之前截获进入的请求，并且在它返回到客户之前截获输出请求。Filter：用来拦截请求，处于客户端与被请求资源之间，目的是重用代码。Filter链，在web.xml中哪个先配置，哪个就先调用。在filter中也可以配置一些初始化参数。</p>\n<p>Java中的Filter 并不是一个标准的Servlet ，它不能处理用户请求，也不能对客户端生成响应。 主要用于对HttpServletRequest 进行预处理，也可以对HttpServletResponse 进行后处理，是个典型的处理链。</p>\n<h3 id=\"2-Filter-有如下几个用处\"><a href=\"#2-Filter-有如下几个用处\" class=\"headerlink\" title=\"2.Filter 有如下几个用处\"></a><strong>2.Filter 有如下几个用处</strong></h3><p>在HttpServletRequest 到达Servlet 之前，拦截客户的HttpServletRequest 。<br>根据需要检查HttpServletRequest ，也可以修改HttpServletRequest 头和数据。<br>在HttpServletResponse 到达客户端之前，拦截HttpServletResponse 。<br>根据需要检查HttpServletResponse ，可以修改HttpServletResponse 头和数据。  </p>\n<h3 id=\"3-常用的Filter-有如下几个种类\"><a href=\"#3-常用的Filter-有如下几个种类\" class=\"headerlink\" title=\"3.常用的Filter 有如下几个种类\"></a><strong>3.常用的Filter 有如下几个种类</strong></h3><p>用户授权的Filter: Filter 负责检查用户请求，根据请求过滤用户非法请求。<br>日志Filter: 详细记录某些特殊的用户请求。<br>负责解码的Filter: 包括对非标准编码的请求解码。<br>能改变XML 内容的XSLTFilter 等。  </p>\n<h3 id=\"4-创建一个Filter-只需两个步骤\"><a href=\"#4-创建一个Filter-只需两个步骤\" class=\"headerlink\" title=\"4.创建一个Filter 只需两个步骤:\"></a><strong>4.创建一个Filter 只需两个步骤:</strong></h3><ol>\n<li>创建Filter 处理类</li>\n<li>在web.xml 文件中配置Filter 。多个过滤器，从上往下以此执行<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>filtername<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 过滤器实现类 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.xxx.AbcFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>filtername<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 拦截的请求 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n创建Filter 必须实现javax.servlet.Filter 接口，在该接口中定义了三个方法。 <blockquote>\n<p>void init(FilterConfig config): 用于完成Filter 的初始化。<br>void destroy(): 用于Filter 销毁前，完成某些资源的回收。<br>void doFilter(ServletRequest request, ServletResponse response,FilterChain chain): 实现过滤功能，该方法就是对每个请求及响应增加的额外处理。</p>\n</blockquote>\n</li>\n</ol>\n<p>过滤器Filter也具有生命周期：init()-&gt;doFilter()-&gt;destroy()，由部署文件中的filter元素驱动。 </p>\n<h3 id=\"5-实现的方式有以下几类\"><a href=\"#5-实现的方式有以下几类\" class=\"headerlink\" title=\"5.实现的方式有以下几类\"></a><strong>5.实现的方式有以下几类</strong></h3><ol>\n<li>直接实现Filter，这一类过滤器只有CompositeFilter；</li>\n<li>继承抽象类GenericFilterBean，该类实现了javax.servlet.Filter，这一类的过滤器只有一个，即DelegatingFilterProxy；</li>\n<li>继承抽象类OncePerRequestFilter，该类为GenericFilterBean的直接子类，这一类过滤器包括CharacterEncodingFilter、HiddenHttpMethodFilter、HttpPutFormContentFilter、RequestContextFilter和ShallowEtagHeaderFilter；</li>\n<li>继承抽象类AbstractRequestLoggingFilter，该类为OncePerRequestFilter的直接子类，这一类过滤器包括CommonsRequestLoggingFilter、Log4jNestedDiagnosticContextFilter和ServletContextRequestLoggingFilter。</li>\n</ol>\n<hr>\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><h3 id=\"1-常见应用场景\"><a href=\"#1-常见应用场景\" class=\"headerlink\" title=\"1.常见应用场景\"></a><strong>1.常见应用场景</strong></h3><ol>\n<li>日志记录：记录请求信息的日志，以便进行信息监控、信息统计、计算PV（Page View）等。</li>\n<li>权限检查：如登录检测，进入处理器检测检测是否登录，如果没有直接返回到登录页面；</li>\n<li>性能监控：有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间（如果有反向代理，如apache可以自动记录）；</li>\n<li>通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有如提取Locale、Theme信息等，只要是多个处理器都需要的即可使用拦截器实现。</li>\n<li>OpenSessionInView：如Hibernate，在进入处理器打开Session，在完成后关闭Session。</li>\n</ol>\n<h3 id=\"2-实现方式\"><a href=\"#2-实现方式\" class=\"headerlink\" title=\"2.实现方式\"></a><strong>2.实现方式</strong></h3><ol>\n<li>第一种方式是要定义的Interceptor类要实现了Spring 的HandlerInterceptor 接口，或者是这个类继承实现了HandlerInterceptor 接口的类，比如Spring 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter ；</li>\n<li>第二种方式是实现Spring的WebRequestInterceptor接口，或者是继承实现了WebRequestInterceptor的类。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringMVCInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * preHandle方法是进行处理器拦截用的，顾名思义，该方法将在Controller处理之前进行调用，SpringMVC中的Interceptor拦截器是链式的，可以同时存在 </span></span><br><span class=\"line\"><span class=\"comment\">     * 多个Interceptor，然后SpringMVC会根据声明的前后顺序一个接一个的执行，而且所有的Interceptor中的preHandle方法都会在 </span></span><br><span class=\"line\"><span class=\"comment\">     * Controller方法调用之前调用。SpringMVC的这种Interceptor链式结构也是可以进行中断的，这种中断方式是令preHandle的返 </span></span><br><span class=\"line\"><span class=\"comment\">     * 回值为false，当preHandle的返回值为false的时候整个请求就结束了。 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request,  </span></span><br><span class=\"line\"><span class=\"params\">            HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之 </span></span><br><span class=\"line\"><span class=\"comment\">     * 后，也就是在Controller的方法调用之后执行，但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操 </span></span><br><span class=\"line\"><span class=\"comment\">     * 作。这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用，这跟Struts2里面的拦截器的执行过程有点像， </span></span><br><span class=\"line\"><span class=\"comment\">     * 只是Struts2里面的intercept方法中要手动的调用ActionInvocation的invoke方法，Struts2中调用ActionInvocation的invoke方法就是调用下一个Interceptor </span></span><br><span class=\"line\"><span class=\"comment\">     * 或者是调用action，然后要在Interceptor之前调用的内容都写在调用invoke之前，要在Interceptor之后调用的内容都写在调用invoke方法之后。 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request,  </span></span><br><span class=\"line\"><span class=\"params\">            HttpServletResponse response, Object handler,  </span></span><br><span class=\"line\"><span class=\"params\">            ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行， </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法的主要作用是用于清理资源的，当然这个方法也只能在当前这个Interceptor的preHandle方法的返回值为true时才会执行。 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request,  </span></span><br><span class=\"line\"><span class=\"params\">            HttpServletResponse response, Object handler, Exception ex)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AllInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebRequestInterceptor</span> &#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 在请求处理之前执行，该方法主要是用于准备资源数据的，然后可以把它们当做请求属性放到WebRequest中 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(WebRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;AllInterceptor...............................&quot;</span>);  </span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;request&quot;</span>, <span class=\"string\">&quot;request&quot;</span>, WebRequest.SCOPE_REQUEST);<span class=\"comment\">//这个是放到request范围内的，所以只能在当前请求中的request中获取到  </span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;session&quot;</span>, <span class=\"string\">&quot;session&quot;</span>, WebRequest.SCOPE_SESSION);<span class=\"comment\">//这个是放到session范围内的，如果环境允许的话它只能在局部的隔离的会话中访问，否则就是在普通的当前会话中可以访问  </span></span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">&quot;globalSession&quot;</span>, <span class=\"string\">&quot;globalSession&quot;</span>, WebRequest.SCOPE_GLOBAL_SESSION);<span class=\"comment\">//如果环境允许的话，它能在全局共享的会话中访问，否则就是在普通的当前会话中访问  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法将在Controller执行之后，返回视图之前执行，ModelMap表示请求Controller处理之后返回的Model对象，所以可以在 </span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法中修改ModelMap的属性，从而达到改变返回的模型的效果。 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(WebRequest request, ModelMap map)</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key:map.keySet())  </span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">&quot;-------------------------&quot;</span>);;  </span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name3&quot;</span>, <span class=\"string\">&quot;value3&quot;</span>);  </span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;name1&quot;</span>, <span class=\"string\">&quot;name1&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法将在整个请求完成之后，也就是说在视图渲染之后进行调用，主要用于进行一些资源的释放 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(WebRequest request, Exception exception)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">        System.out.println(exception + <span class=\"string\">&quot;-=-=--=--=-=-=-=-=-=-=-=-==-=--=-=-=-=&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用mvc-interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器\"><a href=\"#3-使用mvc-interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器\" class=\"headerlink\" title=\"3.使用mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器\"></a><strong>3.使用mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器</strong></h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span>  </span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.xxx.web.interceptor.AllInterceptor&quot;</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义拦截的请求 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span>/&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义不需要拦截的请求 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:exclude-mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/login/*&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.xxx.web.interceptor.LoginInterceptor&quot;</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h2><p>在java web项目中我们通常会有这样的需求：当项目启动时执行一些初始化操作，例如从数据库加载全局配置文件等，通常情况下我们会用javaee规范中的Listener去实现</p>\n<p>常用的监听器有spring的ContextLoaderListener  或者logback</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/spring-application.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>ch.qos.logback.ext.spring.web.LogbackConfigListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>logbackConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:logback.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n<hr>\n","categories":[],"tags":["spring"]},{"title":"设计模式总结","url":"https://zhangyaxiao.github.io/2018/04/09/设计模式总结/","content":"<h1 id=\"设计模式总结\"><a href=\"#设计模式总结\" class=\"headerlink\" title=\"设计模式总结\"></a>设计模式总结</h1><hr>\n<h2 id=\"如何正确的使用设计模式\"><a href=\"#如何正确的使用设计模式\" class=\"headerlink\" title=\"如何正确的使用设计模式\"></a>如何正确的使用设计模式</h2><blockquote>\n<p>设计模式是为了封装变化，让各个模块可以独立变化。精准地使用设计模式的前提是你能够精准的预测需求变更的走向。我们都知道大部分人是做不到的，所以大部分人就算精通设计模式也多少会做错点什么东西。</p>\n<p>所以说如何避免过度设计，这就要求你深入的理解你的程序所在的领域的知识，了解用户使用你的软件是为了解决什么问题，这样你预测用户的需求才会比以前更加准确，从而避免了你使用设计模式来封装一些根本不会发生的变化，也避免了你忽视了未来会发生的变化从而发现你使用的模式根本不能适应需求的新走向。</p>\n<p>所以，在你满足了【知道所有设计模式为什么要被发明出来】的前提之后，剩下的其实都跟编程没关系，而跟你的领域知识和领域经验有关系。</p>\n</blockquote>\n<hr>\n<h2 id=\"具体设计模式\"><a href=\"#具体设计模式\" class=\"headerlink\" title=\"具体设计模式\"></a>具体设计模式</h2><h3 id=\"一-创建型模式\"><a href=\"#一-创建型模式\" class=\"headerlink\" title=\"一.创建型模式\"></a>一.创建型模式</h3><ol>\n<li><strong><a href=\"/2018/03/27/设计模式之工厂模式/\">工厂方法模式</a></strong> <blockquote>\n<p>我们明确地计划不同条件下创建不同实例时可以使用工厂方法模式</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/03/27/设计模式之工厂模式/\">抽象工厂方法模式</a></strong><blockquote>\n<p>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。抽象工厂模式可以提供一个创建一系列相关或相互依赖的接口，而无需指定它们具体的类。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/03/27/设计模式之单例模式/\">单例模式</a></strong><blockquote>\n<p>一个全局使用的对象，当你想控制实例数目，节省系统资源时，使用单例模式可以保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n</blockquote>\n</li>\n<li><strong>建造者模式</strong><blockquote>\n<p>当”一个复杂对象”需要创建时，建造者模式使用多个简单的对象一步一步构建成一个复杂的对象。</p>\n</blockquote>\n</li>\n<li><strong>原型模式</strong><blockquote>\n<p>利用已有的一个原型对象，快速地生成和原型对象一样的实例</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"二-结构型模式\"><a href=\"#二-结构型模式\" class=\"headerlink\" title=\"二.结构型模式\"></a>二.结构型模式</h3><ol>\n<li><strong><a href=\"/2018/03/28/设计模式之适配器与外观模式/\">适配器模式</a></strong><blockquote>\n<p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/03/22/设计模式之装饰模式/\">装饰模式</a></strong><blockquote>\n<p>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/04/02/设计模式之代理模式/\">代理模式</a></strong><blockquote>\n<p>为其他对象提供一种代理以控制对这个对象的访问。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/03/28/设计模式之适配器与外观模式/\">外观模式</a></strong><blockquote>\n<p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>\n</blockquote>\n</li>\n<li><strong>桥接模式</strong><blockquote>\n<p>将抽象部分与实现部分分离，使它们都可以独立的变化。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/04/02/设计模式之迭代器和组合模式/\">组合模式</a></strong><blockquote>\n<p>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n</blockquote>\n</li>\n<li><strong>享元模式</strong><blockquote>\n<p>运用共享技术有效地支持大量细粒度的对象。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"三-行为型模式\"><a href=\"#三-行为型模式\" class=\"headerlink\" title=\"三.行为型模式\"></a>三.行为型模式</h3><ol>\n<li><strong><a href=\"/2017/10/19/设计模式之策略模式/\">策略模式</a></strong><blockquote>\n<p>封装可以互换的行为，并使用委托决定使用哪一个 </p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/03/29/设计模式之模板方法模式/\">模版方法模式</a></strong><blockquote>\n<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/03/22/设计模式之观察者模式/\">观察者模式</a></strong><blockquote>\n<p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/04/02/设计模式之迭代器和组合模式/\">迭代模式</a></strong><blockquote>\n<p>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</p>\n</blockquote>\n</li>\n<li><strong>责任链模式</strong><blockquote>\n<p>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/03/28/设计模式之命令模式/\">命令模式</a></strong><blockquote>\n<p>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p>\n</blockquote>\n</li>\n<li><strong>备忘录模式</strong><blockquote>\n<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p>\n</blockquote>\n</li>\n<li><strong><a href=\"/2018/04/02/设计模式之状态模式/\">状态模式</a></strong><blockquote>\n<p>允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p>\n</blockquote>\n</li>\n<li><strong>访问者模式</strong><blockquote>\n<p>主要将数据结构与数据操作分离。</p>\n</blockquote>\n</li>\n<li><strong>中介模式</strong><blockquote>\n<p>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n</blockquote>\n</li>\n<li><strong>解释器模式</strong><blockquote>\n<p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h2 id=\"设计模式的原则\"><a href=\"#设计模式的原则\" class=\"headerlink\" title=\"设计模式的原则\"></a>设计模式的原则</h2><ol>\n<li><p><strong>单一职责原则</strong><br>不要存在多于一个导致类变更的原因，也就是说<strong>每个类应该实现单一的职责</strong>，否则就应该把类拆分。</p>\n</li>\n<li><p><strong>里氏替换原则</strong><br>它表示我们可以在代码中使用<strong>任意子类来替代父类并且程序不受影响</strong>，这样可以保证我们使用“继承”并没有破坏父类。<br>任何基类可以出现的地方，子类一定可以出现。里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。<br>里氏代换原则是对“开-闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。  </p>\n</li>\n<li><p><strong>依赖倒置原则</strong><br>高层模块不应该依赖于低层模块，两者应该都依赖于抽象；抽象不依赖于细节，而细节应该依赖于抽象。这里主要是提倡“面向接口”编程，而非“面向实现”编程。<br>面向接口编程，依赖于抽象而不依赖于具体。<strong>写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</strong>  </p>\n</li>\n<li><p><strong>接口隔离原则</strong><br>每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。<br>客户端不应该依赖于它不需要的接口，两个类之间的依赖应该建立在最小接口的基础上。<strong>这条原则的目的是为了让那些使用相同接口的类只需要实现特定必要的一组方法，而不是大量没用的方法。</strong>  </p>\n</li>\n<li><p><strong>迪米特法则（最少知道原则）</strong><br>一个对象应该对其他对象保持最少的了解。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。<br><strong>一个类对自己依赖的类知道的越少越好。无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</strong><br>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。  </p>\n</li>\n<li><p><strong>合成复用原则</strong><br><strong>尽量首先使用合成/聚合的方式，而不是使用继承。</strong></p>\n</li>\n</ol>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之代理模式","url":"https://zhangyaxiao.github.io/2018/04/02/设计模式之代理模式/","content":"<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><p>代理模式提供了对目标对象另外的访问方式，以控制对这个对象的访问；即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</p>\n<p><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/代理类图.gif\" alt=\"代理类图\"></p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>代理模式为另一个对象提供代表，以便控制客户对对象的访问，管理访问的方式有许多种</li>\n<li>代理在结构上类似装饰者，但是目的不同</li>\n<li>装饰者模式为对象加上行为，而代理则是控制访问</li>\n</ul>\n<blockquote>\n<p>装饰者——包装另一个对象，并提供额外的行为<br>外观——包装许多对象以简化它们的接口<br>代理——包装另一个对象，并控制对它的访问<br>适配器——包装另一个对象，并提供不同的接口</p>\n</blockquote>\n<hr>\n<h1 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h1><p>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类.  </p>\n<p>代码示例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IUserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDao</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----已经保存数据!----&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象,静态代理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserDao</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接收保存目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IUserDao target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserDaoProxy</span><span class=\"params\">(IUserDao target)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target=target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始事务...&quot;</span>);</span><br><span class=\"line\">        target.save();<span class=\"comment\">//执行目标对象的方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//目标对象</span></span><br><span class=\"line\">        <span class=\"type\">UserDao</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDao</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//代理对象,把目标对象传给代理对象,建立代理关系</span></span><br><span class=\"line\">        <span class=\"type\">UserDaoProxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDaoProxy</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy.save();<span class=\"comment\">//执行的是代理的方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>总结</p>\n<ol>\n<li>可以做到在不修改目标对象的功能前提下,对目标功能扩展</li>\n<li>因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护.</li>\n</ol>\n<hr>\n<h1 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h1><ul>\n<li><strong>代理对象必须实现接口</strong></li>\n<li>代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象，可以通过java.lang.reflect.Proxy 的 static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</li>\n</ul>\n<p>代理工厂类:ProxyFactory.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用Proxy </span></span><br><span class=\"line\"><span class=\"comment\"> * 创建动态代理对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态代理不需要实现接口,但是需要指定接口类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//维护一个目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxyFactory</span><span class=\"params\">(Object target)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target=target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//给目标对象生成代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxyInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;开始事务2&quot;</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//执行目标对象方法</span></span><br><span class=\"line\">                        <span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;提交事务2&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDao</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 【原始的类型 class cn.itcast.b_dynamic.UserDao】</span></span><br><span class=\"line\">        System.out.println(target.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 给目标对象，创建代理对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (IUserDao) <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>(target).getProxyInstance();</span><br><span class=\"line\">        <span class=\"comment\">// class $Proxy0   内存中动态生成的代理对象</span></span><br><span class=\"line\">        System.out.println(proxy.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行方法   【代理对象】</span></span><br><span class=\"line\">        proxy.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"Cglib代理\"><a href=\"#Cglib代理\" class=\"headerlink\" title=\"Cglib代理\"></a>Cglib代理</h1><ul>\n<li>Cglib代理,也叫作子类代理,它是<strong>在内存中构建一个子类对象</strong>从而实现对目标对象功能的扩展.</li>\n<li>Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)</li>\n<li>Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标对象,没有实现任何接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----已经保存数据!----&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Cglib代理工厂:ProxyFactory.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Cglib子类代理工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * 对UserDao在内存中动态构建一个子类对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//维护目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxyFactory</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//给目标对象创建一个代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxyInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.工具类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">en</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">//2.设置父类</span></span><br><span class=\"line\">        en.setSuperclass(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//3.设置回调函数</span></span><br><span class=\"line\">        en.setCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//4.创建子类(代理对象)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> en.create();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始事务...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行目标对象的方法</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//目标对象</span></span><br><span class=\"line\">        <span class=\"type\">UserDao</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDao</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//代理对象</span></span><br><span class=\"line\">        <span class=\"type\">UserDao</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (UserDao)<span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>(target).getProxyInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行代理对象的方法</span></span><br><span class=\"line\">        proxy.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之状态模式","url":"https://zhangyaxiao.github.io/2018/04/02/设计模式之状态模式/","content":"<h1 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h1><p>状态模式允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/状态类图.gif\" alt=\"状态类图\"><br>state是状态接口，所有的状态都实现它。<br>Context 是一个环境角色，它的作用是串联各个状态的过渡</p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>状态模式允许一个对象基于内部状态而拥有不同的行为</li>\n<li>状态模式用类代表状态</li>\n<li>Context会将行为委托给当前状态对象</li>\n<li>通过将每个状态封装进一个类，我们把以后需要做的任何改变局部化了</li>\n<li>状态模式和策略模式有相同的类图，但是他们的意图不同</li>\n<li>策略模式通常会用行为或算法来配置Context类</li>\n<li>状态模式允许Context随着状态的改变而改变行为</li>\n<li>状态转换可以由State类 或 Context类 控制</li>\n<li>使用状态模式通常会导致设计中类的数目大量增加</li>\n<li>状态类可以被多个Context实例共享。</li>\n</ul>\n<blockquote>\n<p>状态——封装基于状态的行为，并将行为委托到当前状态<br>策略——将可以互换的行为封装起来，然后使用委托的方法，决定使用哪一个行为<br>模板——由子类决定如何实现算法中的某些步骤</p>\n</blockquote>\n<hr>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>转载 <a href=\"https://blog.csdn.net/u012401711/article/details/52675873\">https://blog.csdn.net/u012401711/article/details/52675873</a></p>\n<p>描述：现在城市发展很快，百万级人口的城市一堆一堆的，那其中有两个东西的发明在城市的发展中起到非常重要的作用：一个是汽车，一个呢是…，猜猜看，是什么？是电梯！汽车让城市可以横向扩展，电梯让城市可以纵向延伸，向空中伸展。汽车对城市的发展我们就不说了，电梯，你想想看，如果没有电梯，每天你需要爬10 层楼梯，你是不是会崩溃掉？建筑师设计了一个没有电梯的建筑，那投资家肯定不愿意投资，那也是建筑师的耻辱呀，今天我们就用程序表现一下这个电梯是怎么运作的。  </p>\n<p>我们每天都在乘电梯，那我们来看看电梯有哪些动作（映射到Java 中就是有多少方法）:开门、关门、运行、停止，就这四个动作，好，我们就用程序来实现一下电梯的动作，先看类图设计：</p>\n<p><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/状态1.png\" alt=\"状态1\"><br>非常简单的类图，定义一个接口，然后是一个实现类，然后业务类Client 就可以调用，并运行起来，简单也来看看我们的程序,先看接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 定义一个电梯的接口 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ILift</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//首先电梯门开启动作  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门有开启，那当然也就有关闭了  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯要能上能下，跑起来  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯还要能停下来，停不下来那就扯淡了  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 电梯的实现类 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Lift</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ILift</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门关闭  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门关闭...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门开启  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门开启...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯开始跑起来  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯上下跑起来...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯停止  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯停止了...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>电梯的开、关、跑、停都实现了，开看业务是怎么调用的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 模拟电梯的动作 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">ILift</span> <span class=\"variable\">lift</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Lift</span>();  </span><br><span class=\"line\">        <span class=\"comment\">//首先是电梯门开启，人进去  </span></span><br><span class=\"line\">        lift.open();  </span><br><span class=\"line\">        <span class=\"comment\">//然后电梯门关闭  </span></span><br><span class=\"line\">        lift.close();  </span><br><span class=\"line\">        <span class=\"comment\">//再然后，电梯跑起来，向上或者向下  </span></span><br><span class=\"line\">        lift.run();  </span><br><span class=\"line\">        <span class=\"comment\">//最后到达目的地，电梯挺下来  </span></span><br><span class=\"line\">        lift.stop();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>运行的结果如下：</p>\n<blockquote>\n<p>电梯门开启…<br>电梯门关闭…<br>电梯上下跑起来…<br>电梯停止了…</p>\n</blockquote>\n<p>太简单的程序了，是个程序员都会写这个程序，这么简单的程序还拿出来show，是不是太小看我们的智商了？！非也，非也，我们继续往下分析，这个程序有什么问题，你想呀电梯门可以打开，但不是随时都可以开，是有前提条件的的，你不可能电梯在运行的时候突然开门吧？！电梯也不会出现停止了但是不开门的情况吧？！那要是有也是事故嘛，再仔细想想，电梯的这四个动作的执行都是有前置条件，具体点说说在特定状态下才能做特定事，那我们来分析一下电梯有什么那些特定状态：<br>门敞状态—按了电梯上下按钮，电梯门开，这中间有5 秒的时间（当然你也可以用身体挡住电梯门，那就不是5 秒了），那就是门敞状态；在这个状态下电梯只能做的动作是关门动作，做别的动作？那就危险喽<br>门闭状态—电梯门关闭了，在这个状态下，可以进行的动作是：开门（我不想坐电梯了）、停止（忘记按路层号了）、运行<br>运行状态—电梯正在跑，上下窜，在这个状态下，电梯只能做的是停止；<br>停止状态—电梯停止不动，在这个状态下，电梯有两个可选动作：继续运行和开门动作；<br>我们用一张表来表示电梯状态和动作之间的关系：<br><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/状态2.png\" alt=\"状态2\"><br>电梯状态和动作对应表（○表示不允许，☆表示允许动作）<br>看到这张表后，我们才发觉，哦~~，我们的程序做的很不严谨，好，我们来修改一下，先看类图：<br><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/状态3.png\" alt=\"状态3\"><br>在接口中定义了四个常量，分别表示电梯的四个状态：门敞状态、关闭状态、运行状态、停止状态，然后在实现类中电梯的每一次动作发生都要对状态进行判断，判断是否运行执行，也就是动作的执行是否符合业务逻辑，实现类中的四个私有方法是仅仅实现电梯的动作，没有任何的前置条件，因此这四个方法是不能为外部类调用的，设置为私有方法。我们先看接口的改变：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 定义一个电梯的接口 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ILift</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯的四个状态  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">OPENING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">//门敞状态  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">CLOSING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; <span class=\"comment\">//门闭状态  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; <span class=\"comment\">//运行状态  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">STOPPING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>; <span class=\"comment\">//停止状态；  </span></span><br><span class=\"line\">    <span class=\"comment\">//设置电梯的状态  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(<span class=\"type\">int</span> state)</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//首先电梯门开启动作  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门有开启，那当然也就有关闭了  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯要能上能下，跑起来  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯还要能停下来，停不下来那就扯淡了  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>增加了四个静态常量，增加了一个方法setState，设置电梯的状态。我们再来看实现类是如何实现的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 电梯的实现类 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Lift</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ILift</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> state;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(<span class=\"type\">int</span> state)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = state;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门关闭  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//电梯在什么状态下才能关闭  </span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"built_in\">this</span>.state)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE: <span class=\"comment\">//如果是则可以关门，同时修改电梯状态  </span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.closeWithoutLogic();  </span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(CLOSING_STATE);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> CLOSING_STATE: <span class=\"comment\">//如果电梯就是关门状态，则什么都不做  </span></span><br><span class=\"line\">            <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> RUNNING_STATE: <span class=\"comment\">//如果是正在运行，门本来就是关闭的，也说明都不做  </span></span><br><span class=\"line\">            <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> STOPPING_STATE: <span class=\"comment\">//如果是停止状态，本也是关闭的，什么也不做  </span></span><br><span class=\"line\">            <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门开启  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//电梯在什么状态才能开启  </span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"built_in\">this</span>.state)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE: <span class=\"comment\">//如果已经在门敞状态，则什么都不做  </span></span><br><span class=\"line\">           <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">           <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">           <span class=\"keyword\">case</span> CLOSING_STATE: <span class=\"comment\">//如是电梯时关闭状态，则可以开启  </span></span><br><span class=\"line\">           <span class=\"built_in\">this</span>.openWithoutLogic();  </span><br><span class=\"line\">           <span class=\"built_in\">this</span>.setState(OPENING_STATE);  </span><br><span class=\"line\">           <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">           <span class=\"keyword\">case</span> RUNNING_STATE: <span class=\"comment\">//正在运行状态，则不能开门，什么都不做  </span></span><br><span class=\"line\">           <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">           <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">           <span class=\"keyword\">case</span> STOPPING_STATE: <span class=\"comment\">//停止状态，淡然要开门了  </span></span><br><span class=\"line\">           <span class=\"built_in\">this</span>.openWithoutLogic();  </span><br><span class=\"line\">           <span class=\"built_in\">this</span>.setState(OPENING_STATE);  </span><br><span class=\"line\">           <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯开始跑起来  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"built_in\">this</span>.state)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE: <span class=\"comment\">//如果已经在门敞状态，则不你能运行，什么都不做  </span></span><br><span class=\"line\">            <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> CLOSING_STATE: <span class=\"comment\">//如是电梯时关闭状态，则可以运行  </span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.runWithoutLogic();  </span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(RUNNING_STATE);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> RUNNING_STATE: <span class=\"comment\">//正在运行状态，则什么都不做  </span></span><br><span class=\"line\">            <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> STOPPING_STATE: <span class=\"comment\">//停止状态，可以运行  </span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.runWithoutLogic();  </span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(RUNNING_STATE);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯停止  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"built_in\">this</span>.state)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE: <span class=\"comment\">//如果已经在门敞状态，那肯定要先停下来的，什么都不做  </span></span><br><span class=\"line\">            <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> CLOSING_STATE: <span class=\"comment\">//如是电梯时关闭状态，则当然可以停止了  </span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.stopWithoutLogic();  </span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(CLOSING_STATE);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> RUNNING_STATE: <span class=\"comment\">//正在运行状态，有运行当然那也就有停止了  </span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.stopWithoutLogic();  </span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setState(CLOSING_STATE);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">case</span> STOPPING_STATE: <span class=\"comment\">//停止状态，什么都不做  </span></span><br><span class=\"line\">            <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//纯粹的电梯关门，不考虑实际的逻辑  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeWithoutLogic</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门关闭...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//纯粹的店门开，不考虑任何条件  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">openWithoutLogic</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门开启...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//纯粹的运行，不考虑其他条件  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runWithoutLogic</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯上下跑起来...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//单纯的停止，不考虑其他条件  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stopWithoutLogic</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯停止了...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>程序有点长，但是还是很简单的，就是在每一个接口定义的方法中使用witch…case 来进行判断，是否运行运行指定的动作。我们来Client 程序的变更：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 模拟电梯的动作 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">ILift</span> <span class=\"variable\">lift</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Lift</span>();  </span><br><span class=\"line\">        <span class=\"comment\">//电梯的初始条件应该是停止状态  </span></span><br><span class=\"line\">        lift.setState(ILift.STOPPING_STATE);  </span><br><span class=\"line\">        <span class=\"comment\">//首先是电梯门开启，人进去  </span></span><br><span class=\"line\">        lift.open();  </span><br><span class=\"line\">        <span class=\"comment\">//然后电梯门关闭  </span></span><br><span class=\"line\">        lift.close();  </span><br><span class=\"line\">        <span class=\"comment\">//再然后，电梯跑起来，向上或者向下  </span></span><br><span class=\"line\">        lift.run();  </span><br><span class=\"line\">        <span class=\"comment\">//最后到达目的地，电梯挺下来  </span></span><br><span class=\"line\">        lift.stop();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>业务调用的方法中增加了电梯状态判断，电梯要开门不是随时都可以开的，必须满足了一定条件你才能开门，人才能走进去，我们设置电梯的起始是停止状态，看运行结果：</p>\n<blockquote>\n<p>电梯门开启…<br>电梯门关闭…<br>电梯上下跑起来…<br>电梯停止了…</p>\n</blockquote>\n<p>我们来想一下，这段程序有什么问题，首先Lift.java 这个文件有点长，长的原因是我们在程序中使用了大量的switch…case 这样的判断（if…else 也是一样），程序中只要你有这样的判断就避免不了加长程序，同步的在业务比较复杂的情况下，程序体会更长，这个就不是一个很好的习惯了，较长的方法或者类的维护性比较差，毕竟程序是给人来阅读的；其次，扩展性非常的不好，大家来想想，电梯还有两个状态没有加，是什么？通电状态和断电状态，你要是在程序再增加这两个方法，你看看Open()、Close()、Run()、Stop()这四个方法都要增加判断条件，也就是说switch 判断体中还要增加case 项，也就说与开闭原则相违背了；再其次，我们来思考我们的业务，电梯在门敞开状态下就不能上下跑了吗？电梯有没有发生过只有运行没有停止状态呢（从40 层直接坠到1 层嘛）？电梯故障嘛，还有电梯在检修的时候，可以在stop状态下不开门，这也是正常的业务需求呀，你想想看，如果加上这些判断条件，上面的程序有多少需要修改？虽然这些都是电梯的业务逻辑，但是一个类有且仅有一个原因引起类的变化，单一职责原则，看看我们的类，业务上的任务一个小小增加或改动都对我们的这个电梯类产生了修改，这是在项目开发上是有很大风险的。既然我们已经发现程序上有以上问题，我们怎么来修改呢？<br>刚刚我们是从电梯的有哪些方法以及这些方法执行的条件去分析，现在我们换个角度来看问题，我们来想电梯在具有这些状态的时候，能够做什么事情，也就是说在电梯处于一个具体状态时，我们来思考这个状态是由什么动作触发而产生以及在这个状态下电梯还能做什么事情，举个例子来说，电梯在停止状态时，我们来思考两个问题：  </p>\n<ol>\n<li>这个停止状态时怎么来的，那当然是由于电梯执行了stop 方法而来的；</li>\n<li>第二、在停止状态下，电梯还能做什么动作?继续运行？开门？那当然都可以了。</li>\n</ol>\n<p>我们再来分析其他三个状态，也都是一样的结果，我们只要实现电梯在一个状态下的两个任务模型就可以了：这个状态是如何产生的以及在这个状态下还能做什么其他动作（也就是这个状态怎么过渡到其他状态），既然我们以状态为参考模型，那我们就先定义电梯的状态接口，思考过后我们来看类图：<br><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/状态4.png\" alt=\"状态4\"></p>\n<p>在类图中，定义了一个LiftState 抽象类，声明了一个受保护的类型Context 变量，这个是串联我们各个状态的封装类，封装的目的很明显，就是电梯对象内部状态的变化不被调用类知晓，也就是迪米特法则了，我的类内部情节你知道越少越好，并且还定义了四个具体的实现类，承担的是状态的产生以及状态间的转换过渡，我们先来看LiftState 程序:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 定义一个电梯的接口 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiftState</span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//定义一个环境角色，也就是封装状态的变换引起的功能变化  </span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Context context;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContext</span><span class=\"params\">(Context _context)</span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.context = _context;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//首先电梯门开启动作  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门有开启，那当然也就有关闭了  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯要能上能下，跑起来  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯还要能停下来，停不下来那就扯淡了  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>抽象类比较简单，我们来先看一个具体的实现，门敞状态的实现类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> cbf4Life cbf4life@126.com </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 在电梯门开启的状态下能做什么事情 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenningState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//开启当然可以关闭了，我就想测试一下电梯门开关功能  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//状态修改  </span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.closeingState);  </span><br><span class=\"line\">        <span class=\"comment\">//动作委托为CloseState来执行  </span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().close();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//打开电梯门  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门开启...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//门开着电梯就想跑，这电梯，吓死你！  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//开门还不停止？  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StoppingState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//停止状态关门？电梯门本来就是关着的！  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//do nothing;  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//停止状态，开门，那是要的！  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.openningState);  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().open();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//停止状态再跑起来，正常的很  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.runningState);  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().run();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//停止状态是怎么发生的呢？当然是停止方法执行了  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯停止了...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunningState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门关闭？这是肯定了  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//do nothing  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//运行的时候开电梯门？你疯了！电梯不会给你开的  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//do nothing  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//这是在运行状态下要实现的方法  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯上下跑...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//这个事绝对是合理的，光运行不停止还有谁敢做这个电梯？！估计只有上帝了  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.stoppingState); <span class=\"comment\">//环境设置为停止状态；  </span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().stop();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClosingState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门关闭，这是关闭状态要实现的动作  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门关闭...&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门关了再打开，逗你玩呢，那这个允许呀  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.openningState); <span class=\"comment\">//置为门敞状态  </span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().open();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门关了就跑，这是再正常不过了  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.runningState); <span class=\"comment\">//设置为运行状态；  </span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().run();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//电梯门关着，我就不按楼层  </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.stoppingState); <span class=\"comment\">//设置为停止状态；  </span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().stop();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>我们再看看Context 类就可能好理解一点：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//定义出所有的电梯状态  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">OpenningState</span> <span class=\"variable\">openningState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OpenningState</span>();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">ClosingState</span> <span class=\"variable\">closeingState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClosingState</span>();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">RunningState</span> <span class=\"variable\">runningState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RunningState</span>();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">StoppingState</span> <span class=\"variable\">stoppingState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StoppingState</span>();  </span><br><span class=\"line\">    <span class=\"comment\">//定一个当前电梯状态  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiftState liftState;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiftState <span class=\"title function_\">getLiftState</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> liftState;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLiftState</span><span class=\"params\">(LiftState liftState)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState = liftState;  </span><br><span class=\"line\">        <span class=\"comment\">//把当前的环境通知到各个实现类中  </span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.setContext(<span class=\"built_in\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.open();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.close();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.run();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.stop();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>结合以上三个类，我们可以这样理解，Context 是一个环境角色，它的作用是串联各个状态的过渡，在LiftSate 抽象类中我们定义了并把这个环境角色聚合进来，并传递到了子类，也就是四个具体的实现类中自己根据环境来决定如何进行状态的过渡。</p>\n<p>业务逻辑都已经实现了，我们来测试下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> gumx </span></span><br><span class=\"line\"><span class=\"comment\">* I&#x27;m glad to share my knowledge with you all. </span></span><br><span class=\"line\"><span class=\"comment\">* 模拟电梯的动作 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Context</span>();  </span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> <span class=\"title class_\">ClosingState</span>());  </span><br><span class=\"line\">        context.open();  </span><br><span class=\"line\">        context.close();  </span><br><span class=\"line\">        context.run();  </span><br><span class=\"line\">        context.stop();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure><br>看运行结果：</p>\n<blockquote>\n<p>电梯门开启…<br>电梯门关闭…<br>电梯上下跑起来…<br>电梯停止了…</p>\n</blockquote>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之迭代器和组合模式","url":"https://zhangyaxiao.github.io/2018/04/02/设计模式之迭代器和组合模式/","content":"<h1 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h1><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/迭代器类图.gif\" alt=\"迭代器类图\"><br>Iterator是迭代器的接口。<br>Aggregate 是创建迭代器的接口，所有想使用迭代器遍历内部元素的类，都需要实现它来创建迭代器。  </p>\n<p>ConcreateAggregate是一个集合类，希望可以通过迭代器来遍历内部元素<br>ConcreateAggregate 实现了 Aggregate 接口，来创建 ConcreateIterator 迭代器<br>ConcreateAggregate 建立内部类 ConcreateIterator来实现 Iterator的相关接口  </p>\n<hr>\n<h1 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h1><p>组合模式允许你将对象组合成树形结构来表现 “整体/部分” 层次结构。组合能让客户以一致的方式处理个别对象以及对象组合</p>\n<h2 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/组合类图.gif\" alt=\"组合类图\"></p>\n<p>// TODO</p>\n<hr>\n<h1 id=\"要点：\"><a href=\"#要点：\" class=\"headerlink\" title=\"要点：\"></a>要点：</h1><ul>\n<li>迭代器允许访问聚合的元素，而不需要暴露它的内部结构</li>\n<li>迭代器将遍历聚合的工作封装进一个对象中</li>\n<li>当使用迭代器的时候，我们依赖聚合提供遍历</li>\n<li>迭代器提供了一个通用的接口，让我们遍历聚合的项，当我们编码使用聚合的项时，就可以使用多态机制</li>\n<li>我们应该努力让一个类只分配一个责任</li>\n<li>组合模式提供一个结构，可同时包容个别对象和组合对象</li>\n<li>组合模式允许客户对个别对象已经组合对象一视同仁</li>\n<li>组合结构内的任意对象称为组件，组件可以是组合，也可以是叶子节点</li>\n<li>在实现组合模式时，有许多设计上的折中。你要根据需要平衡透明性和安全性</li>\n</ul>\n<blockquote>\n<p>策略——封装可以互换的行为，并使用委托决定使用哪一个<br>适配器——改变一个或多个类的接口<br>外观——简化一群类的接口<br>观察者——当某个状态改变时，允许一群对象能被通知到<br>迭代器——提供一个方式来遍历集合，而无需暴露集合的实现<br>组合——客户可以将对象的集合以及个别的对象一视同仁</p>\n</blockquote>\n<hr>\n<h2 id=\"迭代器例子\"><a href=\"#迭代器例子\" class=\"headerlink\" title=\"迭代器例子\"></a>迭代器例子</h2><p>使用迭代器模式来遍历集合和数组</p>\n<p>首先建立迭代器接口，和返回迭代器的Container 接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Iterator</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Object <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Iterator <span class=\"title function_\">getIterator</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>然后自定义一个聚集类，内部使用数组实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameRepository</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> String names[] = &#123;<span class=\"string\">&quot;Robert&quot;</span> , <span class=\"string\">&quot;John&quot;</span> ,<span class=\"string\">&quot;Julie&quot;</span> , <span class=\"string\">&quot;Lora&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Iterator <span class=\"title function_\">getIterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NameIterator</span>();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameIterator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> index;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(index &lt; names.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> names[index++];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;        </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>使用迭代器遍历聚集类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IteratorPatternDemo</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">NameRepository</span> <span class=\"variable\">namesRepository</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NameRepository</span>();</span><br><span class=\"line\">      <span class=\"type\">Iterator</span> <span class=\"variable\">iter</span> <span class=\"operator\">=</span> namesRepository.getIterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (iter.hasNext())&#123;</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> (String)iter.next();</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Name : &quot;</span> + name);</span><br><span class=\"line\">      &#125;     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"组合例子\"><a href=\"#组合例子\" class=\"headerlink\" title=\"组合例子\"></a>组合例子</h2><hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之模板方法模式","url":"https://zhangyaxiao.github.io/2018/03/29/设计模式之模板方法模式/","content":"<h1 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h1><p>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/模板类图.gif\" alt=\"模板类图\"></p>\n<p>AbstractClass是抽象类，TemplateMethod()是具体的业务方法。<br>每个子类的需要重写PrimitiveOperation1() 和 PrimitiveOperation2()</p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>模板方法定义了算法的步骤，把这些步骤的实现延迟到子类</li>\n<li>模板方法模式为我们提供了一种代码复用的重要技能</li>\n<li>模板方法的抽象类可以定义具体方法，抽象方法和钩子</li>\n<li>抽象方法由子类实现</li>\n<li>钩子是一种方法，它在抽象类中不做事，或只做默认的事，子类可以选择要不要去覆盖它</li>\n<li>为了防止子类改变模板方法中的算法，可以将模板方法声明为final</li>\n<li>策略模式和模板方法模式都封装算法，一个用组合，一个用继承</li>\n<li>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统庞大</li>\n</ul>\n<blockquote>\n<p>模板方法——子类决定如何实现算法中的步骤<br>策略——封装可以互换的行为，然后使用委托来决定要采用哪一个行为<br>工厂方法——由子类决定实例化哪个具体类</p>\n</blockquote>\n<hr>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>有两个类Coffee和Tea，分别实现了泡咖啡喝泡茶，我们使用模板方式模式进行封装</p>\n<p>原来的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泡咖啡</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Coffee</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">prepareRecipe</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        boilWater();<span class=\"comment\">//把水烧开</span></span><br><span class=\"line\">        brewCoffeeGrinds();<span class=\"comment\">//沸水冲咖啡</span></span><br><span class=\"line\">        pourInCup();<span class=\"comment\">//把咖啡倒入杯中</span></span><br><span class=\"line\">        addSugarAndMilk();<span class=\"comment\">//加糖和牛奶</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSugarAndMilk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;addSugarAndMilk&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourInCup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;pourInCup&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">brewCoffeeGrinds</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;brewCoffeeGrinds&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">boilWater</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;boilWater&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//泡茶</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tea</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">prepareRecipe</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        boilWater();<span class=\"comment\">//把水烧开</span></span><br><span class=\"line\">        steepTeaBag();<span class=\"comment\">//泡茶</span></span><br><span class=\"line\">        pourInCup();<span class=\"comment\">//把茶倒入杯中</span></span><br><span class=\"line\">        addLemon();<span class=\"comment\">//加柠檬</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addLemon</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;addLemon&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourInCup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;pourInCup&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">steepTeaBag</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;steepTeaBag&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">boilWater</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;boilWater&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>我们发现的问题</p>\n<ul>\n<li>泡咖啡和泡茶的流程大致相同。  </li>\n<li>Coffee和Tea之间存在重复代码</li>\n<li>由于类的组织方式不具有弹性，所以加入新种类的饮料需要做很多工作</li>\n<li>算法的知识和实现分散在许多类中</li>\n</ul>\n<p>使用模板方法模式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CaffeineBeverage</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//超类中定义执行模板</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareRecipe</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        boilWater();</span><br><span class=\"line\">        brew();</span><br><span class=\"line\">        pourInCup();</span><br><span class=\"line\">        addCondiments();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCondiments</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">brew</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">pourInCup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;pourInCup&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">boilWater</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;boilWater&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子类完成差异动作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Coffee</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CaffeineBeverage</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addCondiments</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;addSugarAndMilk&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">brew</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;brewCoffeeGrinds&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tea</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CaffeineBeverage</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addCondiments</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;addLemon&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">brew</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;steepTeaBag&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之适配器与外观模式","url":"https://zhangyaxiao.github.io/2018/03/28/设计模式之适配器与外观模式/","content":"<h1 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h1><p>将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E4%B8%8E%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/适配器类图.gif\" alt=\"适配器类图\"></p>\n<p>用户一直在使用 Target.request() 接口，而对应的业务是通过Adaptee.specificRequest()来完成。<br>适配器 Adapter 实现了Target.request() 接口。<br>同时引用了 Adaptee。来完成适配<br>或者 Adapter 可以通过 继承或者实现 Adaptee 接口，来完成适配  </p>\n<hr>\n<h1 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h1><p>提供一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用</p>\n<h2 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E4%B8%8E%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/外观类图.gif\" alt=\"外观类图\"></p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>当需要使用一个现有的类而其接口并不符合你的需要时，就使用适配器</li>\n<li>当需要简化并统一一个很大的接口或者一群复杂的接口时，使用外观</li>\n<li>适配器改变接口以符合客户的期望</li>\n<li>外观将客户从一个复杂的子系统中解耦</li>\n<li>适配器将一个对象包装起来以改变其接口，装饰着将一个对象包装起来以增加新的行为和责任，而外观将一群对象包装起来以简化其接口</li>\n</ul>\n<blockquote>\n<p>装饰者模式——不改变接口，但加入责任<br>适配器模式——将一个接口转成另一个接口<br>外观模式——让接口更简单  </p>\n</blockquote>\n<hr>\n<h2 id=\"适配器例子\"><a href=\"#适配器例子\" class=\"headerlink\" title=\"适配器例子\"></a>适配器例子</h2><p>Java的老一辈开发者应该比较熟悉Vector,Stack,Hashtable等集合类。它们的elements()返回一个实现了Enumeration接口的实现类。<br>但是自从出现Iterator以后，就很少再使用Enumeration了。<br>Iterator接口声明了三个方法: hasNext(),next(),remove()方法。<br>而Enumeration只声明了hasMoreElements()和nextElement()方法。分别对应于Iterator的hasNext和next方法。  </p>\n<p>假设现在客户端的代码只接受接口为Iterator的实现集合。但是现在我们已经拥有了Enumeration集合类。所以这个时候，我们可以使用适配器模式来解决接口不兼容的问题。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * 一个简单的适配器模式例子 </span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> * 具体角色: </span></span><br><span class=\"line\"><span class=\"comment\"> * Target  - Iterator </span></span><br><span class=\"line\"><span class=\"comment\"> * Adaptor - EnumerationIterator </span></span><br><span class=\"line\"><span class=\"comment\"> * Adaptee - Enumeration </span></span><br><span class=\"line\"><span class=\"comment\"> * client  - print method  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">package</span> pattern.adapter;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Vector;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 把Enumeration接口转换成Iterator接口的适配器  </span></span><br><span class=\"line\"><span class=\"comment\"> * 适配器模式中的角色 - adaptor </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EnumerationIterator</span>&lt;E&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&lt;E&gt; &#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 被适配的接口 </span></span><br><span class=\"line\"><span class=\"comment\">     * 适配器模式中的角色 - adaptee  </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Enumeration&lt;E&gt; enums;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">EnumerationIterator</span><span class=\"params\">(Enumeration&lt;E&gt; enums)</span> &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.enums = enums;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> enums.hasMoreElements();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> enums.nextElement();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 因为Enumeration接口不支持remove操作，所以这里简单地抛出异常 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        Vector&lt;String&gt; students = <span class=\"keyword\">new</span> <span class=\"title class_\">Vector</span>&lt;String&gt;(Arrays.asList(<span class=\"string\">&quot;Benson&quot;</span>,<span class=\"string\">&quot;Steven Jobs&quot;</span>,<span class=\"string\">&quot;Bill Gates&quot;</span>,<span class=\"string\">&quot;James Gosling&quot;</span>,<span class=\"string\">&quot;Doug Lea&quot;</span>));  </span><br><span class=\"line\">        Enumeration&lt;String&gt; enums = students.elements();  <span class=\"comment\">// 接口为Enumeration，与客户端的Iterator不兼容。  </span></span><br><span class=\"line\">        </span><br><span class=\"line\">        print(<span class=\"keyword\">new</span> <span class=\"title class_\">EnumerationIterator</span>&lt;String&gt;(enums)); <span class=\"comment\">// EnumerationIterator为适配器，将不兼容的Enumeration转换成客户端需要的Iterator接口  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 客户端只接受Iterator接口的实现类 </span></span><br><span class=\"line\"><span class=\"comment\">     * 适配器模式中的角色 - Client </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(Iterator&lt;String&gt; iterator)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;  </span><br><span class=\"line\">            System.out.println(iterator.next());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"外观例子\"><a href=\"#外观例子\" class=\"headerlink\" title=\"外观例子\"></a>外观例子</h2><p><strong>设计原则：最少知识原则，只和你的密友谈话</strong></p>\n<p>一个具体的例子。DrawerFacade直接封装好了所有的动作。DrawerClient和抽屉解耦，新增或调整抽屉不需要修改DrawerClient。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> facade;  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DrawerOne</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;第一个抽屉被打开了&quot;</span>);  </span><br><span class=\"line\">       getKey();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getKey</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;得到第二个抽屉的钥匙&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DrawerTwo</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;第二个抽屉被打开了&quot;</span>);  </span><br><span class=\"line\">       getFile();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getFile</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;得到这个重要文件&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DrawerFacade</span>&#123;  </span><br><span class=\"line\">    DrawerOne darwerOne=<span class=\"keyword\">new</span> <span class=\"title class_\">DrawerOne</span>();  </span><br><span class=\"line\">    DrawerTwo darwerTwo=<span class=\"keyword\">new</span> <span class=\"title class_\">DrawerTwo</span>();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">       darwerOne.open();  </span><br><span class=\"line\">       darwerTwo.open();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DrawerClient</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;  </span><br><span class=\"line\">       DrawerFacade drawer=<span class=\"keyword\">new</span> <span class=\"title class_\">DrawerFacade</span>();  </span><br><span class=\"line\">       drawer.open();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之命令模式","url":"https://zhangyaxiao.github.io/2018/03/28/设计模式之命令模式/","content":"<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><p>命令模式将 “请求” 封装成对象，以便使用不同的请求、队列或日志来参数化其他对象。命令模式也支持可撤销的操作</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/命令模式类图.gif\" alt=\"命令模式类图\"></p>\n<p>Command 是命令接口，需要实现Command来创建命令实体<br>ConcreateCommand 是具体命令<br>Receiver 是命令接收器，收到命令后，会执行命令的execute()方法。  </p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>命令模式将发出请求的对象和执行请求的对象解耦</li>\n<li>在被解耦的两者之间是通过命令对象进行沟通的。命令对象封装了接受者和一个或一组动作</li>\n<li>调用者通过调用命令对象的execute()发出请求，这会使得接受者的动作被调用</li>\n<li>调用者可以接受命令当做参数，甚至在运行时动态的进行</li>\n<li>命令可以支持撤销，做法是实现一个undo()方法来回到 execute()被执行前的状态</li>\n<li>宏命令是命令的一种简单延伸，允许调用多个命令。宏方法也可以支持销毁</li>\n<li>命令也可以用来实现日志和事物系统</li>\n</ul>\n<hr>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ul>\n<li>使用命令模式可能会导致某些系统有过多的具体命令类</li>\n</ul>\n<hr>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>我们需要设计一组遥控器按键的api，分别控制点灯、电扇、热水器、音响等设备<br><img src=\"/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/命令1.png\" alt=\"命令1\"><br>来看下各个电器厂商提供的接口<br><img src=\"/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/命令2.png\" alt=\"命令2\"></p>\n<p>我们使用命令模式进行设计<br>首先定义命令接口 Command ，然后创建命令实体类，实现Command，通过 RemoteControl 来执行不同的命令  </p>\n<p>定义命令接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Command</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>;<span class=\"comment\">//执行各自逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">undo</span><span class=\"params\">()</span>;<span class=\"comment\">//撤销</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>定义命令实体类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 灯 打开命令</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LightOnCommand</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Command</span>&#123;</span><br><span class=\"line\">    Ligth ligth;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LightOnCommand</span><span class=\"params\">(Ligth ligth)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ligth = ligth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ligth.on();<span class=\"comment\">//实际的业务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">undo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ligth.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 灯 关闭命令</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LightOffCommand</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Command</span>&#123;</span><br><span class=\"line\">    Ligth ligth;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LightOffCommand</span><span class=\"params\">(Ligth ligth)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ligth = ligth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ligth.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">undo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ligth.on();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 车库门打开命令</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GarageUpCommand</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Command</span>&#123;</span><br><span class=\"line\">    Garage garage;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">GarageUpCommand</span><span class=\"params\">(Garage garage)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.garage = garage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        garage.up();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">undo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        garage.down();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//车库门关闭命令</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GarageDownCommand</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Command</span>&#123;</span><br><span class=\"line\">    Garage garage;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">GarageDownCommand</span><span class=\"params\">(Garage garage)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.garage = garage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        garage.down();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">undo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        garage.up();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>定义遥控器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RemoteControl</span>&#123;</span><br><span class=\"line\">    Command[] onCommands;</span><br><span class=\"line\">    Command[] offCommands;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Command undoCommand;<span class=\"comment\">//用于回退</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RemoteControl</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        onCommands = <span class=\"keyword\">new</span> <span class=\"title class_\">Command</span>[<span class=\"number\">7</span>];</span><br><span class=\"line\">        offCommands = <span class=\"keyword\">new</span> <span class=\"title class_\">Command</span>[<span class=\"number\">7</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCommand</span><span class=\"params\">(<span class=\"type\">int</span> slot,Command onCommand,Command offCommand)</span>&#123;</span><br><span class=\"line\">        onCommands[slot] = onCommand;</span><br><span class=\"line\">        offCommands[slot] = offCommand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//打开按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onButton</span><span class=\"params\">(<span class=\"type\">int</span> slot)</span>&#123;</span><br><span class=\"line\">        onCommands[slot].execute();</span><br><span class=\"line\">        undoCommand = onCommands[slot];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//关闭按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">offButton</span><span class=\"params\">(<span class=\"type\">int</span> slot)</span>&#123;</span><br><span class=\"line\">        offCommands[slot].execute();</span><br><span class=\"line\">        undoCommand = offCommands[slot];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//撤销上一步操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">undoButton</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        undoCommand.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RemoteControlTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Light</span> <span class=\"variable\">light</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ligth</span>();</span><br><span class=\"line\">        <span class=\"type\">LightOnCommand</span> <span class=\"variable\">lightOnCommand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LightOnCommand</span>(light);</span><br><span class=\"line\">        <span class=\"type\">LightOffCommand</span> <span class=\"variable\">lightOffCommand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LightOffCommand</span>(light);</span><br><span class=\"line\">        <span class=\"type\">Garage</span> <span class=\"variable\">garage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Garage</span>();</span><br><span class=\"line\">        <span class=\"type\">GarageUpCommand</span> <span class=\"variable\">garageUpCommand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GarageUpCommand</span>(garage);</span><br><span class=\"line\">        <span class=\"type\">GarageDownCommand</span> <span class=\"variable\">garageDownCommand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GarageDownCommand</span>(garage);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">RemoteControl</span> <span class=\"variable\">remoteControl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteControl</span>();</span><br><span class=\"line\">        remoteControl.setCommand(<span class=\"number\">0</span>,lightOnCommand,lightOffCommand);</span><br><span class=\"line\">        remoteControl.setCommand(<span class=\"number\">1</span>,garageUpCommand,garageDownCommand);</span><br><span class=\"line\">        </span><br><span class=\"line\">        remoteControl.onButton(<span class=\"number\">0</span>);<span class=\"comment\">//开灯</span></span><br><span class=\"line\">        remoteControl.offButton(<span class=\"number\">0</span>);<span class=\"comment\">//关灯</span></span><br><span class=\"line\">        remoteControl.onButton(<span class=\"number\">1</span>);<span class=\"comment\">//打开车库门</span></span><br><span class=\"line\">        remoteControl.offButton(<span class=\"number\">1</span>);<span class=\"comment\">//关闭车库门</span></span><br><span class=\"line\">        remoteControl.undoButton();<span class=\"comment\">//撤销上一步</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之单例模式","url":"https://zhangyaxiao.github.io/2018/03/27/设计模式之单例模式/","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><p>单例模式确保一个类只有一个实例，并提供一个全局访问点</p>\n<hr>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li>在内存中只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例</li>\n<li>避免对资源的多重占用</li>\n</ul>\n<hr>\n<h1 id=\"单例模式的几种实现\"><a href=\"#单例模式的几种实现\" class=\"headerlink\" title=\"单例模式的几种实现\"></a>单例模式的几种实现</h1><h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><p>类加载时就把对象创建出来，用的时候直接返回。但是存在一个问题，就是单例还没有被使用就已经创建了，如果程序一直没有使用这个单例的话，就造成了不必要的资源浪费<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageLoader</span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">ImageLoader</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ImageLoader</span>();</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"title function_\">ImageLoader</span><span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ImageLoader <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;   </span><br><span class=\"line\">       <span class=\"keyword\">return</span> instance;   </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"懒汉式-双重判断\"><a href=\"#懒汉式-双重判断\" class=\"headerlink\" title=\"懒汉式+双重判断\"></a>懒汉式+双重判断</h2><p>一开始什么都不做，只有在使用的时候才创建实例对象。为了避免锁带来的性能问题，使用了双重判断<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageLoader</span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ImageLoader instance;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"title function_\">ImageLoader</span><span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ImageLoader <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">           <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (ImageLoader.class)&#123;  </span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;  </span><br><span class=\"line\">                       instance = <span class=\"keyword\">new</span> <span class=\"title class_\">ImageLoader</span>();  </span><br><span class=\"line\">                      &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">           &#125;   </span><br><span class=\"line\">           <span class=\"keyword\">return</span> instance;   </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"静态内部类实现\"><a href=\"#静态内部类实现\" class=\"headerlink\" title=\"静态内部类实现\"></a>静态内部类实现</h2><p>并未加锁，因为第一次加载ImageLoader类时，并不会实例化单例对象，只有第一次调用getInstance()方法时会导致虚拟机加载InnerInstance类，这种方式不仅能保证对象的单一性，还避免加锁带来的性能问题，又启动了延迟加载的优化，所以推荐使用这种方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageLoader</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerInstance</span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ImageLoader</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ImageLoader</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">ImageLoader</span><span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ImageLoader <span class=\"title function_\">ImageLoader</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerInstance.instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之工厂模式","url":"https://zhangyaxiao.github.io/2018/03/27/设计模式之工厂模式/","content":"<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><p>工厂模式定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/工厂方法类图.gif\" alt=\"工厂方法类图\"></p>\n<p>Product是对象接口，ContreteProduct是具体类。我们需要通过工厂来创建它的对象。<br>Creator 是工厂类的接口。提供创建Product的方法。可以有多个实现类，来创建对象。<br>ContreteCreator 实现了Creator。用来创建对象。  </p>\n<hr>\n<h1 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h1><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p>\n<h2 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/抽象工厂类图.gif\" alt=\"抽象工厂类图\"></p>\n<p>AbstractProductA 和AbstractProductB 分别代表两个对象家族<br>AbstractFactory 是工厂类的接口，提供创建对象家族中各个对象的方法。<br>不同的AbstractFactory实现类，分别创建不同的对象家族  </p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>所有的工厂都是用来封装对象的创建</li>\n<li>简单工厂，虽然不是真正的设计模式，但仍不失为一个简单方法，可以将客户程序从具体类解耦</li>\n<li>工厂方法使用继承，把对象的创建委托给子类，子类实现工厂方法来创建对象</li>\n<li>抽象工厂使用对象组合，对象的创建被实现在工厂接口所暴露出来的方法中</li>\n<li>所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合</li>\n<li>工厂方法允许类将实例化延迟到子类进行</li>\n<li>抽象工厂创建相关对象家族，而不需要依赖他们的具体类</li>\n<li>依赖倒置原则，指导我们避免依赖具体类型，而要尽量依赖抽象</li>\n<li>工厂是很有威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程</li>\n</ul>\n<hr>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>转载 <a href=\"http://ichennan.com/2016/08/09/DesignPattern.html\">DesignPattern-工厂模式</a></p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>简单工厂模式不是23种里的一种，简而言之，就是有一个专门生产某个产品的类。<br>比如下图中的鼠标工厂，专业生产鼠标，给参数0，生产戴尔鼠标，给参数1，生产惠普鼠标。<br><img src=\"/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/工厂1.png\" alt=\"工厂1\"></p>\n<h2 id=\"工厂模式-1\"><a href=\"#工厂模式-1\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>工厂模式也就是鼠标工厂是个父类，有生产鼠标这个接口。<br>戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。<br>生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。<br>后续直接调用鼠标工厂.生产鼠标()即可<br><img src=\"/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/工厂2.png\" alt=\"工厂2\"></p>\n<h2 id=\"抽象工厂模式-1\"><a href=\"#抽象工厂模式-1\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>抽象工厂模式也就是不仅生产鼠标，同时生产键盘。<br>也就是PC厂商是个父类，有生产鼠标，生产键盘两个接口。<br>戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。<br>创建工厂时，由戴尔工厂创建。<br>后续工厂.生产鼠标()则生产戴尔鼠标，工厂.生产键盘()则生产戴尔键盘。<br><img src=\"/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/工厂3.png\" alt=\"工厂3\"></p>\n<h3 id=\"在抽象工厂模式中，假设我们需要增加一个工厂\"><a href=\"#在抽象工厂模式中，假设我们需要增加一个工厂\" class=\"headerlink\" title=\"在抽象工厂模式中，假设我们需要增加一个工厂\"></a>在抽象工厂模式中，假设我们需要增加一个工厂</h3><p>假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承PC厂商。<br>之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类。<br>即可。<br><img src=\"/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/工厂4.png\" alt=\"工厂4\"></p>\n<h3 id=\"在抽象工厂模式中，假设我们需要增加一个产品\"><a href=\"#在抽象工厂模式中，假设我们需要增加一个产品\" class=\"headerlink\" title=\"在抽象工厂模式中，假设我们需要增加一个产品\"></a>在抽象工厂模式中，假设我们需要增加一个产品</h3><p>假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。<br>之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。<br>以上。<br><img src=\"/2018/03/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/工厂5.png\" alt=\"工厂5\"></p>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之装饰模式","url":"https://zhangyaxiao.github.io/2018/03/22/设计模式之装饰模式/","content":"<h1 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h1><p>装饰模式动态的将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/装饰类图.gif\" alt=\"装饰类图\"><br>Component 是抽象类，所有的被装饰对象都继承它<br>ConcreteComponent 是被装饰对象<br>Decorator 继承Component，所有装饰类都继承它<br>ConcreteDecoratorA，ConcreteDecoratorB是装饰类  </p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>继承属于扩展形式之一，但不见得是达到弹性设计的最佳方案</li>\n<li>在我们的设计中，应该允许行为可以被扩展，而无需修改现有的代码</li>\n<li>组合和委托可用于在运行时动态的加上新的行为</li>\n<li>除了继承，装饰模式也可以让我们扩展行为</li>\n<li>装饰者模式意味着一群装饰者类，这些类用来包装具体组件</li>\n<li>装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）</li>\n<li>装饰者可以在被装饰者的行为前面 与/或 后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的</li>\n<li>你可以用无数个装饰者包装一个组件</li>\n<li>装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型</li>\n<li>装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得复杂</li>\n</ul>\n<hr>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>一个咖啡店的例子。这是一个订单系统，Beverage是饮料的抽象类，所有饮料都继承它。cost()是计算价格，子类必须实现它<br><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/装饰1.png\" alt=\"装饰1\"></p>\n<p>购买咖啡时，客户可以要求在其中加入各种调料，例如：牛奶，豆浆，巧克力，糖等。然后将不同调料和饮料组合之后<br><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/装饰2.png\" alt=\"装饰2\"><br>显然不能这么设计  </p>\n<p>如果我们之间把各种调料当做 boolean变量，放在Beverage超类中呢<br><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/装饰3.png\" alt=\"装饰3\"></p>\n<p>存在的问题：</p>\n<ul>\n<li>调料价格的改变会使我们修改现有的代码</li>\n<li>一旦出现新的调料，我们就需要加上新的变量，并改变超类中的cost()方法</li>\n<li>以后可能会有新饮料，，对于这些饮料而言，某些调料可能并不适合</li>\n<li>万一顾客想要双倍糖，怎么办。</li>\n</ul>\n<p><strong>设计原则：类应该对扩展开发，对修改关闭</strong></p>\n<p>下面我们使用装饰模式解决这个问题<br>Beverage还是饮料的抽象类，所有的饮料都继承它。增加抽象类 CondimentDecorator，所有的调料都继承它。每种调料都有一个实例变量Beverage，扩展了它的cost()方法，<br><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/装饰4.png\" alt=\"装饰4\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">description</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Unknown Beverage&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> description;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CondimentDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>饮料<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Espresso</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Espresso</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        description = <span class=\"string\">&quot;Espresso&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HouseBlend</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Beverage</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HouseBlend</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        description = <span class=\"string\">&quot;HouseBlend&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.98</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>调料<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mocha</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CondimentDecorator</span>&#123;</span><br><span class=\"line\">    Beverage beverage;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Mocha</span><span class=\"params\">(Beverage beverage)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.beverage = beverage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beverage.getDescription()+<span class=\"string\">&quot;,Mocha&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.20</span>+beverage.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StarbuzzCoffee</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Beverage</span> <span class=\"variable\">beverage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Espresso</span>();</span><br><span class=\"line\">        <span class=\"comment\">//加双倍抹茶</span></span><br><span class=\"line\">        beverage = <span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(beverage);</span><br><span class=\"line\">        beverage = <span class=\"keyword\">new</span> <span class=\"title class_\">Mocha</span>(beverage);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(beverage.getDescription());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;价格=&quot;</span>+beverage.cost());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"设计模式之观察者模式","url":"https://zhangyaxiao.github.io/2018/03/22/设计模式之观察者模式/","content":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/观察者类图.gif\" alt=\"观察者类图\"></p>\n<p>观察者接口Observer，观察对象发生变化后，update()方法会被调用<br>被观察者接口Subject，通过Notify()方法通知观察者  </p>\n<hr>\n<h1 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h1><ul>\n<li>观察者模式定义了对象之间一对多的关系</li>\n<li>主题（也就是可观察者）用一个共同的接口来更新观察者</li>\n<li>观察者和可观察者之间用松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口</li>\n<li>使用此模式时，你可以被观察者 推（push） 或 拉（pull）数据。（然而，推的方式被认为更“正确”）</li>\n<li>有多个观察者时，不可以依赖特定的通知次序</li>\n<li>java有多种观察者模式的实现，包括通用的java.util.Observable</li>\n<li>有必要的话，可以实现自己的Observable</li>\n</ul>\n<hr>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>一个气象站的例子。我们有一个类，提供三个方法，分表用来获取 getTemperature()温度，getHumidity()湿度，getPressure()气压。一旦气象测量更新，measurementsChanged()方法就会被调用。<br>我们的工作是：实现measurementsChanged()方法，在气象更新之后获取最新的数据，推给三个布告板</p>\n<p>我们先看个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherData</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">measurementsChanged</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> getTemperature();<span class=\"comment\">//获得温度</span></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">humidity</span> <span class=\"operator\">=</span> getHumidity();<span class=\"comment\">//获得湿度</span></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">pressure</span> <span class=\"operator\">=</span> getPressure();<span class=\"comment\">//获得气压</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//更新一号布告板</span></span><br><span class=\"line\">        currentConditionsDisplay.update(temp,humidity,pressure);</span><br><span class=\"line\">        <span class=\"comment\">//更新二号布告板</span></span><br><span class=\"line\">        statisticsDisplay.update(temp,humidity,pressure);</span><br><span class=\"line\">        <span class=\"comment\">//更新三号布告板</span></span><br><span class=\"line\">        forecastDisplay.update(temp,humidity,pressure);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>存在的问题：</p>\n<ul>\n<li>这是针对具体实现编程，而不是针对接口</li>\n<li>对于每个新的布告板，我们都得修改代码</li>\n<li>我们无法在运行时动态增加（或删除）布告板</li>\n<li>布告板没有实现一个共同的接口</li>\n<li>我们尚未封装改变的部分</li>\n<li>我们侵犯了WeatherData类的封装</li>\n</ul>\n<p><strong>设计原则：为了交互对象之间的松耦合设计而努力</strong></p>\n<p>我们使用观察者模式来设计<br>首先我们定义观察者模式接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//观察者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"type\">float</span> temp,<span class=\"type\">float</span> humidity,<span class=\"type\">float</span> pressure)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//被观察者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Subject</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObservers</span><span class=\"params\">()</span>;<span class=\"comment\">//通知观察者</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们来建立具体的类<br><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/观察者1.png\" alt=\"观察者1\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherData</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//观察者集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> pressure;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeatherData</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        observers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Observer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//增加观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer o)</span> &#123;</span><br><span class=\"line\">        observers.add(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer o)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> observers.indexOf(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            observers.remove(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//通知观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObservers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Observer o : observers)&#123;</span><br><span class=\"line\">            o.update(temp,humidity,pressure);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//气象更新，需要通知观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">measurementsChanged</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        notifyObservers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//测试接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMeasurements</span><span class=\"params\">(<span class=\"type\">float</span> temp,<span class=\"type\">float</span> humidity,<span class=\"type\">float</span> pressure)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.temp = temp;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>具体布告板，其他布告板类似<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一号布告板</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>,DisplayElement &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject weatherData;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> humidity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CurrentConditionsDisplay</span><span class=\"params\">(Subject weatherData)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.weatherData = weatherData;</span><br><span class=\"line\">        weatherData.registerObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//收到通知之后，进行操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"type\">float</span> temp, <span class=\"type\">float</span> humidity, <span class=\"type\">float</span> pressure)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.temp = temp;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.humidity = humidity;</span><br><span class=\"line\">        display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;display&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherStation</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">WeatherData</span> <span class=\"variable\">weatherData</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherData</span>();</span><br><span class=\"line\">        <span class=\"comment\">//定义观察者</span></span><br><span class=\"line\">        <span class=\"type\">CurrentConditionsDisplay</span> <span class=\"variable\">conditionsDisplay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CurrentConditionsDisplay</span>(weatherData);</span><br><span class=\"line\">        <span class=\"comment\">//可以定义其他观察者....</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//更新数据，观察者更新</span></span><br><span class=\"line\">        weatherData.setMeasurements(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用java内置的观察者模式：\"><a href=\"#使用java内置的观察者模式：\" class=\"headerlink\" title=\"使用java内置的观察者模式：\"></a>使用java内置的观察者模式：</h2><p>java内置的观察者模式 java.util.Observer 和 java.util.Observable<br><img src=\"/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/观察者2.png\" alt=\"观察者2\"></p>\n<p>具体代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherData</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> pressure;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeatherData</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//气象更新，需要通知观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">measurementsChanged</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        setChanged();</span><br><span class=\"line\">        notifyObservers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//测试接口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMeasurements</span><span class=\"params\">(<span class=\"type\">float</span> temp,<span class=\"type\">float</span> humidity,<span class=\"type\">float</span> pressure)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.temp = temp;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一号布告板</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.util.Observer,DisplayElement &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Observable observable;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> humidity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CurrentConditionsDisplay</span><span class=\"params\">(Observable observable)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.observable = observable;</span><br><span class=\"line\">        observable.addObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//收到通知之后进行操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable o, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> WeatherData)&#123;</span><br><span class=\"line\">            <span class=\"type\">WeatherData</span> <span class=\"variable\">weatherData</span> <span class=\"operator\">=</span> (WeatherData) o;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.temp = temp;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.humidity = humidity;</span><br><span class=\"line\">            display();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;display&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><strong>我们在使用 java.util.Observable 需要注意的问题：</strong></p>\n<ul>\n<li>Observable是一个类，而不是接口。我们只能通过继承来使用</li>\n<li>多个观察者被通知的次序是不固定的</li>\n</ul>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"hexo+github搭建个人博客","url":"https://zhangyaxiao.github.io/2018/03/19/hexo-github搭建个人博客/","content":"<h1 id=\"1、安装git-node-js-hexo\"><a href=\"#1、安装git-node-js-hexo\" class=\"headerlink\" title=\"1、安装git/node.js/hexo\"></a>1、安装git/node.js/hexo</h1><h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><p>官网下载地址 <a href=\"https://git-scm.com/downloads\">git</a><br>git使用教程 <a href=\"https://backlog.com/git-tutorial/cn/intro/intro1_1.html\">猴子都能懂的GIT入门</a></p>\n<h2 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h2><p>官网下载地址 <a href=\"http://nodejs.cn/\">node.js</a><br>使用教程<br><a href=\"http://www.runoob.com/nodejs/nodejs-tutorial.html\">入门</a><br><a href=\"http://nodejs.cn/api/assert.html\">文档</a></p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><blockquote>\n<p>安装完git和node.js 之后，我们就可以使用npm安装hexo了。gitbash中输入命令<br>npm install -g hexo  </p>\n</blockquote>\n<blockquote>\n<p>安装依赖包<br>npm install  </p>\n</blockquote>\n<blockquote>\n<p>创建项目  hexo init 文件名，我这里使用的xxx<br>hexo init xxx  </p>\n</blockquote>\n<blockquote>\n<p>cd到项目下，执行命令生成静态页面<br>hexo g<br>hexo s #本地预览  </p>\n</blockquote>\n<blockquote>\n<p>常用命令<br>hexo clean #清除生成的文件和缓存<br>hexo g #生成静态页面<br>hexo s #本地预览<br>hexo d #部署<br>hexo d -g #生成并部署  </p>\n</blockquote>\n<blockquote>\n<p>hexo new draft “文章名” #新建草稿<br>hexo publish “文章名” #草稿发布<br>草稿默认不会显示在页面上，可以加上–draft参数来进行显示；也可以通过 render_drafts 参数设置为true来预览草稿</p>\n</blockquote>\n<p>详细使用教程（推荐看下，简单实用） <a href=\"https://hexo.io/zh-cn/docs/index.html\">文档</a>  </p>\n<h1 id=\"2、注册github账号并创建项目\"><a href=\"#2、注册github账号并创建项目\" class=\"headerlink\" title=\"2、注册github账号并创建项目\"></a>2、注册github账号并创建项目</h1><h2 id=\"注册并创建项目\"><a href=\"#注册并创建项目\" class=\"headerlink\" title=\"注册并创建项目\"></a>注册并创建项目</h2><p>注册地址 <a href=\"https://github.com/\">https://github.com/</a><br>创建代码库 New repository<br>注意：比如我的github名称是zhangyaxiao ,这里你就填 zhangyaxiao.github.io,如果你的名字是xxx，那你就填 xxx.github.io。如图<br><img src=\"/2018/03/19/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20180320095135.png\" alt=\"github\"></p>\n<h2 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h2><p>在gitbash中输入命令，创建秘钥</p>\n<blockquote>\n<p>ssh-keygen -t rsa -C “your email”  </p>\n</blockquote>\n<p>之后会让你输入github的账号密码，跟着指示的路径，在你的电脑中找到该文件，id_rsa文件即是你的私有密钥，id_rsa.pub是共开密钥<br>打开你的id_rsa.pub文件，复制下里面的内容，然后登录进去你的github；<br>在右上角账户那里点击头像边上的下拉，出现如图——点击settings进去，找到左侧的SSH Keys,点击<br>在点击Add SSH Key，在title处填入任意的标识，在Key部分里面添加刚才复制的id_rsa.pub文件里的内容，点击添加即可；<br><img src=\"/2018/03/19/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ssh.png\" alt=\"ssh\"><br>最后一步了，只需测试一下链接是否正常了，接着输入：ssh -T <a href=\"mailto:git@github.com\">git@github.com</a>，这时会问是否继续连接，我们输入 yes，这样，我们的git配置就完成了。</p>\n<h1 id=\"3、hexo和github进行关联\"><a href=\"#3、hexo和github进行关联\" class=\"headerlink\" title=\"3、hexo和github进行关联\"></a>3、hexo和github进行关联</h1><p>在gitbash中输入命令,配置git个人信息  </p>\n<blockquote>\n<p>git config –global user.name “xxx”<br>git config –global user.email “<a href=\"mailto:xxx@163.com\">xxx@163.com</a>“</p>\n</blockquote>\n<p>需要安装一个扩展</p>\n<blockquote>\n<p>npm install hexo-deployer-git –save</p>\n</blockquote>\n<p>配置hexo的Deployment，在_config.yml文件中，找到deploy，然后按照如下修改：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"4、主题设置\"><a href=\"#4、主题设置\" class=\"headerlink\" title=\"4、主题设置\"></a>4、主题设置</h1><p>##相关主题<br><a href=\"https://github.com/hexojs/hexo/wiki/Themes\">github</a><br><a href=\"https://www.zhihu.com/question/24422335\">知乎</a>  </p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>比如我安装的是yilia，需要将主题git到项目的themes目录下  </p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia  </p>\n</blockquote>\n<p>配置使用主题：修改hexo根目录下的 _config.yml ： theme: yilia</p>\n<p>主题配置文件在  themes/yilia_config.yml</p>\n<h1 id=\"5、新增文章和增加图片\"><a href=\"#5、新增文章和增加图片\" class=\"headerlink\" title=\"5、新增文章和增加图片\"></a>5、新增文章和增加图片</h1><p>新增文章</p>\n<blockquote>\n<p>hexo new ‘文章名称’</p>\n</blockquote>\n<p>安装插件，用于展示图片</p>\n<blockquote>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\">https://github.com/CodeFalling/hexo-asset-image</a> –save  </p>\n</blockquote>\n<p>插入图片语法</p>\n<blockquote>\n<p>![alt](xxx.jpg)</p>\n</blockquote>\n<p>图片所在目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo入门学习</span><br><span class=\"line\">└── xxx.jpg</span><br><span class=\"line\">hexo入门学习.md</span><br></pre></td></tr></table></figure></p>\n<p>markdown 语法 <a href=\"https://guides.github.com/features/mastering-markdown/\">github语法</a></p>\n","categories":[],"tags":["工具"]},{"title":"Guava之Optional优雅的使用null","url":"https://zhangyaxiao.github.io/2018/02/24/Guava之Optional优雅的使用null/","content":"<h1 id=\"为什么使用optional\"><a href=\"#为什么使用optional\" class=\"headerlink\" title=\"为什么使用optional\"></a>为什么使用optional</h1><p>使用Optional除了赋予null语义，增加了可读性，最大的优点在于它是一种傻瓜式的防护。Optional迫使你积极思考引用缺失的情况，因为你必须显式地从Optional获取引用。<br>如同输入参数，方法的返回值也可能是null。和其他人一样，你绝对很可能会忘记别人写的方法method(a,b)会返回一个null，就好像当你实现method(a,b)时，也很可能忘记输入参数a可以为null。将方法的返回类型指定为Optional，也可以迫使调用者思考返回的引用缺失的情形。  </p>\n<p>接口文档 <a href=\"https://google.github.io/guava/releases/snapshot-jre/api/docs/\">https://google.github.io/guava/releases/snapshot-jre/api/docs/</a><br>github地址 <a href=\"https://github.com/google/guava\">https://github.com/google/guava</a></p>\n<hr>\n<h1 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h1><ul>\n<li>Optional.of(T)：获得一个Optional对象，其内部包含了一个非null的T数据类型实例，若T=null，则立刻报错。  </li>\n<li>Optional.absent()：获得一个Optional对象，其内部包含了空值  </li>\n<li>Optional.fromNullable(T)：将一个T的实例转换为Optional对象，T的实例可以不为空，也可以为空[Optional.fromNullable(null)，和Optional.absent()等价。  </li>\n</ul>\n<p>例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testNull</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//one</span></span><br><span class=\"line\">    Integer nubmerone=<span class=\"number\">4</span>;</span><br><span class=\"line\">    Optional&lt;Integer&gt; integerOptional = Optional.of(nubmerone);<span class=\"comment\">//若引用为null则快速失败触发java.lang.NullPointerException</span></span><br><span class=\"line\">    <span class=\"comment\">//two</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; nullOptional=Optional.absent();<span class=\"comment\">//创建引用缺失的Optional实例,就是为NULL的</span></span><br><span class=\"line\">    <span class=\"comment\">//three</span></span><br><span class=\"line\">    Optional&lt;Integer&gt; possible = Optional.fromNullable(<span class=\"number\">5</span>);  <span class=\"comment\">//创建允许null值的Optional</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><ul>\n<li>boolean isPresent()：如果Optional包含的T实例不为null，则返回true；若T实例为null，返回false</li>\n<li>T get()：返回Optional包含的T实例，该T实例必须不为空；否则，对包含null的Optional实例调用get()会抛出一个IllegalStateException异常</li>\n<li>T or(T)：若Optional实例中包含了传入的T的相同实例，返回Optional包含的该T实例，否则返回输入的T实例作为默认值</li>\n<li>T orNull()：返回Optional实例中包含的非空T实例，如果Optional中包含的是空值，返回null，逆操作是fromNullable()</li>\n<li>Set<T> asSet()：返回一个不可修改的Set，该Set中包含Optional实例中包含的所有非空存在的T实例，且在该Set中，每个T实例都是单态，如果Optional中没有非空存在的T实例，返回的将是一个空的不可修改的Set。<br>例子：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testNull</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    testMethodReturn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethodReturn</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Optional&lt;Long&gt; value = method();<span class=\"comment\">//获得一个Optional对象，其内部包含了空值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value.isPresent()==<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;获得返回值: &quot;</span> + value.get());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//value是空值，返回输入的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1、获得返回值: &quot;</span> + value.or(-<span class=\"number\">12L</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//value是空值，返回null</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;2、获得返回值 orNull: &quot;</span> + value.orNull());</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Long&gt; valueNoNull = methodNoNull();<span class=\"comment\">//获得一个Optional对象，值为15</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(valueNoNull.isPresent()==<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        Set&lt;Long&gt; set=valueNoNull.asSet();<span class=\"comment\">//返回一个不可修改的Set</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;3、获得返回值 set 的 size : &quot;</span> + set.size());</span><br><span class=\"line\">        <span class=\"comment\">//返回Optional包含的T实例</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;4、获得返回值: &quot;</span> + valueNoNull.get());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;获得返回值: &quot;</span> + valueNoNull.or(-<span class=\"number\">12L</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//引用值不为null，返回引用值</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;5、获得返回值 orNull: &quot;</span> + valueNoNull.orNull());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n运行结果</T></li>\n</ul>\n<blockquote>\n<p>1、获得返回值: -12<br>2、获得返回值 orNull: null<br>3、获得返回值 set 的 size : 1<br>4、获得返回值: 15<br>5、获得返回值 orNull: 15  </p>\n</blockquote>\n","categories":[],"tags":["java"]},{"title":"重构——改善既有代码的设计","url":"https://zhangyaxiao.github.io/2018/02/07/重构——改善既有代码的设计/","content":"<h1 id=\"一、什么是重构？\"><a href=\"#一、什么是重构？\" class=\"headerlink\" title=\"一、什么是重构？\"></a>一、什么是重构？</h1><p>所谓重构是这样一个过程：<strong>在不改变代码外在行为的前提下，对代码作出修改，以改进程序的内部结构</strong>。本质上说，<strong>重构就是在代码写好之后改进它的设计</strong>。</p>\n<blockquote>\n<p>重构（名词）：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。<br>重构（动词）：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。</p>\n</blockquote>\n<p>重构的目的是使软件更容易被理解和修改。重构不会改变软件可观察的行为——重构之后软件功能一如既往。</p>\n<p>重构技术就是以微小的步伐修改程序，如果你犯下错误，很容易便可以发现它。</p>\n<hr>\n<h1 id=\"二、为何重构？\"><a href=\"#二、为何重构？\" class=\"headerlink\" title=\"二、为何重构？\"></a>二、为何重构？</h1><ol>\n<li><strong>重构改进软件设计</strong>。如果没有重构，程序的设计会逐渐腐败变质。重构很像是在整理代码，你所做的就是让所有东西回到应出的位置上。经常性的重构可以帮助维持自己该有的形态。</li>\n<li><strong>重构使软件更容易理解</strong>。重构可以帮助我们让代码更易读。</li>\n<li><strong>重构帮助找到bug</strong>。对代码进行重构，可以帮助我们深入理解代码，对代码理解的越深，就越能帮我们找到bug。重构能够帮我们更有效地写出强健的代码。</li>\n<li><strong>重构提高变成速度</strong>。重构可以帮助我们更快速地开发软件，因为它阻止系统腐败变质，它甚至还可以提高设计质量。</li>\n</ol>\n<hr>\n<h1 id=\"三、何时重构？\"><a href=\"#三、何时重构？\" class=\"headerlink\" title=\"三、何时重构？\"></a>三、何时重构？</h1><p>重构不是一件应该特别拨出时间做的事情，重构应该随时随地进行。不应该为重构而重构，之所以重构，是因为我们想做别的什么事，而重构可以帮助我们把那些事做好。</p>\n<p>三次法则：事不过三，三则重构。</p>\n<ol>\n<li>添加功能时重构。</li>\n<li>修补错误时重构。</li>\n<li>复审代码时重构。</li>\n</ol>\n<hr>\n<h1 id=\"四、何时不该重构？\"><a href=\"#四、何时不该重构？\" class=\"headerlink\" title=\"四、何时不该重构？\"></a>四、何时不该重构？</h1><p>代码根本无法工作或者太糟糕，重构还不如重写来的简单。<br>在项目的最后期限，应该避免重构。</p>\n<hr>\n<h1 id=\"五、代码的坏味道\"><a href=\"#五、代码的坏味道\" class=\"headerlink\" title=\"五、代码的坏味道\"></a>五、代码的坏味道</h1><ul>\n<li><strong>重复代码(Duplicated Code)</strong></li>\n<li><strong>过长函数(Long Method)</strong></li>\n<li><strong>过大的类(Large Class)</strong></li>\n<li><strong>过长参数列(Long Parameter List)</strong></li>\n<li><strong>发散式变化(Divergent Change)</strong>：一个类受多种变化的影响</li>\n<li><strong>霰弹式修改(Shotgun Surgery)</strong>：一种变化引发多个类相应修改</li>\n<li><strong>依恋情结(Feature Envy)</strong>：函数对某个类的兴趣高过自己所处类的兴趣</li>\n<li><strong>数据泥团(Data Clumps)</strong>：相同的若干项数据出现在不同地方，这些绑在一起出现的数据应该有属于它们自己的对象</li>\n<li><strong>基本类型偏执(Private Obsession)</strong>：很多人不愿意在小任务上运用小对象</li>\n<li><strong>switch惊悚现身(Switch Statements)</strong>：switch语句会在很多地方重复出现，一改则需全改</li>\n<li><strong>平行继承体系(Parallel Inheritance Hierarchies)</strong>：当你为某一个类增加子类时，也必须为另一个类相应增加一个类</li>\n<li><strong>冗赘类(Lazy Class)</strong>：如果一个类不值得存在，那就让它消失</li>\n<li><strong>夸夸其谈的未来星(Speculative Generality)</strong>：预留的无用的抽象类，无用的抽象参数</li>\n<li><strong>令人迷惑的暂时字段(Temporary Field)</strong>：类中某个字段只为某些特殊情况而设置</li>\n<li><strong>过度耦合的消息链(Message Chains)</strong>：用户向一个对象请求另一个对象，然后再向后者请求另一个对象……</li>\n<li><strong>中间人(Middle Man)</strong>：无用的委托，过多的中间层</li>\n<li><strong>狎昵关系(Inappropriate Intimacy)</strong>：两个类过于亲密，一个类过于关注另一个类的成员</li>\n<li><strong>异曲同工的类(Alternative Classes with Different Interfaces)</strong>：不同名字的类或函数，作者相同的事</li>\n<li><strong>不完美的库类(Incomplete Library Class)</strong>：类库设计不可能完美</li>\n<li><strong>纯数据类(Data Class)</strong>：一个类拥有一些字段以及用于访问这些字段的函数，除此之外一无长物</li>\n<li><strong>被拒绝的遗赠(Refused Bequest)</strong>：子类不想继承超类所有的函数和数据，只想挑几样来玩</li>\n<li><strong>过多的注释(Comments)</strong></li>\n</ul>\n<hr>\n<h1 id=\"六、构筑测试体系\"><a href=\"#六、构筑测试体系\" class=\"headerlink\" title=\"六、构筑测试体系\"></a>六、构筑测试体系</h1><ul>\n<li><strong>重构的首要前提是拥有一个可靠的测试环境</strong>。</li>\n<li><strong>只要写好一点功能，就立即添加测试，并确保所有测试都完全自动化，让它们检查自己的测试结果</strong>。一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需要的时间。</li>\n<li><strong>撰写测试代码的最有用时机是在开始编程之前</strong>。当你需要添加特性的时候，先写相应测试代码。编写测试代码其实就是在问自己：添加这个功能需要做些什么。编写测试代码还能使你把注意力集中于接口而非实现。预先写好的测试代码也为你的工作安上一个明确的结束标志：一旦测试代码正常运行，工作就可以结束了。</li>\n<li><strong>多运用单元测试</strong>。测试你最担心出错的地方，考虑可能出错的边界条件。不要因为测试无法捕捉所有bug就不写测试，因为测试的确可以捕捉到大多数bug。“花合理时间抓出大多数bug”要好过“穷尽一生抓出所有bug”。</li>\n</ul>\n<hr>\n<h1 id=\"七、重新组织函数\"><a href=\"#七、重新组织函数\" class=\"headerlink\" title=\"七、重新组织函数\"></a>七、重新组织函数</h1><ul>\n<li><strong>提炼函数（Extract Method）</strong>。你有一段代码可以被组织在一起并独立出来。将这段代码放进一个独立函数中，并将函数名称解释该函数的用途。</li>\n<li><strong>内联函数（Inline Method）</strong>。一个函数的本体与名称同样清楚易懂。在函数调用点插入函数本体，然后移除该函数。</li>\n<li><strong>内联临时变量（Inline Temp）</strong>。你有一个临时变量，只被一个简单表达式赋值一次，而它妨碍了其他重构手法。将所有对该变量的引用动作，替换为对它赋值的那个表达式自身。</li>\n<li><strong>以查询取代临时变量（Replace Temp with Query）</strong>。你的程序以一个临时变量保存某一表达式的运算结果。将这个表达式提炼到一个独立函数中。将这个临时变量的所有引用点替换为对新函数的调用。此后，新函数就可被其他函数使用。</li>\n<li><strong>引入解释性变量（Introduce Explaining Variable）</strong>。你有一个复杂的表达式。将该复杂表达式（或其中一部分）的结果放进一个临时变量，以此变量名称来解释表达式用途。</li>\n<li><strong>分解临时变量（Split Temporary Variable）</strong>。你的程序有某个临时变量被赋值过一次，它既不是循环变量，也不被用于收集计算结果。针对每次赋值，创造一个独立、对应的临时变量。</li>\n<li><strong>移除对参数的赋值（Remove Assignments Parameters）</strong>。代码对一个参数进行赋值。以一个临时变量取代参数的位置。</li>\n<li><strong>以函数对象取代函数（Replace Method with Method Object）</strong>。你有一个大型函数，其中对局部变量的使用使你无法采用Extract Method。将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后你可以在同一个对象中将这个大型函数分解为多个小型函数。</li>\n<li><strong>替换算法（Substitute Algorithm）</strong>。你想要把某个算法替换为另一个更清晰的算法。将函数本体替换为另一个算法。</li>\n</ul>\n<hr>\n<h1 id=\"八、在对象之间搬移特性\"><a href=\"#八、在对象之间搬移特性\" class=\"headerlink\" title=\"八、在对象之间搬移特性\"></a>八、在对象之间搬移特性</h1><ul>\n<li><strong>搬移函数（Move Method）</strong>。你的程序中，有个函数与其所驻之外的另一个类进行更多交流：调用后者，或被后者调用。在该函数最常引用的类中建立一个有着类似行为的新函数。将旧函数变成一个单纯的委托函数，或是将旧函数完全移除。</li>\n<li><strong>搬移字段（Move Field）</strong>。你的程序中，某个字段被其所驻类之外的另一个类更多地用到。在目标类新建一个字段，修改源字段的所有用户，令它们改用新字段。</li>\n<li><strong>提炼类（Extract Class）</strong>。某个类做了应该有两个类做的事。建立一个新类，将相关的字段和函数从旧类搬移到新类。</li>\n<li><strong>将类内联化（Inline Class）</strong>。某个类没有做太多事情。将这个类的所有特性搬移到另一个类中，然后移除原类。</li>\n<li><strong>隐藏“委托关系”（Hide Delegate）</strong>。客户通过一个委托来调用另一个对象。在服务类上建立客户所需的所有函数，用以隐藏委托关系。</li>\n<li><strong>移除中间人（Remove Middle Man）</strong>。某个类做了过多的简单委托动作。让客户直接调用受托类。</li>\n<li><strong>引入外加函数（Introduce Foreign Method）</strong>。你需要为提供服务的类增加一个函数，但你无法修改这个类。在客户类中建立一个函数，并以第一参数形式传入一个服务类实例。</li>\n<li><strong>引入本地扩展（Introduce Local Extension）</strong>。你需要为服务类提供一些额外函数，但你无法修改这个类。建立一个新类，使它包含这些额外函数。让这个扩展品成为源类的子类或包装类。</li>\n</ul>\n<hr>\n<h1 id=\"九、重新组织数据\"><a href=\"#九、重新组织数据\" class=\"headerlink\" title=\"九、重新组织数据\"></a>九、重新组织数据</h1><ul>\n<li><strong>自封装字段（Self Encapsulate Field）</strong>。你直接访问一个字段，但与字段之间的耦合关系逐渐变得笨拙。为这个字段建立取值/设值函数，并且只以这些函数来访问字段。</li>\n<li><strong>以对象取代数据值（Replace Data Value with Object）</strong>。你有一个数据项，需要与其他数据和行为一起使用才有意义。将数据项变成对象。</li>\n<li><strong>将值对象改为引用对象（Change Value to Reference）</strong>。你从一个类衍生出许多彼此相等的实例，希望将它们替换为同一个对象。将这个值对象变成引用对象。</li>\n<li><strong>将引用对象改为值对象（Change Reference to Value）</strong>。你有一个引用对象，很小且不可变，而且不易管理。将它变成一个值对象。</li>\n<li><strong>以对象取代数据（Replace Array with Object）</strong>。你有一个数组，其中的元素各自代表不同的东西。以对象替换数组，对于数组中的每个元素，以一个字段来表示。</li>\n<li><strong>复制“被监视数据”（Duplicate Observed Data）</strong>。你有一些领域数据置身GUI控件中，而领域函数需要访问这些数据。将该数据复制到一个领域对象中。建立一个Observe模式，用以同步领域对象和GUI对象内的重复数据。</li>\n<li><strong>将单向关联改为双向关联（Change Unidirectional Association to Bidirectional）</strong>。两个类都需要使用对方特性，但其间只有一条单向链接。添加一个反向指针，并使修改函数能够同时更新两条链接。</li>\n<li><strong>将双向关联改为单向关联（Change Bidirectional Association to Unidirectional）</strong>。两个类之间有双向关联，但其中一个类如今不再需要另一个类的特性。去除不必要的关联。</li>\n<li><strong>以字面常量取代魔法数（Replace Magic Number with Symbolic Constant）</strong>。你有一个字面数值，带有特别含义。创造一个常量，根据其意义为它命名，并将上述的字面数值替换为这个常量。</li>\n<li><strong>封装字段（Encapsulate Field）</strong>。你的类中存在一个public字段。将它声明为private，并提供相应的访问函数。</li>\n<li><strong>封装集合（Encapsulate Collection）</strong>。有个函数返回一个集合。让这个函数返回该集合的一个只读副本，并在这个类中提供添加/移除集合元素的函数。</li>\n<li><strong>以数据类取代记录（Replace Record with Data Class）</strong>。你需要面对传统编程环境中的记录结构。为该记录创建一个“哑”数据对象。</li>\n<li><strong>以类取代类型码（Replace Type Code with Class）</strong>。类之中有一个数值类行码，但它并不影响类的行为。以一个新的类替换该数值类型码。</li>\n<li><strong>以子类取代类型码（Replace Type Code with Subclass）</strong>。你又一个不可变的类型码，它会影响类的行为。以子类取代这个类型码。</li>\n<li><strong>以State/Strategy取代类型码（Replace Type Code with State/Strategy）</strong>。你有一个类型码，它会影响类的行为，但你无法通过继承手法消除它。以状态对象取代类型码。</li>\n<li><strong>以字段取代子类（Replace Subclass with Fields）</strong>。你的各个子类的唯一差别只在“返回常量数据”的函数身上。修改这些函数，使他么返回超类中的某个（新增）字段，然后销毁子类。</li>\n</ul>\n<hr>\n<h1 id=\"十、简化条件表达式\"><a href=\"#十、简化条件表达式\" class=\"headerlink\" title=\"十、简化条件表达式\"></a>十、简化条件表达式</h1><ul>\n<li><strong>分解条件表达式（Decompose Conditional）</strong>。你有一个复杂的条件（if-then-else）语句。从if、then、else三分段落中分别提炼出独立函数。</li>\n<li><strong>合并条件表达式（Consolidate Conditional Expression）</strong>。你有一系列条件测试，都得到相同结果。将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数。</li>\n<li><strong>合并重复的条件片段（Consolidate Duplicate Conditional Fragments）</strong>。在条件表达式的每个分支上有着相同的一段代码。将这段重复的代码搬移到条件表达式之外。</li>\n<li><strong>移除控制标记（Remove Control Flag）</strong>。在一系列布尔表达式中，某个变量带有“控制标记”的作用。以break语句或return语句取代控制标记。</li>\n<li><strong>以卫语句取代嵌套条件表达式（Replace nested Conditional with Guard Clauses）</strong>。函数中的条件逻辑使人难以看清正常的执行路径。使用卫语句表现所有的特殊情况。</li>\n<li><strong>以多态取代条件表达式（Replace Conditional with Polymorphism）</strong>。你手上有个条件表达式，它根据对象类型的不同选择不同的行为。将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。</li>\n<li><strong>引入Null对象（Introduce Null Object）</strong>。你需要再三检查某对象是否为null。将null值替换为null对象。</li>\n<li><strong>引入断言（Introduce Assertion）</strong>。某一段代码需要对程序状态做出某种假设。以断言明确表现这种假设。</li>\n</ul>\n<hr>\n<h1 id=\"十一、简化函数调用\"><a href=\"#十一、简化函数调用\" class=\"headerlink\" title=\"十一、简化函数调用\"></a>十一、简化函数调用</h1><ul>\n<li><strong>函数改名（Rename Method）</strong>。函数的名称未能揭示函数的用途。修改函数的名称。</li>\n<li><strong>添加参数（Add Parameter）</strong>。某个函数需要从调用端得到更多信息。为此函数添加一个对象参数，让该对象带进函数所需信息。</li>\n<li><strong>移除参数（Remove Parameter）</strong>。函数本体不再需要某个参数。将该参数去除。</li>\n<li><strong>将查询函数和修改函数分离（Separate Query from Modifier）</strong>。某个函数既返回对象状态值，又修改对象状态。建立两个不同的函数，其中一个负责查询，另一个负责修改。</li>\n<li><strong>令函数携带参数（Parameterize Method）</strong>。若干函数做了类似的工作，但在函数本体中却包含了不同的值。建立单一函数，以参数表达那些不同的值。</li>\n<li><strong>以明确函数取代参数（Replace Parameter with Explicit Methods）</strong>。你有一个函数，其中完全取决于参数值而采取不同行为。针对该参数的每一个可能值，建立一个独立函数。</li>\n<li><strong>保持对象完整（Preserve Whole Object）</strong>。你从某个对象中取出若干值，将它们作为某一次函数调用时的参数。改为传递整个对象。</li>\n<li><strong>以函数取代参数（Replace Parameter with Methods）</strong>。对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。让参数接受者去除该项参数，并直接调用前一个函数。</li>\n<li><strong>引入参数对象（Introduce Parameter Object）</strong>。某些参数总是很自然地同时出现。以一个对象取代这些参数。</li>\n<li><strong>移除设值函数（Remove Setting Method）</strong>。类中的某个字段应该在对象创建时被设值，然后就不再改变。去掉该字段的所有设值函数。</li>\n<li><strong>隐藏函数（Hide Method）</strong>。有一个函数，从来没有被其他任何类用到。将这个函数修改为private。</li>\n<li><strong>以工厂函数取代构造函数（Replace Constructor with Factory Method）</strong>。你希望在创建对象时不仅仅是做简单的构建动作。将构建函数替换为工厂函数。</li>\n<li><strong>封装向下转型（Encapsulate Downcast）</strong>。某个函数返回的对象，需要由函数调用者执行向下转型。将向下转型动作移到函数中。</li>\n<li><strong>以异常取代错误码（Replace Error Code with Exception）</strong>。某个函数返回一个特定的代码，用以表示某种错误情况。改用异常。</li>\n<li><strong>以测试取代异常（Replace Exception with Test）</strong>。面对一个调用者可以预先检查的条件，你抛出了一个异常。修改调用者，使它在调用函数之前先做检查。</li>\n</ul>\n<hr>\n<h1 id=\"十二、处理概括关系\"><a href=\"#十二、处理概括关系\" class=\"headerlink\" title=\"十二、处理概括关系\"></a>十二、处理概括关系</h1><ul>\n<li><strong>字段上移（Pull Up Field）</strong>。两个子类拥有相同的字段。将该字段移至超类。</li>\n<li><strong>函数上移（Pull Up Method）</strong>。有些函数，在各个子类中产生完全相同的结果。将该函数移至超类。</li>\n<li><strong>构造函数本体上移（Pull Up Constructor Body）</strong>。你在各个子类中拥有一些构造函数，他们的本体几乎完全一致。在超类中新建一个构造函数，并在子类构造函数中调用它。</li>\n<li><strong>函数下移（Push Down Method）</strong>。超类中的某个函数只与部分（而非全部）子类有关。将这个函数移到相关的那些子类去。</li>\n<li><strong>字段下移（Push Down Field）</strong>。超类中的某个字段只被部分（而非全部）子类用到。将这个字段移到需要它的那些子类去。</li>\n<li><strong>提炼子类（Extract Subclass）</strong>。类中的某些特性只被某些（而非全部）实例用到。新建一个子类，将上面所说的那一部分特性移到子类中。</li>\n<li><strong>提炼超类（Extract Superclass）</strong>。两个类有相似特性。为这两个类建立一个超类，将相同特性移至超类。</li>\n<li><strong>提炼接口（Extract Interface）</strong>。若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。将相同的子集提炼到一个独立接口中。</li>\n<li><strong>折叠继承体系（Collapse Hierarchy）</strong>。超类和子类之间无太大差别。将它们合为一体。</li>\n<li><strong>塑造模板函数（Form TemPlate Method）</strong>。你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上所有不同。将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类。</li>\n<li><strong>以委托取代继承（Replace Inheritance with Delegation）</strong>。某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。在子类中新建一个字段用以保存超类；调整子类函数令它改而委托超类；然后去掉两者之间的继承关系。</li>\n<li><strong>以继承取代委托（Replace Delegation with Inheritance）</strong>。你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。让委托类来继承受托类。</li>\n</ul>\n<hr>\n<h1 id=\"十三、大型重构\"><a href=\"#十三、大型重构\" class=\"headerlink\" title=\"十三、大型重构\"></a>十三、大型重构</h1><ul>\n<li><strong>梳理并分解继承体系（Tease Apart Inheritance）</strong>。某个继承体系同时承担两项责任。建立两个继承体系，并通过委托关系让其中一个可以调用另一个。</li>\n<li><strong>将过程化设计转化为对象设计（Convert Procedural Design to Objects）</strong>。你手上有一些传统过程化风格的代码。将数据记录变成对象，将大块的行为分成小块，并将行为移入相关对象之中。</li>\n<li><strong>将领域和表述/显示分离（Separate Domain from Presentation）</strong>。某些GUI类之中包含了领域逻辑。将领域逻辑分离出来，为它们建立独立的领域类。</li>\n<li><strong>提炼继承体系（Extract Hierarchy）</strong>。你有某各类做了太多工作，其中一部分工作是以大量条件表达式完成的。建立继承体系，以一个子类表示一种特殊情况。</li>\n</ul>\n<hr>\n<h1 id=\"十四、经典句子\"><a href=\"#十四、经典句子\" class=\"headerlink\" title=\"十四、经典句子\"></a>十四、经典句子</h1><blockquote>\n<p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand. ——Martin Fowler<br>任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的代码。 ——Martin Fowler</p>\n</blockquote>\n<blockquote>\n<p>I’m not a great programmer; I’m just a good programmer with great habits. ——Kent Beck<br>我不是个伟大的程序员，我只是一个有着一些优秀习惯的好程序员。 ——Kent Beck</p>\n</blockquote>\n<blockquote>\n<p>Computer Science is the discipline that believes all problems can be solved with one more layer of indirection. ——Dennis DeBruler<br>计算机科学是这样一门科学：它相信所有问题都可以通过增加一个间接层来解决。——Dennis DeBruler</p>\n</blockquote>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"spring自定义标签","url":"https://zhangyaxiao.github.io/2018/02/02/spring自定义标签/","content":"<h1 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h1><ul>\n<li>创建一个需要扩展的组件</li>\n<li>定义一个XSD文件，描述组件内容</li>\n<li>创建一个java类，实现BeanDefinitionParser接口，用来解析XSD文件中的定义和组件定义</li>\n<li>创建一个Handler类，扩展子NameSpaceHandlerSupport，目的是将组件注册到容器。</li>\n<li>编写（添加）Spring.handlers和Spring.schemas文件。</li>\n</ul>\n<p>解析流程：通过Spring.schemas找到对应的XSD文件，校验xml格式；通过Spring.handlers找到对应的NamespaceHandler类作为解析自定义标签的类，通过init方法中的参数BeanDefinition实现类，根据解析的值生成BeanDefinition,</p>\n<p>目录结构<br><img src=\"/2018/02/02/spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/1075916-20180202134502093-432880497.png\" alt=\"xxx\"></p>\n<hr>\n<h2 id=\"创建模型类\"><a href=\"#创建模型类\" class=\"headerlink\" title=\"创建模型类\"></a>创建模型类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Apple</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appleColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAppleColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> appleColor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAppleColor</span><span class=\"params\">(String appleColor)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.appleColor = appleColor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"创建xsd文件\"><a href=\"#创建xsd文件\" class=\"headerlink\" title=\"创建xsd文件\"></a>创建xsd文件</h2><p>对于该类标签的定义，spring中有着相应的XSD定义文档<br><a href=\"http://www.springframework.org/schema/beans\">http://www.springframework.org/schema/beans</a><br>对于XSD，简单的说是xml的一个标签的定义，在这里就不对XSD过多的解释了，祥见<br><a href=\"http://www.w3school.com.cn/schema/schema_example.asp\">http://www.w3school.com.cn/schema/schema_example.asp</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsd:schema</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.zyx.com/schema/apple&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:beans</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://www.zyx.com/schema/apple&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">elementFormDefault</span>=<span class=\"string\">&quot;qualified&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">attributeFormDefault</span>=<span class=\"string\">&quot;unqualified&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xsd:import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class=\"attr\">schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xsd:element</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">xsd:complexType</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">xsd:all</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">xsd:element</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;apple-color&quot;</span> <span class=\"attr\">minOccurs</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">maxOccurs</span>=<span class=\"string\">&quot;1&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">xsd:all</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:string&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:string&quot;</span> <span class=\"attr\">use</span>=<span class=\"string\">&quot;required&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">xsd:complexType</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">xsd:element</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xsd:element</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;apple-color&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">xsd:complexType</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:string&quot;</span> <span class=\"attr\">use</span>=<span class=\"string\">&quot;required&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">xsd:complexType</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">xsd:element</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><br>type是用来定义该属性的格式，例如<br>xsd:string 表示是一个字符串，对格式没什么要求<br>xsd:id 表示该属性的值是一个id，有格式要求（例如不能以数字开头）。<br>xsd:IDREF 表示该属性的值与某xsd:id属性的值对应<br>其他还有很多，例如number，double，datetime等等。  </p>\n<hr>\n<h2 id=\"编写spring-schemas\"><a href=\"#编写spring-schemas\" class=\"headerlink\" title=\"编写spring.schemas\"></a>编写spring.schemas</h2><p>改配置文件主要是用一个url来映射我们第一步配置好的文件，形式如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http\\:<span class=\"comment\">//www.zyx.com/schema/apple.xsd=META-INF/namespace/apple.xsd</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"编写BeanDefinition，解析xml\"><a href=\"#编写BeanDefinition，解析xml\" class=\"headerlink\" title=\"编写BeanDefinition，解析xml\"></a>编写BeanDefinition，解析xml</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppleBeanDefinitionParser</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractSingleBeanDefinitionParser</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class <span class=\"title function_\">getBeanClass</span><span class=\"params\">(Element element)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Apple.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doParse</span><span class=\"params\">(Element element, BeanDefinitionBuilder bean)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> element.getAttribute(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">color</span> <span class=\"operator\">=</span> parseAppleColor(element);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(name)) &#123;</span><br><span class=\"line\">            bean.addPropertyValue(<span class=\"string\">&quot;name&quot;</span>, name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(color)) &#123;</span><br><span class=\"line\">            bean.addPropertyValue(<span class=\"string\">&quot;appleColor&quot;</span>, color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">parseAppleColor</span><span class=\"params\">(Element element)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Element</span> <span class=\"variable\">colorElement</span> <span class=\"operator\">=</span> DomUtils.getChildElementByTagName(element, <span class=\"string\">&quot;apple-color&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> colorElement.getAttribute(<span class=\"string\">&quot;color&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"编写NamespaceHandlerSupport\"><a href=\"#编写NamespaceHandlerSupport\" class=\"headerlink\" title=\"编写NamespaceHandlerSupport\"></a>编写NamespaceHandlerSupport</h2><p>我们配置了com.zyx.demo.springNamespace.AppleNamespaceHandler类作为解析自定义标签的类，所以namespace为apple的标签，都会用这里注册的标签解析器来解析<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppleNamespaceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">NamespaceHandlerSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        registerBeanDefinitionParser(<span class=\"string\">&quot;apple&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">AppleBeanDefinitionParser</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"编写spring-handlers\"><a href=\"#编写spring-handlers\" class=\"headerlink\" title=\"编写spring.handlers\"></a>编写spring.handlers</h2><p>这个配置文件用来配置解析我们apple标签,然后生成一些BeanDefinition进行注册<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http\\:<span class=\"comment\">//www.zyx.com/schema/apple=com.zyx.demo.springNamespace.AppleNamespaceHandler</span></span><br></pre></td></tr></table></figure><br>到这里就写完了，下面是测试</p>\n<hr>\n<h2 id=\"测试：创建spring-xml\"><a href=\"#测试：创建spring-xml\" class=\"headerlink\" title=\"测试：创建spring.xml\"></a>测试：创建spring.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:myname</span>=<span class=\"string\">&quot;http://www.zyx.com/schema/apple&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">     http://www.zyx.com/schema/apple http://www.zyx.com/schema/apple.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">default-autowire</span>=<span class=\"string\">&quot;byName&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">myname:apple</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;xxx&quot;</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;hongfushi&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">myname:apple-color</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;red&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">myname:apple-color</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">myname:apple</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSpringNamespace</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;spring/namespace&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Apple</span> <span class=\"variable\">apple</span> <span class=\"operator\">=</span> SpringUtils.getBean(Apple.class);</span><br><span class=\"line\">        System.out.println(apple.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apple.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","categories":[],"tags":["spring"]},{"title":"Lombok引入简化Java代码","url":"https://zhangyaxiao.github.io/2018/01/31/Lombok引入简化Java代码/","content":"<h1 id=\"Lombok简介\"><a href=\"#Lombok简介\" class=\"headerlink\" title=\"Lombok简介\"></a>Lombok简介</h1><p>lombok是一个可以通过简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 Java 代码的工具，简单来说，比如我们新建了一个类，然后在其中写了几个字段，然后通常情况下我们需要手动去建立getter和setter方法啊，构造函数啊之类的，lombok的作用就是为了省去我们手动创建这些代码的麻烦，它能够在我们编译源码的时候自动帮我们生成这些方法。</p>\n<p>相关文档 <a href=\"https://projectlombok.org/features/all\">https://projectlombok.org/features/all</a><br>github地址 <a href=\"https://github.com/rzwitserloot/lombok\">https://github.com/rzwitserloot/lombok</a></p>\n<hr>\n<h1 id=\"Lombok安装\"><a href=\"#Lombok安装\" class=\"headerlink\" title=\"Lombok安装\"></a>Lombok安装</h1><p>lombok的安装跟一般引用jar包没有什么区别，可以到官网上下载最新的jar包，然后导入到项目里面就好啦。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;lombok.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Intellij idea开发的话需要安装Lombok plugin</p>\n<hr>\n<h1 id=\"Lombok使用\"><a href=\"#Lombok使用\" class=\"headerlink\" title=\"Lombok使用\"></a>Lombok使用</h1><p>几种常用的 lombok 注解：  </p>\n<blockquote>\n<p>@NonNull<br>可以帮助我们避免空指针。</p>\n</blockquote>\n<blockquote>\n<p>@Cleanup<br>自动帮我们调用close()方法。</p>\n</blockquote>\n<blockquote>\n<p>@Getter/@Setter<br>自动生成Getter/Setter方法</p>\n</blockquote>\n<blockquote>\n<p>@ToString<br>生成toString</p>\n</blockquote>\n<blockquote>\n<p>@EqualsAndHashCode<br>生成hashCode和equals实现</p>\n</blockquote>\n<blockquote>\n<p>@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor<br>构造函数定制：生成不带参数的构造函数，每个最终/非空字段一个参数或每个字段一个参数。</p>\n</blockquote>\n<blockquote>\n<p>@Data<br>注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法</p>\n</blockquote>\n<blockquote>\n<p>@Value<br>不可变类很容易。</p>\n</blockquote>\n<blockquote>\n<p>@Builder<br>建造者模式创建对象</p>\n</blockquote>\n<blockquote>\n<p>@SneakyThrows<br>对标注的方法进行 try catch 后抛出异常</p>\n</blockquote>\n<blockquote>\n<p>@Synchronized<br>在标注的方法内 使用 synchronized</p>\n</blockquote>\n<blockquote>\n<p>@Log4j<br>注解在类上；为类提供一个 属性名为log 的 log4j 日志对象  </p>\n</blockquote>\n<p>更多详细文档 <a href=\"https://projectlombok.org/features/all\">https://projectlombok.org/features/all</a>  </p>\n<hr>\n","categories":[],"tags":["java"]},{"title":"java自定义注解","url":"https://zhangyaxiao.github.io/2018/01/31/java自定义注解/","content":"<p>转载，原文地址 <a href=\"https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html\">https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html</a></p>\n<hr>\n<h1 id=\"什么是注解？\"><a href=\"#什么是注解？\" class=\"headerlink\" title=\"什么是注解？\"></a>什么是注解？</h1><p>对于很多初次接触的开发者来说应该都有这个疑问？Annontation是Java5开始引入的新特征，中文名称叫注解。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息是与程序的业务逻辑无关，并且供指定的工具或框架使用。Annontation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。<br>Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。  </p>\n<hr>\n<h1 id=\"常见标准的Annotation\"><a href=\"#常见标准的Annotation\" class=\"headerlink\" title=\"常见标准的Annotation\"></a>常见标准的Annotation</h1><ol>\n<li><strong>Override</strong><br> java.lang.Override是一个标记类型注解，它被用作标注方法。它说明了被标注的方法重载了父类的方法，起到了断言的作用。如果我们使用了这种注解在一个没有覆盖父类方法的方法时，java编译器将以一个编译错误来警示。</li>\n<li><strong>Deprecated</strong><br> Deprecated也是一种标记类型注解。当一个类型或者类型成员使用@Deprecated修饰的话，编译器将不鼓励使用这个被标注的程序元素。所以使用这种修饰具有一定的“延续性”：如果我们在代码中通过继承或者覆盖的方式使用了这个过时的类型或者成员，虽然继承或者覆盖后的类型或者成员并不是被声明为@Deprecated，但编译器仍然要报警。</li>\n<li><strong>SuppressWarnings</strong><br> SuppressWarning不是一个标记类型注解。它有一个类型为String[]的成员，这个成员的值为被禁止的警告名。对于javac编译器来讲，被-Xlint选项有效的警告名也同样对@SuppressWarings有效，同时编译器忽略掉无法识别的警告名。<br>　　@SuppressWarnings(“unchecked”)</li>\n</ol>\n<hr>\n<h1 id=\"注解的用处\"><a href=\"#注解的用处\" class=\"headerlink\" title=\"注解的用处\"></a>注解的用处</h1><ol>\n<li>生成文档。这是最常见的，也是java 最早提供的注解。常用的有@param @return 等</li>\n<li>跟踪代码依赖性，实现替代配置文件功能。比如Dagger 2依赖注入，未来java开发，将大量注解配置，具有很大用处;</li>\n<li>在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。</li>\n</ol>\n<hr>\n<h1 id=\"注解的原理\"><a href=\"#注解的原理\" class=\"headerlink\" title=\"注解的原理\"></a>注解的原理</h1><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。而我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象$Proxy1。通过代理对象调用自定义注解（接口）的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p>\n<hr>\n<h1 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h1><p>java.lang.annotation提供了四种元注解，专门注解其他的注解（在自定义注解的时候，需要使用到元注解）：</p>\n<blockquote>\n<p>@Documented –注解是否将包含在JavaDoc中<br>@Retention –什么时候使用该注解<br>@Target –注解用于什么地方<br>@Inherited – 是否允许子类继承该注解</p>\n</blockquote>\n<ul>\n<li><p>@Retention– 定义该注解的生命周期</p>\n<ul>\n<li>RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。</li>\n<li>RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式</li>\n<li>RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</li>\n</ul>\n</li>\n<li><p>Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括</p>\n<ul>\n<li>ElementType.CONSTRUCTOR:用于描述构造器</li>\n<li>ElementType.FIELD:成员变量、对象、属性（包括enum实例）</li>\n<li>ElementType.LOCAL_VARIABLE:用于描述局部变量</li>\n<li>ElementType.METHOD:用于描述方法</li>\n<li>ElementType.PACKAGE:用于描述包</li>\n<li>ElementType.PARAMETER:用于描述参数</li>\n<li>ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>\n</ul>\n</li>\n<li><p>@Documented–一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。</p>\n</li>\n<li><p>@Inherited – 定义该注释和子类的关系</p>\n<ul>\n<li>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h1><p>自定义注解类编写的一些规则:</p>\n<ol>\n<li>Annotation型定义为@interface, 所有的Annotation会自动继承java.lang.Annotation这一接口,并且不能再去继承别的类或是接口.</li>\n<li>参数成员只能用public或默认(default)这两个访问权修饰</li>\n<li>参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和String、Enum、Class、annotations等数据类型,以及这一些类型的数组.</li>\n<li>要获取类方法和字段的注解信息，必须通过Java的反射技术来获取 Annotation对象,因为你除此之外没有别的获取注解对象的方法</li>\n<li>注解也可以没有定义成员, 不过这样注解就没啥用了</li>\n</ol>\n<hr>\n<h1 id=\"自定义注解实例\"><a href=\"#自定义注解实例\" class=\"headerlink\" title=\"自定义注解实例\"></a>自定义注解实例</h1><p>定义注解，我定义了4个注解，分别是FruitCategory，FruitColor，FruitColor，FruitColor<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FruitCategory &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FruitColor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span>&#123; BLUE,RED,GREEN&#125;;</span><br><span class=\"line\">    Color <span class=\"title function_\">fruitColor</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Color.GREEN;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FruitColor &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FruitColor &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">id</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">address</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用定义好的注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FruitCategory(value = &quot;水果&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Apple</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@FruitName(&quot;Apple&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appleName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@FruitColor(fruitColor= FruitColor.Color.RED)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appleColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@FruitProvider(id=1,name=&quot;陕西红富士集团&quot;,address=&quot;陕西省西安市延安路89号红富士大厦&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appleProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAppleColor</span><span class=\"params\">(String appleColor)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.appleColor = appleColor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAppleColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> appleColor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAppleName</span><span class=\"params\">(String appleName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.appleName = appleName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAppleName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> appleName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAppleProvider</span><span class=\"params\">(String appleProvider)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.appleProvider = appleProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAppleProvider</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> appleProvider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解析注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FruitInfoUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getFruitInfo</span><span class=\"params\">(Class&lt;?&gt; clazz)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String strFruitName=<span class=\"string\">&quot; 水果名称：&quot;</span>;</span><br><span class=\"line\">        String strFruitColor=<span class=\"string\">&quot; 水果颜色：&quot;</span>;</span><br><span class=\"line\">        String strFruitProvicer=<span class=\"string\">&quot;供应商信息：&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">FruitCategory</span> <span class=\"variable\">fruitCategory</span> <span class=\"operator\">=</span> clazz.getAnnotation(FruitCategory.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;分类：&quot;</span>+fruitCategory.value());</span><br><span class=\"line\"></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Field field :fields)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(field.isAnnotationPresent(FruitName.class))&#123;</span><br><span class=\"line\">                <span class=\"type\">FruitName</span> <span class=\"variable\">fruitName</span> <span class=\"operator\">=</span> (FruitName) field.getAnnotation(FruitName.class);</span><br><span class=\"line\">                strFruitName=strFruitName+fruitName.value();</span><br><span class=\"line\">                System.out.println(strFruitName);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(field.isAnnotationPresent(FruitColor.class))&#123;</span><br><span class=\"line\">                FruitColor fruitColor= (FruitColor) field.getAnnotation(FruitColor.class);</span><br><span class=\"line\">                strFruitColor=strFruitColor+fruitColor.fruitColor().toString();</span><br><span class=\"line\">                System.out.println(strFruitColor);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(field.isAnnotationPresent(FruitProvider.class))&#123;</span><br><span class=\"line\">                FruitProvider fruitProvider= (FruitProvider) field.getAnnotation(FruitProvider.class);</span><br><span class=\"line\">                strFruitProvicer=<span class=\"string\">&quot; 供应商编号：&quot;</span>+fruitProvider.id()+<span class=\"string\">&quot; 供应商名称：&quot;</span>+fruitProvider.name()+<span class=\"string\">&quot; 供应商地址：&quot;</span>+fruitProvider.address();</span><br><span class=\"line\">                System.out.println(strFruitProvicer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">            FruitInfoUtil.getFruitInfo(Apple.class);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分类：水果</span><br><span class=\"line\">水果名称：Apple</span><br><span class=\"line\">水果颜色：RED</span><br><span class=\"line\">供应商编号：1 供应商名称：陕西红富士集团 供应商地址：陕西省西安市延安路89号红富士大厦</span><br></pre></td></tr></table></figure></p>\n<hr>\n","categories":[],"tags":["java"]},{"title":"ThreadPoolTaskExecutor","url":"https://zhangyaxiao.github.io/2018/01/16/ThreadPoolTaskExecutor/","content":"<p>我们在开发过程中经常要用到线程池，线程池应该统一管理起来，而不是随用随建。ThreadPoolTaskExecutor——将线程池交给spring管理</p>\n<hr>\n<h1 id=\"ThreadPoolTaskExecutor配置\"><a href=\"#ThreadPoolTaskExecutor配置\" class=\"headerlink\" title=\"ThreadPoolTaskExecutor配置\"></a>ThreadPoolTaskExecutor配置</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring thread pool executor --&gt;</span>           </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;taskExecutor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 线程池维护线程的最少数量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;corePoolSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;5&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 允许的空闲时间 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keepAliveSeconds&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;200&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 线程池维护线程的最大数量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 缓存队列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;queueCapacity&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;20&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 对拒绝task的处理策略 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;rejectedExecutionHandler&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Reject策略预定义有四种： </p>\n<ol>\n<li><strong>ThreadPoolExecutor.AbortPolicy</strong>，默认的策略,处理程序遭到拒绝将抛出运行时 RejectedExecutionException。 </li>\n<li><strong>ThreadPoolExecutor.CallerRunsPolicy</strong> ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃. </li>\n<li><strong>ThreadPoolExecutor.DiscardPolicy</strong>，不能执行的任务将被丢弃. </li>\n<li><strong>ThreadPoolExecutor.DiscardOldestPolicy</strong>，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）.</li>\n</ol>\n<hr>\n<h1 id=\"execute-Runable-方法执行过程\"><a href=\"#execute-Runable-方法执行过程\" class=\"headerlink\" title=\"execute(Runable)方法执行过程\"></a>execute(Runable)方法执行过程</h1><ul>\n<li><p>如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。</p>\n</li>\n<li><p>如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。</p>\n</li>\n<li><p>如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maxPoolSize，建新的线程来处理被添加的任务。</p>\n</li>\n<li><p>如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maxPoolSize，那么通过handler所指定的策略来处理此任务。也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程 maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。</p>\n</li>\n<li><p>当线程池中的线程数量大于corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。</p>\n</li>\n</ul>\n<hr>\n","categories":[],"tags":["spring"]},{"title":"java四种线程池简介，使用","url":"https://zhangyaxiao.github.io/2018/01/11/java四种线程池简介，使用/","content":"<h1 id=\"线程池简介\"><a href=\"#线程池简介\" class=\"headerlink\" title=\"线程池简介\"></a>线程池简介</h1><h2 id=\"为什么使用线程池\"><a href=\"#为什么使用线程池\" class=\"headerlink\" title=\"为什么使用线程池\"></a>为什么使用线程池</h2><ol>\n<li>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>\n<li>可以根据系统的承受能力，调整线程池中工作线线程的数目，防止消耗过多的内存</li>\n<li>web项目应该创建统一的线程池，如静态或者交给容器处理，而不是每回都去 new 一个线程池</li>\n</ol>\n<h2 id=\"线程池属性\"><a href=\"#线程池属性\" class=\"headerlink\" title=\"线程池属性\"></a>线程池属性</h2><ul>\n<li>corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务</li>\n<li>maximumPoolSize：线程池最大线程数</li>\n<li>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize</li>\n<li>workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：</li>\n<li>threadFactory：线程工厂，主要用来创建线程；</li>\n<li>handler：表示当拒绝处理任务时的策略</li>\n</ul>\n<h2 id=\"线程池流程\"><a href=\"#线程池流程\" class=\"headerlink\" title=\"线程池流程\"></a>线程池流程</h2><ol>\n<li>当池子大小小于corePoolSize就新建线程，并处理请求</li>\n<li>当池子大小等于corePoolSize，把请求放入workQueue中，池子里的空闲线程就去从workQueue中取任务并处理</li>\n<li>当workQueue放不下新入的任务时，新建线程入池，并处理请求，如果池子大小撑到了maximumPoolSize就用RejectedExecutionHandler来做拒绝处理</li>\n<li>另外，当池子的线程数大于corePoolSize的时候，多余的线程会等待keepAliveTime长的时间，如果无请求可处理就自行销毁</li>\n</ol>\n<hr>\n<h1 id=\"四种线程池\"><a href=\"#四种线程池\" class=\"headerlink\" title=\"四种线程池\"></a>四种线程池</h1><p><strong>其实四种线程池都是 ThreadPoolExecutor ，只是创建参数不同</strong></p>\n<h2 id=\"newSingleThreadExecutor\"><a href=\"#newSingleThreadExecutor\" class=\"headerlink\" title=\"newSingleThreadExecutor\"></a>newSingleThreadExecutor</h2><blockquote>\n<p>创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newSingleThreadExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">        (<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h2><blockquote>\n<p>创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newFixedThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> nThreads)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"newCachedThreadPool\"><a href=\"#newCachedThreadPool\" class=\"headerlink\" title=\"newCachedThreadPool\"></a>newCachedThreadPool</h2><blockquote>\n<p>创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newCachedThreadPool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"newScheduledThreadPool\"><a href=\"#newScheduledThreadPool\" class=\"headerlink\" title=\"newScheduledThreadPool\"></a>newScheduledThreadPool</h2><blockquote>\n<p>创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title function_\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, TimeUnit.NANOSECONDS,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">DelayedWorkQueue</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<h1 id=\"使用例子（CountDownLatch-Future）\"><a href=\"#使用例子（CountDownLatch-Future）\" class=\"headerlink\" title=\"使用例子（CountDownLatch,Future）\"></a>使用例子（CountDownLatch,Future）</h1><p>例子：线程数是5，执行10个任务，执行完毕之后关闭线程池</p>\n<h2 id=\"使用isTerminated判断线程是否执行完成\"><a href=\"#使用isTerminated判断线程是否执行完成\" class=\"headerlink\" title=\"使用isTerminated判断线程是否执行完成\"></a>使用isTerminated判断线程是否执行完成</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;线程名称&quot;</span>+Thread.currentThread().getName());</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>*<span class=\"number\">3</span>);</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;线程名称&quot;</span>+Thread.currentThread().getName()+<span class=\"string\">&quot;结束&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始关闭线程池，不再接受新任务&quot;</span>);</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===========&quot;</span>);</span><br><span class=\"line\">　　　　　<span class=\"comment\">//等待所有线程执行完成</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!executorService.isTerminated()) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程池关闭完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用CountDownLatch判断线程是否执行完成\"><a href=\"#使用CountDownLatch判断线程是否执行完成\" class=\"headerlink\" title=\"使用CountDownLatch判断线程是否执行完成\"></a>使用CountDownLatch判断线程是否执行完成</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">CountDownLatch</span> <span class=\"variable\">countDownLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;线程名称&quot;</span>+Thread.currentThread().getName());</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>*<span class=\"number\">3</span>);</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;线程名称&quot;</span>+Thread.currentThread().getName()+<span class=\"string\">&quot;结束&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//计数器减一</span></span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待所有线程执行结束</span></span><br><span class=\"line\">            countDownLatch.await();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始关闭线程池&quot;</span>);</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程池关闭完成&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Future-得到线程任务返回结果\"><a href=\"#使用Future-得到线程任务返回结果\" class=\"headerlink\" title=\"使用Future  得到线程任务返回结果\"></a>使用Future  得到线程任务返回结果</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">        List&lt;Future&lt;String&gt;&gt; futures = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Future&lt;String&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//使用future接受处理结果</span></span><br><span class=\"line\">            Future&lt;String&gt; future = executorService.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;线程名称&quot;</span>+Thread.currentThread().getName());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Thread.currentThread().getName();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            futures.add(future);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Future&lt;String&gt; future : futures)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//get方法会阻塞当前线程，直到任务执行完成返回结果</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;返回结果=====&quot;</span>+future.get());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//开始关闭线程池</span></span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程池关闭完成&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","categories":[],"tags":["java"]},{"title":"diamond简介和使用","url":"https://zhangyaxiao.github.io/2018/01/03/diamond简介和使用/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>diamond是淘宝内部使用的一个管理持久配置的系统，它的特点是简单、可靠、易用，目前淘宝内部绝大多数系统的配置，由diamond来进行统一管理。<br>diamond为应用系统提供了获取配置的服务，应用不仅可以在启动时从diamond获取相关的配置，而且可以在运行中对配置数据的变化进行感知并获取变化后的配置数据。  </p>\n<p>diamond的特点是简单、可靠、易用：</p>\n<ul>\n<li>简单：整体结构非常简单，从而减少了出错的可能性。</li>\n<li>可靠：应用方在任何情况下都可以启动，在承载淘宝核心系统并正常运行一年多以来，没有出现过任何重大故障。</li>\n<li>易用：客户端使用只需要两行代码，暴露的接口都非常简单，易于理解。</li>\n</ul>\n<p>github地址 <a href=\"https://github.com/takeseem/diamond\">https://github.com/takeseem/diamond</a></p>\n<h2 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h2><ol>\n<li>作为一个配置中心，diamond的功能分为发布和订阅两部分。因为diamond存放的是持久数据，这些数据的变化频率不会很高，甚至很低，所以发布采用手工的形式，通过diamond后台管理界面发布；订阅是diamond的核心功能，订阅通过diamond-client的API进行。</li>\n<li>diamond服务端采用mysql加本地文件的形式存放配置数据。发布数据时，数据先写到mysql，再写到本地文件；订阅数据时，直接获取本地文件，不查询数据库，这样可以最大程度减少对数据库的压力。</li>\n<li>diamond服务端是一个集群，集群中的每台机器连接同一个mysql，集群之间的数据同步通过两种方式进行，一是每台server定时去mysqldump数据到本地文件，二是某一台server接收发布数据请求，在更新完mysql和本机的本地文件后，发送一个HTTP请求（通知）到集群中的其他几台server，其他server收到通知，去mysql中将刚刚更新的数据dump到本地文件。</li>\n<li>每一台server前端都有一个nginx，用来做流量控制。</li>\n<li>地址服务器是一台有域名的机器，上面运行有一个HTTPserver，其中有一个静态文件，存放着diamond服务器的地址列表。客户端启动时，根据自身的域名绑定，连接到地址服务器，取回diamond服务器的地址列表，从中随机选择一台diamond服务器进行连接。</li>\n</ol>\n<p>可以看到，整个diamond的架构非常简单，使用的都是最常用的一些技术以及产品，它之所以表现得非常稳定，跟其架构简单是分不开的，当然，稳定的另一个主要原因是它具备一套比较完善的容灾机制，容灾机制将在下一篇文章中讲述。</p>\n<hr>\n<h1 id=\"服务端安装\"><a href=\"#服务端安装\" class=\"headerlink\" title=\"服务端安装\"></a>服务端安装</h1><ol>\n<li>检出源码，修改配置文件 jdbc.properties 中的数据库连接信息，完成之后maven打包</li>\n<li>数据库执行初始化sql<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database diamond;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> diamond.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> CK@<span class=\"string\">&#x27;%&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">use diamond</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> config_info (</span><br><span class=\"line\">`id` <span class=\"type\">bigint</span>(<span class=\"number\">64</span>) unsigned <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> auto_increment,</span><br><span class=\"line\">`data_id` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">default</span> <span class=\"string\">&#x27; &#x27;</span>,</span><br><span class=\"line\">`group_id` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">default</span> <span class=\"string\">&#x27; &#x27;</span>,</span><br><span class=\"line\">`content` longtext <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">`md5` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">default</span> <span class=\"string\">&#x27; &#x27;</span>,</span><br><span class=\"line\">`gmt_create` datetime <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">default</span> <span class=\"string\">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class=\"line\">`gmt_modified` datetime <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">default</span> <span class=\"string\">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`),</span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span> KEY `uk_config_datagroup` (`data_id`,`group_id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 ;</span><br></pre></td></tr></table></figure></li>\n<li>将打好的包 diamond-server.war 放到tomcat工作目录，启动。启动成功之后，访问 <a href=\"http://localhost:8090/diamond-server/\">http://localhost:8090/diamond-server/</a> </li>\n<li>发布数据，账号密码是user.properties中配置的，默认是 abc=123。登录后进入后台管理界面，然后点击“配置信息管理”—— “添加配置信息”，在输入框中输入dataId、group、内容，最后点击“提交”即可。成功后，可以在“配置信息管理”中查询到发布的数据。</li>\n<li>集群安装。修改node.properties，格式为   ip\\:port  ，这里面的冒号，一定要通过\\转义一下，要不然获取地址不对。当存在node节点的配置，发布修改数据后会通知其他节点更新。</li>\n<li>每台diamond-server 前建议增加nginx转发，方便限流，而且客户端默认请求80端口</li>\n<li>其他配置： system.properties中的dump_config_interval 是多久去更新一次本地缓存的数据 默认是 600秒</li>\n</ol>\n<hr>\n<h1 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h1><p>客户端获取数据方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DiamondManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultDiamondManager</span>(group, dataId, <span class=\"keyword\">new</span> <span class=\"title class_\">ManagerListener</span>() &#123;  </span><br><span class=\"line\">   <span class=\"keyword\">public</span> Executor <span class=\"title function_\">getExecutor</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receiveConfigInfo</span><span class=\"params\">(String configInfo)</span> &#123;  </span><br><span class=\"line\">      <span class=\"comment\">// 客户端处理数据的逻辑  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;);  </span><br></pre></td></tr></table></figure></p>\n<p>集成思路：重写PropertyPlaceholderConfigurer，将diamond管理的配置交个spring，spring的xml可以直接使用${}来查询数据，增加工具类PropertiesUtils.java 方便查询diamond管理的数据。具体代码<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入依赖diamond --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.taobao.diamond<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>diamond-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.5.4.taocode-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.taobao.diamond<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>diamond-utils<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.5.4.taocode-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>重写PropertyPlaceholderConfigurer<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyx.demo.common.spring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;重写PropertyPlaceholderConfigurer，将diamond配置信息交给spring&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringPropertyPlaceholderConfigurer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PropertyPlaceholderConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; diamondList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">getDiamondList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> diamondList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDiamondList</span><span class=\"params\">(List&lt;String&gt; diamondList)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.diamondList = diamondList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processProperties</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> PropertiesUtils.getProperties(diamondList);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">diamondFilePath</span> <span class=\"operator\">=</span> PropertiesUtils.DIAMOND_FILEPATH;<span class=\"comment\">//System.getProperty(&quot;user.home&quot;) + System.getProperty(&quot;file.separator&quot;) + &quot;.diamond.domain&quot;;</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;从diamond获取配置为空(dataId和group是&quot;</span> + diamondList + <span class=\"string\">&quot;)，请检查diamond要连接的环境:&quot;</span> + diamondFilePath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setProperties(properties);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Iterator&lt;Object&gt; iterator = properties.keySet().iterator(); iterator.hasNext();) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (String) iterator.next();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> (String) properties.get(key);</span><br><span class=\"line\">            props.setProperty(key, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.processProperties(beanFactoryToProcess, properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>PropertiesUtils.java工具类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zyx.demo.common.spring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.taobao.diamond.manager.ManagerListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.taobao.diamond.manager.ManagerListenerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.taobao.diamond.manager.impl.DefaultDiamondManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.FileUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;工具类，获取diamond配置&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PropertiesUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Properties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> Logger.getLogger(PropertiesUtils.class);</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">TIME_OUT</span> <span class=\"operator\">=</span> <span class=\"number\">5000L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String diamondIpList;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; diamondIdgroupList;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DIAMOND_FILEPATH=<span class=\"string\">&quot;diamond.data&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Properties <span class=\"title function_\">getProperties</span><span class=\"params\">(List&lt;String&gt; diamondList)</span> &#123;</span><br><span class=\"line\">            diamondIdgroupList = diamondList;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == properties) &#123;</span><br><span class=\"line\">                init();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Properties <span class=\"title function_\">getProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == properties) &#123;</span><br><span class=\"line\">                init();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 根据key从map中取值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getValueByKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == properties) &#123;</span><br><span class=\"line\">                init();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> properties.get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getStringValueByKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (String) getValueByKey(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getIntValueByKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.parseInt((String) getValueByKey(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">getDoubleValueByKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Double.parseDouble((String) getValueByKey(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">getBooleanValueByKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Boolean.parseBoolean((String) (getValueByKey(key)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getStringValueByKey</span><span class=\"params\">(String key, String defaultV)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> getValueByKey(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> defaultV;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (String) value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getIntValueByKey</span><span class=\"params\">(String key, <span class=\"type\">int</span> defaultV)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> getValueByKey(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> defaultV;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.parseInt((String) value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">getDoubleValueByKey</span><span class=\"params\">(String key, <span class=\"type\">double</span> defaultV)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> getValueByKey(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> defaultV;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Double.parseDouble((String) value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">getBooleanValueByKey</span><span class=\"params\">(String key, <span class=\"type\">boolean</span> defaultV)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> getValueByKey(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> defaultV;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Boolean.parseBoolean((String) (value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * init(读取多个dataId 与 groupId )*/</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">diamondFilePath</span> <span class=\"operator\">=</span> PropertiesUtils.class.getClassLoader().getResource(DIAMOND_FILEPATH).getPath() ;<span class=\"comment\">//System.getProperty(&quot;user.home&quot;) + &quot;/.diamond.domain&quot;;</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                List&lt;String&gt; contentList = FileUtils.readLines(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(diamondFilePath), <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String ipList : contentList) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!ipList.contains(<span class=\"string\">&quot;#&quot;</span>)) &#123;</span><br><span class=\"line\">                        diamondIpList = ipList.trim();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">&quot;获取diamond文件内容失败：&quot;</span> + e.getMessage(), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            logger.info(<span class=\"string\">&quot;diaond--&gt;filePath:&quot;</span> + diamondFilePath + <span class=\"string\">&quot; change diamondIpList:&quot;</span> + diamondIpList);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diamondIdgroupList != <span class=\"literal\">null</span> &amp;&amp; diamondIpList != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String str : diamondIdgroupList) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// dataid</span></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">dataId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">groupId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (str.indexOf(<span class=\"string\">&quot;:&quot;</span>) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        dataId = str.substring(<span class=\"number\">0</span>, str.indexOf(<span class=\"string\">&quot;:&quot;</span>));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (str.lastIndexOf(<span class=\"string\">&quot;:&quot;</span>) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        groupId = str.substring(str.indexOf(<span class=\"string\">&quot;:&quot;</span>) + <span class=\"number\">1</span>,str.length());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!StringUtils.isEmpty(dataId) &amp;&amp; !StringUtils.isEmpty(groupId)) &#123;</span><br><span class=\"line\">                        <span class=\"type\">DefaultDiamondManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultDiamondManager</span>(dataId, groupId, <span class=\"keyword\">new</span> <span class=\"title class_\">ManagerListenerAdapter</span>() &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receiveConfigInfo</span><span class=\"params\">(String configInfo)</span> &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//数据发生变更时，更新数据</span></span><br><span class=\"line\">                                putAndUpdateProperties(configInfo);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;, diamondIpList);</span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">configInfo</span> <span class=\"operator\">=</span> manager.getAvailableConfigureInfomation(TIME_OUT);</span><br><span class=\"line\">                        logger.debug(<span class=\"string\">&quot;从diamond取到的数据是：&quot;</span> + configInfo);</span><br><span class=\"line\">                        putAndUpdateProperties(configInfo);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        logger.error(<span class=\"string\">&quot;diamond数据配置properties异常: DataId:&quot;</span> + dataId + <span class=\"string\">&quot;,Group:&quot;</span> + groupId);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">&quot;diamond数据配置properties异常: diamondBeanList is null or diamondIpList is null&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 更新properties中数据*/</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">putAndUpdateProperties</span><span class=\"params\">(String configInfo)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(configInfo)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (properties == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    properties = <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    properties.load(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(configInfo.getBytes()));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    logger.error(<span class=\"string\">&quot;根据diamond数据流转成properties异常&quot;</span> + e.getMessage(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">&quot;从diamond取出的数据为空，请检查配置&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">getDiamondIdgroupList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> diamondIdgroupList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDiamondIdgroupList</span><span class=\"params\">(List&lt;String&gt; diamondIdgroupList)</span> &#123;</span><br><span class=\"line\">            PropertiesUtils.diamondIdgroupList = diamondIdgroupList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getDiamondIpList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> diamondIpList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>spring配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- diamond管理配置文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span> = <span class=\"string\">&quot;propertyConfigurer&quot;</span>  <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.zyx.demo.common.spring.SpringPropertyPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;diamondList&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com-zyx-demo:com-zyx-demo<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"容灾机制\"><a href=\"#容灾机制\" class=\"headerlink\" title=\"容灾机制\"></a>容灾机制</h1><p>diamond具有一套完备的容灾机制，容灾机制涉及到client和server两部分，主要包括以下几个方面：</p>\n<ul>\n<li><strong>server存储数据的方式。</strong><br>  server存储数据是“数据库+本地文件”的方式，集群间的数据同步我们在之前的文章中讲过（请参考专题二的原理部分），client订阅数据时，访问的是本地文件，不查询数据库，这样即使数据库出问题了，仍然不影响client的订阅。</li>\n<li><strong>server是一个集群。</strong><br>  这是一个基本的容灾机制，集群中的一台server不可用了，client发现后可以自动切换到其他server上进行访问，自动切换在client内部实现。</li>\n<li><strong>client保存snapshot</strong><br>  client每次从server获取到数据后，都会将数据保存在本地文件系统，diamond称之为snapshot，即数据快照。当client下次启动发现在超时时间内所有server均不可用（可能是网络故障），它会使用snapshot中的数据快照进行启动。</li>\n<li><strong>client校验MD5</strong><br>  client每次从server获取到数据后，都会进行MD5校验（数据保存在responsebody，MD5保存在responseheader），以防止因网络故障造成的数据不完整，MD5校验不通过直接抛出异常。</li>\n<li><strong>client与server分离</strong><br>  client可以和server完全分离，单独使用，diamond定义了一个“容灾目录”的概念，client在启动时会创建这个目录，每次主动获取数据（即调用getAvailableConfigInfomation()方法），都会优先从“容灾目录”获取数据，如果client按照一个固定的规则，在“容灾目录”下配置了需要的数据，那么client直接获取到数据返回，不再通过网络从diamond-server获取数据。同样的，在每次轮询时，都会优先轮询“容灾目录”，如果发现配置还存在于其中，则不再向server发出轮询请求。以上的情形，会持续到“容灾目录”的配置数据被删除为止。</li>\n</ul>\n<p>根据以上的容灾机制，我们可以总结一下diamond整个系统完全不可用的条件：</p>\n<ol>\n<li>数据库不可用。</li>\n<li>所有server均不可用。</li>\n<li>client主动删除了snapshot</li>\n<li>client没有备份配置数据，导致其不能配置“容灾目录”。</li>\n</ol>\n<p>同时满足以上4个条件的概率，在生产环境中是极小的。以上就是diamond的容灾机制</p>\n<hr>\n<h1 id=\"其他相关\"><a href=\"#其他相关\" class=\"headerlink\" title=\"其他相关\"></a>其他相关</h1><p>disconf是来自百度的分布式配置管理平台。<br>包括百度、滴滴出行、银联、网易、拉勾网、苏宁易购、顺丰科技 等知名互联网公司正在使用!<br>github地址 <a href=\"https://github.com/knightliao/disconf\">https://github.com/knightliao/disconf</a></p>\n<hr>\n","categories":[],"tags":["java"]},{"title":"设计模式之策略模式","url":"https://zhangyaxiao.github.io/2017/10/19/设计模式之策略模式/","content":"<h1 id=\"策略模式：\"><a href=\"#策略模式：\" class=\"headerlink\" title=\"策略模式：\"></a>策略模式：</h1><p>定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</p>\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p><img src=\"/2017/10/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/策略类图.gif\" alt=\"策略类图\"></p>\n<p>抽象策略角色strategy： 策略类，通常由一个接口或者抽象类实现。<br>具体策略角色ConcreteStrategyA,ConcreteStrategyB,ConcreteStrategyC：包装了相关的算法和行为。<br>环境角色Context：持有一个策略类的引用，最终给客户端调用。  </p>\n<hr>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li>策略模式提供了管理算法族的办法</li>\n<li>策略模式提供了可以替换继承关系的方法</li>\n<li>使用策略模式可以避免使用多重条件转移语句</li>\n</ul>\n<hr>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ul>\n<li>客户端必须知道所有的策略，并自行决定使用哪一个策略类</li>\n<li>策略模式造成很多的策略类，每个具体策略类都会产生一个新类。</li>\n</ul>\n<hr>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>我们有一套关于鸭子的程序，Duck是超类，实现了鸭子共有的行为如 quack(“呱呱叫”) swim(“游泳”)，子类为具体的鸭子分别实现了display()//外表;<br>RedHeadDuck：红头鸭<br>MallardDuck：绿头鸭<br><img src=\"/2017/10/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/策略1.png\" alt=\"策略1\"></p>\n<p>然后我们需要给鸭子增加飞行的动作,我们在超类中增加了fly()方法<br><img src=\"/2017/10/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/策略2.png\" alt=\"策略2\"></p>\n<p>新需求来了，我们需要增加两个子类，分别是<br>RubberDuck：橡皮鸭 需要重写 quack(),display(),fly()这三个方法<br>DecoyDuck：诱饵鸭 也需要重写 quack(),display(),fly()这三个方法<br>如果再继续使用继承，会发现一些问题</p>\n<ul>\n<li>代码在多个子类中重复实现</li>\n<li>运行时的行为不容易改变</li>\n<li>很难知道所有鸭子的全部行为</li>\n<li>鸭子不能同时又飞又叫</li>\n<li>改变会牵一发而动全身，造成其他鸭子不想要的改变</li>\n</ul>\n<p>为了避免这些问题，我们把共有的行为抽象成接口，通过子类实现接口的方式来增加行为。<br><img src=\"/2017/10/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/策略3.png\" alt=\"策略3\"></p>\n<p>显然不是个好方法  </p>\n<hr>\n<p><strong>设计原则：找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起</strong><br><strong>设计原则：针对接口编程，而不是针对实现编程</strong><br><strong>设计原则：多用组合，少用继承</strong></p>\n<hr>\n<p>我们使用策略模式来设计<br>首先我们要分开“变化和不变化的部分”，我们知道Duck中的fly()和quack()会随着鸭子的不同而变化，我们将它们从Duck中取出来，建立一组新类来代表每个行为<br><img src=\"/2017/10/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/策略4.png\" alt=\"策略4\"><br>这样的设计，可以让飞行和呱呱叫的动作被其他对象复用，因为这些行为已经与鸭子类无关了。<br>而且我们可以新增一些行为，不会影响到既有的行为类，也不会影响使用到飞行行为的鸭子类  </p>\n<p>下面整合鸭子的行为。在Duck中增加两个变量，分别为flyBechavior和quackBechavior。在Duck中实现fly和quack<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\">    QuackBechavior quackBechavior;</span><br><span class=\"line\">    FlyBechavior flyBechavior;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">performquack</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        quackBechavior.quack();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">performfly</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        flyBechavior.fly();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">swim</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;swim&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>具体鸭子类MallardDuck<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MallardDuck</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Duck</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MallardDuck</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        quackBechavior = <span class=\"keyword\">new</span> <span class=\"title class_\">Quack</span>();</span><br><span class=\"line\">        flyBechavior = <span class=\"keyword\">new</span> <span class=\"title class_\">FlyWithWings</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MallardDuck&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/10/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/策略5.png\" alt=\"策略5\"></p>\n<hr>\n","categories":[],"tags":["设计模式"]},{"title":"悲观锁和乐观锁","url":"https://zhangyaxiao.github.io/2017/08/01/悲观锁和乐观锁/","content":"<p>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p>\n<hr>\n<p>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。</p>\n<hr>\n<p>两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p>\n<hr>\n","categories":[],"tags":["java"]},{"title":"jvm常用命令","url":"https://zhangyaxiao.github.io/2017/04/15/jvm常用命令/","content":"<h1 id=\"jvm常用命令\"><a href=\"#jvm常用命令\" class=\"headerlink\" title=\"jvm常用命令\"></a>jvm常用命令</h1><h2 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h2><p>显示当前运行的java进程以及相关参数  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令格式:jps [option] [hostid]  </span><br></pre></td></tr></table></figure>\n<p>常用参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-q</td>\n<td>只输出LVMID，省略主类的名称</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>输出虚拟机进程启动时传给主类main()函数的参数</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>输出主类的全类名，如果进程执行的是Jar包，输出Jar路径</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>输出虚拟机进程启动时JVM参数</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jvm-1.png\" alt=\"jvm-1\"></p>\n<h2 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h2><p>以输出并修改运行时的java 进程的opts。用处比较简单，就是能输出并修改运行时的java进程的运行参数。用法是jinfo pid<br><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jvm-2.png\" alt=\"jvm-2\"></p>\n<h2 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h2><p>是用于监控虚拟机各种运行状态信息的命令行工具。他可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class=\"line\">参数解释：</span><br><span class=\"line\">option — 选项，我们一般使用 -gc 查看gc情况</span><br><span class=\"line\">vmid — VM的进程号，即当前运行的java进程号</span><br><span class=\"line\">interval– 间隔时间，单位为秒或者毫秒</span><br><span class=\"line\">count — 打印次数，如果缺省则打印无数次</span><br><span class=\"line\"></span><br><span class=\"line\">例子：jstat -gc 5828 250 5</span><br></pre></td></tr></table></figure></p>\n<p>jstat有如下选项：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-gc</td>\n<td>监听Java堆状况，包括Eden区、两个Survivor区、老年代、永久代等的容量，以用空间、GC时间合计等信息</td>\n</tr>\n<tr>\n<td>-gcutil</td>\n<td>监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td>-class</td>\n<td>监视类装载、卸载数量、总空间及类装载所耗费的时间</td>\n</tr>\n<tr>\n<td>-gccapacity</td>\n<td>监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大和最小空间</td>\n</tr>\n<tr>\n<td>-gccause</td>\n<td>与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td>\n</tr>\n<tr>\n<td>-gcnew</td>\n<td>监视新生代GC状况</td>\n</tr>\n<tr>\n<td>-gcnewcapacity</td>\n<td>监视内同与-gcnew基本相同，输出主要关注使用到的最大和最小空间</td>\n</tr>\n<tr>\n<td>-gcold</td>\n<td>监视老年代GC情况</td>\n</tr>\n<tr>\n<td>-gcoldcapacity</td>\n<td>监视内同与-gcold基本相同，输出主要关注使用到的最大和最小空间</td>\n</tr>\n<tr>\n<td>-gcpermcapacity</td>\n<td>输出永久代使用到最大和最小空间</td>\n</tr>\n<tr>\n<td>-compiler</td>\n<td>输出JIT编译器编译过的方法、耗时等信息</td>\n</tr>\n<tr>\n<td>-printcompilation</td>\n<td>输出已经被JIT编译的方法  </td>\n</tr>\n</tbody>\n</table>\n<p>一些输出的解释</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> S0C</td>\n<td>S0区容量（S1区相同，略） </td>\n</tr>\n<tr>\n<td> S0U</td>\n<td>S0区已使用 </td>\n</tr>\n<tr>\n<td> EC</td>\n<td>E区容量 </td>\n</tr>\n<tr>\n<td> EU</td>\n<td>E区已使用 </td>\n</tr>\n<tr>\n<td> OC</td>\n<td>老年代容量 </td>\n</tr>\n<tr>\n<td> OU</td>\n<td>老年代已使用 </td>\n</tr>\n<tr>\n<td> PC</td>\n<td>Perm容量 </td>\n</tr>\n<tr>\n<td> PU</td>\n<td>Perm区已使用 </td>\n</tr>\n<tr>\n<td> YGC</td>\n<td>Young GC（Minor GC）次数 </td>\n</tr>\n<tr>\n<td> YGCT</td>\n<td>Young GC总耗时 </td>\n</tr>\n<tr>\n<td> FGC</td>\n<td>Full GC次数 </td>\n</tr>\n<tr>\n<td> FGCT</td>\n<td>Full GC总耗时 </td>\n</tr>\n<tr>\n<td> GCT</td>\n<td>GC总耗时 </td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jvm-3.png\" alt=\"jvm-3\"><br>JVM堆内存布局<br><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jvm-4.jpg\" alt=\"jvm-4\"></p>\n<h2 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h2><p> jmap用来查看堆内存使用状况。 语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap [option] pid</span><br><span class=\"line\">jmap -permstat pid   打印进程的类加载器和类加载器加载的持久代对象信息，输出：类加载器名称、对象是否存活（不可靠）、对象地址、父类加载器、已加载的类大小等信息</span><br><span class=\"line\">jmap -heap pid   查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况</span><br><span class=\"line\">jmap -histo[:live] pid  查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象</span><br><span class=\"line\">jmap -dump:format=b,file=文件名 [pid]  导出整个JVM 中内存信息</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jmap-1.png\" alt=\"jmap-1\"><br><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jmap-2.png\" alt=\"jmap-2\"><br><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jmap-3.png\" alt=\"jmap-3\"></p>\n<h2 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h2><p>jstack主要用来查看某个Java进程内的线程堆栈信息。语法格式如下：jstack [option] pid</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F</td>\n<td>当正常输出的请求不被响应时，强制输出线程堆栈</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>除堆栈外，显示关于锁的附加信息</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>如果调用到本地方法的话，可以显示C/C++的堆栈</td>\n</tr>\n</tbody>\n</table>\n<p>jstack可以定位到线程堆栈，根据堆栈信息我们可以定位到具体代码，所以它在JVM性能调优中使用得非常多</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>下面我们来一个实例找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有ps、top、printf、jstack、grep<br>找出该进程内最耗费CPU的线程，可以使用top -Hp pid输出如下：<br><img src=\"/2017/04/15/jvm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/jstack-1.png\" alt=\"jstack-1\"><br>TIME列就是各个Java线程耗费的CPU时间，CPU时间最长的是线程ID为12811的线程，用<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf &quot;%x\\n&quot; 12811</span><br></pre></td></tr></table></figure><br>得到12811的十六进制值为320b，用jstack来输出进程12811的堆栈信息，然后根据线程ID的十六进制值grep，如下：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack 12809 |  grep &#x27;320&#x27; -C20</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["jvm"]},{"title":"about","url":"https://zhangyaxiao.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://zhangyaxiao.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://zhangyaxiao.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://zhangyaxiao.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://zhangyaxiao.github.io/tag/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://zhangyaxiao.github.io/category/index.html","content":"","categories":[],"tags":[]}]